package models

import (
	"context"
	"time"
)

// ReviewRequest represents a code review request
type ReviewRequest struct {
	ProjectID    string
	MergeRequest *MergeRequest
	Changes      []*FileDiff
	CommitSHA    string
}

// MergeRequest represents a merge/pull request across different providers
type MergeRequest struct {
	ID           string
	IID          int
	Title        string
	Description  string
	SourceBranch string
	TargetBranch string
	AuthorID     string
	Author       *User
	Reviewers    []*User
	URL          string
	State        string
	SHA          string
}

// FileDiff represents changes in a single file
type FileDiff struct {
	OldPath     string
	NewPath     string
	Diff        string
	IsNew       bool
	IsDeleted   bool
	IsRenamed   bool
	IsBinary    bool
	ContentType string
}

// User represents a user across different providers
type User struct {
	ID       string
	Username string
	Name     string
	Email    string
}

// ReviewComment represents a code review comment
type ReviewComment struct {
	ID       string
	Body     string
	FilePath string
	Line     int
	Author   *User
}

// WebhookEvent represents a webhook event from any provider
type WebhookEvent struct {
	Type         string
	Action       string
	ProjectID    string
	MergeRequest *MergeRequest
	User         *User
	Timestamp    time.Time
}

// AIGeneratedContent represents content generated by AI
type AIGeneratedContent struct {
	Description    string
	ReviewComments []*ReviewComment
	Summary        string
}

// ReviewResult represents the result of a code review process
type ReviewResult struct {
	Success            bool
	ProcessedFiles     int
	CommentsCreated    int
	DescriptionUpdated bool
	Errors             []error
}

// CodeProvider defines the interface for different VCS providers (GitLab, GitHub, etc.)
type CodeProvider interface {
	// Webhook handling
	ValidateWebhook(payload []byte, signature string) error
	ParseWebhookEvent(payload []byte) (*WebhookEvent, error)

	// MR/PR operations
	GetMergeRequest(ctx context.Context, projectID string, mrIID int) (*MergeRequest, error)
	GetMergeRequestDiffs(ctx context.Context, projectID string, mrIID int) ([]*FileDiff, error)
	UpdateMergeRequestDescription(ctx context.Context, projectID string, mrIID int, description string) error

	// Comments
	CreateComment(ctx context.Context, projectID string, mrIID int, comment *ReviewComment) error
	GetComments(ctx context.Context, projectID string, mrIID int) ([]*ReviewComment, error)

	// User operations
	GetCurrentUser(ctx context.Context) (*User, error)
}

// AIAgent defines the interface for AI code review agents
type AIAgent interface {
	GenerateDescription(ctx context.Context, fullDiff string) (string, error)
	ReviewCode(ctx context.Context, filePath, diff string) (string, error)
	SummarizeChanges(ctx context.Context, changes []*FileDiff) (string, error)
}

// WebhookHandler defines the interface for handling webhooks
type WebhookHandler interface {
	HandleWebhook(ctx context.Context, payload []byte, signature string) error
	ValidateSignature(payload []byte, signature string) error
}

// ReviewService defines the interface for the core review service
type ReviewService interface {
	ProcessMergeRequest(ctx context.Context, request *ReviewRequest) (*ReviewResult, error)
	ShouldProcessMergeRequest(ctx context.Context, mr *MergeRequest) bool
}

// FileFilter represents criteria for filtering files to review
type FileFilter struct {
	MaxFileSize       int
	AllowedExtensions []string
	ExcludedPaths     []string
	IncludeOnlyCode   bool
}

// ProviderConfig represents provider-specific configuration
type ProviderConfig struct {
	Type          string
	BaseURL       string
	Token         string
	WebhookSecret string
	BotUsername   string
}
