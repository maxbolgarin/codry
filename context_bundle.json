{
  "overview": {
    "total_files": 10,
    "total_symbols": 284,
    "impact_score": 1542,
    "change_complexity": "critical",
    "high_impact_changes": [
      "High-impact changes in test/config_docs.yaml (0 symbols affected)",
      "High-impact changes in test/example.cpp (26 symbols affected)",
      "High-impact changes in test/example.go (14 symbols affected)",
      "High-impact changes in test/example.java (122 symbols affected)",
      "High-impact changes in test/example.js (25 symbols affected)",
      "High-impact changes in test/example.py (37 symbols affected)",
      "High-impact changes in test/example.ts (60 symbols affected)"
    ],
    "config_changes": [
      {
        "file_path": "test/config_docs.yaml",
        "config_type": "yaml",
        "changed_keys": [
          "gitlab",
          "# Создается в GitLab",
          "# Необходимые права",
          "# Env",
          "token",
          "# По умолчанию",
          "# Env",
          "gitlab_base_url",
          "# Env",
          "bot_username",
          "# Env",
          "webhook_secret",
          "# Формат",
          "# Env",
          "webhook_addr",
          "# Полный URL будет",
          "# Env",
          "webhook_endpoint",
          "# По умолчанию",
          "# Поддерживаемые единицы",
          "# Env",
          "interval_to_wait_limits",
          "agent",
          "# Получается в Google AI Studio",
          "# Env",
          "api_key",
          "# Формат",
          "# Env",
          "proxy_url",
          "# Доступные варианты",
          "# Env",
          "model_name",
          "logger",
          "# Доступные варианты",
          "level",
          "file",
          "# Доступные варианты",
          "stderr"
        ],
        "impact": "High impact: 6 critical configuration keys changed",
        "affected_files": null
      }
    ],
    "deleted_symbols": [],
    "potential_issues": [
      "Large change in test/example.cpp - 26 symbols affected",
      "Large change in test/example.go - 14 symbols affected",
      "Large change in test/example.java - 122 symbols affected",
      "Interface test/example.java.UserService modified - potential breaking change",
      "Interface test/example.java.UserRepository modified - potential breaking change",
      "Large change in test/example.js - 25 symbols affected",
      "Large change in test/example.py - 37 symbols affected",
      "Large change in test/example.ts - 60 symbols affected",
      "Interface test/example.ts.IUserRepository modified - potential breaking change",
      "Interface test/example.ts.IUser modified - potential breaking change",
      "Interface test/example.ts.CreateUserRequest modified - potential breaking change",
      "Interface test/example.ts.UpdateUserRequest modified - potential breaking change",
      "Interface test/example.ts.UserResponse modified - potential breaking change",
      "Interface test/example.ts.IUserService modified - potential breaking change"
    ]
  },
  "files": [
    {
      "file_path": "test/config_docs.yaml",
      "change_type": "Deleted",
      "diff_hunk": "@@ -1,71 +0,0 @@\n-# Конфигурация GitLab MR Reviewer\n-\n-gitlab:\n-  # Токен доступа к GitLab API (обязательное поле)\n-  # Создается в GitLab: User Settings \u003e Access Tokens \u003e Personal Access Tokens\n-  # Необходимые права: api, read_user, read_repository\n-  # Env: GITLAB_TOKEN\n-  token: \"${GITLAB_TOKEN}\"\n-  \n-  # Базовый URL вашего GitLab инстанса (опционально)\n-  # По умолчанию: https://gitlab.158-160-60-159.sslip.io/\n-  # Env: GITLAB_BASE_URL\n-  gitlab_base_url: \"https://gitlab.158-160-60-159.sslip.io/\"\n-  \n-  # Имя пользователя бота в GitLab (обязательное поле)\n-  # Используется для игнорирования собственных действий и избежания зацикливания\n-  # Env: GITLAB_BOT_USERNAME\n-  bot_username: \"mr-reviewer-bot\"\n-  \n-  # Секретный ключ для проверки веб-хуков от GitLab (обязательное поле)\n-  # Должен совпадать с секретом, настроенным в GitLab при создании веб-хука\n-  # Env: GITLAB_WEBHOOK_SECRET\n-  webhook_secret: \"${WEBHOOK_SECRET}\"\n-  \n-  # Адрес и порт для запуска веб-хук сервера (обязательное поле)\n-  # Формат: \":порт\" или \"адрес:порт\"\n-  # Env: GITLAB_WEBHOOK_ADDR\n-  webhook_addr: \":8080\"\n-  \n-  # Путь эндпоинта для приема веб-хуков от GitLab (обязательное поле)\n-  # Полный URL будет: http://your-server:8080/webhook\n-  # Env: GITLAB_WEBHOOK_ENDPOINT\n-  webhook_endpoint: \"/webhook\"\n-  \n-  # Интервал ожидания при получении 429 ошибки от AI агента (опционально)\n-  # По умолчанию: 1m (1 минута)\n-  # Поддерживаемые единицы: ns, us, ms, s, m, h\n-  # Env: GITLAB_INTERVAL_TO_WAIT_LIMITS\n-  interval_to_wait_limits: \"1m\"\n-\n-agent:\n-  # API ключ для доступа к Gemini API (обязательное поле)\n-  # Получается в Google AI Studio: https://aistudio.google.com/app/apikey\n-  # Env: GEMINI_API_KEY\n-  api_key: \"${GEMINI_API_KEY}\"\n-  \n-  # URL прокси-сервера для доступа к Gemini API (опционально)\n-  # Может понадобиться в корпоративной среде или при ограничениях доступа\n-  # Формат: \"http://proxy-server:port\" или \"socks5://proxy-server:port\"\n-  # Env: GEMINI_PROXY_URL\n-  proxy_url: \"\"\n-  \n-  # Название модели Gemini для использования (опционально)\n-  # Доступные варианты:\n-  # - gemini-2.5-flash-preview-05-20 (по умолчанию, быстрая и экономичная)\n-  # - gemini-2.5-pro-preview-06-05 (более мощная, но медленная и дорогая)\n-  # Env: GEMINI_MODEL_NAME\n-  model_name: \"gemini-2.5-flash\"\n-\n-# Конфигурация логирования (опционально)\n-logger:\n-  # Уровень логирования (опционально)\n-  # Доступные варианты: trace, debug, info, warn, error, fatal, disabled\n-  level: \"debug\"\n-  \n-  # Путь к файлу для логирования (опционально)\n-  file: \"\"\n-  \n-  # Вывод ошибок в stderr (опционально)\n-  # Доступные варианты: \"\", json, no-color, default\n-  stderr: \"\"",
      "affected_symbols": [],
      "related_files": [],
      "config_context": {
        "config_type": "yaml",
        "changed_keys": [
          "gitlab",
          "# Создается в GitLab",
          "# Необходимые права",
          "# Env",
          "token",
          "# По умолчанию",
          "# Env",
          "gitlab_base_url",
          "# Env",
          "bot_username",
          "# Env",
          "webhook_secret",
          "# Формат",
          "# Env",
          "webhook_addr",
          "# Полный URL будет",
          "# Env",
          "webhook_endpoint",
          "# По умолчанию",
          "# Поддерживаемые единицы",
          "# Env",
          "interval_to_wait_limits",
          "agent",
          "# Получается в Google AI Studio",
          "# Env",
          "api_key",
          "# Формат",
          "# Env",
          "proxy_url",
          "# Доступные варианты",
          "# Env",
          "model_name",
          "logger",
          "# Доступные варианты",
          "level",
          "file",
          "# Доступные варианты",
          "stderr"
        ],
        "consuming_code": [],
        "impact_assessment": "High impact: 6 critical configuration keys changed"
      }
    },
    {
      "file_path": "test/example.cpp",
      "change_type": "Added",
      "diff_hunk": "@@ -0,0 +1,519 @@\n+#include \u003ciostream\u003e\n+#include \u003cstring\u003e\n+#include \u003cvector\u003e\n+#include \u003cunordered_map\u003e\n+#include \u003cmemory\u003e\n+#include \u003coptional\u003e\n+#include \u003calgorithm\u003e\n+#include \u003cchrono\u003e\n+#include \u003cstdexcept\u003e\n+\n+/**\n+ * User management system in C++\n+ */\n+\n+namespace user_management {\n+\n+// Constants\n+const int MAX_USERS = 1000;\n+const std::string DEFAULT_STATUS = \"ACTIVE\";\n+\n+// Forward declarations\n+class User;\n+class UserRepository;\n+class UserService;\n+\n+// Enums\n+enum class UserStatus {\n+    ACTIVE,\n+    INACTIVE,\n+    SUSPENDED,\n+    DELETED\n+};\n+\n+enum class Permission {\n+    READ,\n+    WRITE,\n+    DELETE,\n+    ADMIN\n+};\n+\n+// Exception classes\n+class UserNotFoundException : public std::runtime_error {\n+public:\n+    explicit UserNotFoundException(int id) \n+        : std::runtime_error(\"User with ID \" + std::to_string(id) + \" not found\") {}\n+};\n+\n+class ValidationException : public std::runtime_error {\n+public:\n+    explicit ValidationException(const std::string\u0026 message) \n+        : std::runtime_error(\"Validation error: \" + message) {}\n+};\n+\n+class DuplicateEmailException : public std::runtime_error {\n+public:\n+    explicit DuplicateEmailException(const std::string\u0026 email) \n+        : std::runtime_error(\"User with email \" + email + \" already exists\") {}\n+};\n+\n+// Utility functions\n+std::string statusToString(UserStatus status) {\n+    switch (status) {\n+        case UserStatus::ACTIVE: return \"ACTIVE\";\n+        case UserStatus::INACTIVE: return \"INACTIVE\";\n+        case UserStatus::SUSPENDED: return \"SUSPENDED\";\n+        case UserStatus::DELETED: return \"DELETED\";\n+        default: return \"UNKNOWN\";\n+    }\n+}\n+\n+UserStatus stringToStatus(const std::string\u0026 status) {\n+    if (status == \"ACTIVE\") return UserStatus::ACTIVE;\n+    if (status == \"INACTIVE\") return UserStatus::INACTIVE;\n+    if (status == \"SUSPENDED\") return UserStatus::SUSPENDED;\n+    if (status == \"DELETED\") return UserStatus::DELETED;\n+    throw std::invalid_argument(\"Unknown status: \" + status);\n+}\n+\n+bool isValidEmail(const std::string\u0026 email) {\n+    return email.find('@') != std::string::npos \u0026\u0026 \n+           email.find('.') != std::string::npos \u0026\u0026\n+           email.length() \u003e 5;\n+}\n+\n+// User class\n+class User {\n+private:\n+    int id_;\n+    std::string name_;\n+    std::string email_;\n+    UserStatus status_;\n+    std::chrono::system_clock::time_point created_at_;\n+    std::optional\u003cstd::chrono::system_clock::time_point\u003e last_login_at_;\n+    std::vector\u003cPermission\u003e permissions_;\n+    std::unordered_map\u003cstd::string, std::string\u003e metadata_;\n+\n+public:\n+    // Constructors\n+    User() : id_(0), status_(UserStatus::ACTIVE), created_at_(std::chrono::system_clock::now()) {}\n+    \n+    User(int id, const std::string\u0026 name, const std::string\u0026 email)\n+        : id_(id), name_(name), email_(email), status_(UserStatus::ACTIVE),\n+          created_at_(std::chrono::system_clock::now()) {}\n+    \n+    User(const std::string\u0026 name, const std::string\u0026 email, \n+         const std::vector\u003cPermission\u003e\u0026 permissions)\n+        : id_(0), name_(name), email_(email), status_(UserStatus::ACTIVE),\n+          created_at_(std::chrono::system_clock::now()), permissions_(permissions) {}\n+\n+    // Copy constructor\n+    User(const User\u0026 other) = default;\n+    \n+    // Move constructor\n+    User(User\u0026\u0026 other) noexcept = default;\n+    \n+    // Assignment operators\n+    User\u0026 operator=(const User\u0026 other) = default;\n+    User\u0026 operator=(User\u0026\u0026 other) noexcept = default;\n+\n+    // Destructor\n+    virtual ~User() = default;\n+\n+    // Getters\n+    int getId() const { return id_; }\n+    const std::string\u0026 getName() const { return name_; }\n+    const std::string\u0026 getEmail() const { return email_; }\n+    UserStatus getStatus() const { return status_; }\n+    const auto\u0026 getCreatedAt() const { return created_at_; }\n+    const auto\u0026 getLastLoginAt() const { return last_login_at_; }\n+    const std::vector\u003cPermission\u003e\u0026 getPermissions() const { return permissions_; }\n+    const std::unordered_map\u003cstd::string, std::string\u003e\u0026 getMetadata() const { return metadata_; }\n+\n+    // Setters\n+    void setId(int id) { id_ = id; }\n+    void setName(const std::string\u0026 name) { name_ = name; }\n+    void setEmail(const std::string\u0026 email) { email_ = email; }\n+    void setStatus(UserStatus status) { status_ = status; }\n+    void setPermissions(const std::vector\u003cPermission\u003e\u0026 permissions) { permissions_ = permissions; }\n+    void setMetadata(const std::unordered_map\u003cstd::string, std::string\u003e\u0026 metadata) { metadata_ = metadata; }\n+\n+    // Business methods\n+    void activate() { status_ = UserStatus::ACTIVE; }\n+    void deactivate() { status_ = UserStatus::INACTIVE; }\n+    void suspend() { status_ = UserStatus::SUSPENDED; }\n+\n+    bool hasPermission(Permission permission) const {\n+        return std::find(permissions_.begin(), permissions_.end(), permission) != permissions_.end() ||\n+               std::find(permissions_.begin(), permissions_.end(), Permission::ADMIN) != permissions_.end();\n+    }\n+\n+    void addPermission(Permission permission) {\n+        if (!hasPermission(permission)) {\n+            permissions_.push_back(permission);\n+        }\n+    }\n+\n+    void removePermission(Permission permission) {\n+        permissions_.erase(\n+            std::remove(permissions_.begin(), permissions_.end(), permission),\n+            permissions_.end()\n+        );\n+    }\n+\n+    void updateLastLogin() {\n+        last_login_at_ = std::chrono::system_clock::now();\n+    }\n+\n+    std::string getDisplayName() const {\n+        return name_ + \" (\" + email_ + \")\";\n+    }\n+\n+    bool isActive() const {\n+        return status_ == UserStatus::ACTIVE;\n+    }\n+\n+    // Operators\n+    bool operator==(const User\u0026 other) const {\n+        return id_ == other.id_;\n+    }\n+\n+    bool operator!=(const User\u0026 other) const {\n+        return !(*this == other);\n+    }\n+\n+    friend std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const User\u0026 user) {\n+        os \u003c\u003c \"User{id=\" \u003c\u003c user.id_ \n+           \u003c\u003c \", name='\" \u003c\u003c user.name_ \n+           \u003c\u003c \"', email='\" \u003c\u003c user.email_ \n+           \u003c\u003c \"', status=\" \u003c\u003c statusToString(user.status_) \u003c\u003c \"}\";\n+        return os;\n+    }\n+};\n+\n+// Template for repository interface\n+template\u003ctypename T, typename K = int\u003e\n+class Repository {\n+public:\n+    virtual ~Repository() = default;\n+    virtual std::optional\u003cT\u003e findById(K id) = 0;\n+    virtual T save(const T\u0026 entity) = 0;\n+    virtual bool deleteById(K id) = 0;\n+    virtual std::vector\u003cT\u003e findAll() = 0;\n+};\n+\n+// User repository interface\n+class UserRepository : public Repository\u003cUser, int\u003e {\n+public:\n+    virtual std::optional\u003cUser\u003e findByEmail(const std::string\u0026 email) = 0;\n+    virtual std::vector\u003cUser\u003e findByStatus(UserStatus status) = 0;\n+};\n+\n+// Memory-based repository implementation\n+class MemoryUserRepository : public UserRepository {\n+private:\n+    std::unordered_map\u003cint, User\u003e users_;\n+    int next_id_;\n+\n+public:\n+    MemoryUserRepository() : next_id_(1) {}\n+\n+    std::optional\u003cUser\u003e findById(int id) override {\n+        auto it = users_.find(id);\n+        if (it != users_.end()) {\n+            return it-\u003esecond;\n+        }\n+        return std::nullopt;\n+    }\n+\n+    User save(const User\u0026 user) override {\n+        User saved_user = user;\n+        if (saved_user.getId() == 0) {\n+            saved_user.setId(next_id_++);\n+        }\n+        users_[saved_user.getId()] = saved_user;\n+        return saved_user;\n+    }\n+\n+    bool deleteById(int id) override {\n+        return users_.erase(id) \u003e 0;\n+    }\n+\n+    std::vector\u003cUser\u003e findAll() override {\n+        std::vector\u003cUser\u003e result;\n+        result.reserve(users_.size());\n+        for (const auto\u0026 pair : users_) {\n+            result.push_back(pair.second);\n+        }\n+        return result;\n+    }\n+\n+    std::optional\u003cUser\u003e findByEmail(const std::string\u0026 email) override {\n+        for (const auto\u0026 pair : users_) {\n+            if (pair.second.getEmail() == email) {\n+                return pair.second;\n+            }\n+        }\n+        return std::nullopt;\n+    }\n+\n+    std::vector\u003cUser\u003e findByStatus(UserStatus status) override {\n+        std::vector\u003cUser\u003e result;\n+        for (const auto\u0026 pair : users_) {\n+            if (pair.second.getStatus() == status) {\n+                result.push_back(pair.second);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    size_t size() const { return users_.size(); }\n+    void clear() { users_.clear(); next_id_ = 1; }\n+};\n+\n+// Create User Request struct\n+struct CreateUserRequest {\n+    std::string name;\n+    std::string email;\n+    std::vector\u003cPermission\u003e permissions;\n+    std::unordered_map\u003cstd::string, std::string\u003e metadata;\n+\n+    CreateUserRequest() = default;\n+    CreateUserRequest(const std::string\u0026 n, const std::string\u0026 e) \n+        : name(n), email(e) {}\n+};\n+\n+// Update User Request struct\n+struct UpdateUserRequest {\n+    std::optional\u003cstd::string\u003e name;\n+    std::optional\u003cstd::string\u003e email;\n+    std::optional\u003cUserStatus\u003e status;\n+    std::optional\u003cstd::vector\u003cPermission\u003e\u003e permissions;\n+};\n+\n+// User service class\n+class UserService {\n+private:\n+    std::unique_ptr\u003cUserRepository\u003e repository_;\n+    std::unordered_map\u003cint, User\u003e cache_;\n+\n+    void validateCreateRequest(const CreateUserRequest\u0026 request) {\n+        if (request.name.empty()) {\n+            throw ValidationException(\"Name is required\");\n+        }\n+        if (request.email.empty() || !isValidEmail(request.email)) {\n+            throw ValidationException(\"Valid email is required\");\n+        }\n+    }\n+\n+public:\n+    explicit UserService(std::unique_ptr\u003cUserRepository\u003e repository)\n+        : repository_(std::move(repository)) {}\n+\n+    User getUser(int id) {\n+        auto cache_it = cache_.find(id);\n+        if (cache_it != cache_.end()) {\n+            return cache_it-\u003esecond;\n+        }\n+\n+        auto user = repository_-\u003efindById(id);\n+        if (!user) {\n+            throw UserNotFoundException(id);\n+        }\n+\n+        cache_[id] = *user;\n+        return *user;\n+    }\n+\n+    User createUser(const CreateUserRequest\u0026 request) {\n+        validateCreateRequest(request);\n+\n+        auto existing = repository_-\u003efindByEmail(request.email);\n+        if (existing) {\n+            throw DuplicateEmailException(request.email);\n+        }\n+\n+        User user(0, request.name, request.email);\n+        user.setPermissions(request.permissions);\n+        user.setMetadata(request.metadata);\n+\n+        User saved_user = repository_-\u003esave(user);\n+        std::cout \u003c\u003c \"Created user: \" \u003c\u003c saved_user.getDisplayName() \u003c\u003c std::endl;\n+        return saved_user;\n+    }\n+\n+    User updateUser(int id, const UpdateUserRequest\u0026 request) {\n+        User user = getUser(id);\n+\n+        if (request.name) user.setName(*request.name);\n+        if (request.email) {\n+            if (!isValidEmail(*request.email)) {\n+                throw ValidationException(\"Invalid email format\");\n+            }\n+            user.setEmail(*request.email);\n+        }\n+        if (request.status) user.setStatus(*request.status);\n+        if (request.permissions) user.setPermissions(*request.permissions);\n+\n+        User updated_user = repository_-\u003esave(user);\n+        cache_[id] = updated_user;\n+        return updated_user;\n+    }\n+\n+    bool deleteUser(int id) {\n+        User user = getUser(id);\n+        bool success = repository_-\u003edeleteById(id);\n+\n+        if (success) {\n+            cache_.erase(id);\n+            std::cout \u003c\u003c \"Deleted user: \" \u003c\u003c user.getDisplayName() \u003c\u003c std::endl;\n+        }\n+\n+        return success;\n+    }\n+\n+    std::vector\u003cUser\u003e listUsers() {\n+        std::vector\u003cUser\u003e users = repository_-\u003efindAll();\n+        std::sort(users.begin(), users.end(), \n+                  [](const User\u0026 a, const User\u0026 b) {\n+                      return a.getCreatedAt() \u003c b.getCreatedAt();\n+                  });\n+        return users;\n+    }\n+\n+    std::vector\u003cUser\u003e searchUsers(const std::string\u0026 query) {\n+        std::vector\u003cUser\u003e users = repository_-\u003efindAll();\n+        std::vector\u003cUser\u003e result;\n+\n+        std::string lower_query = query;\n+        std::transform(lower_query.begin(), lower_query.end(), lower_query.begin(), ::tolower);\n+\n+        for (const auto\u0026 user : users) {\n+            std::string lower_name = user.getName();\n+            std::string lower_email = user.getEmail();\n+            std::transform(lower_name.begin(), lower_name.end(), lower_name.begin(), ::tolower);\n+            std::transform(lower_email.begin(), lower_email.end(), lower_email.begin(), ::tolower);\n+\n+            if (lower_name.find(lower_query) != std::string::npos ||\n+                lower_email.find(lower_query) != std::string::npos) {\n+                result.push_back(user);\n+            }\n+        }\n+\n+        return result;\n+    }\n+};\n+\n+// User manager class\n+class UserManager {\n+private:\n+    std::unique_ptr\u003cUserService\u003e service_;\n+\n+public:\n+    explicit UserManager(std::unique_ptr\u003cUserService\u003e service)\n+        : service_(std::move(service)) {}\n+\n+    std::vector\u003cUser\u003e bulkCreateUsers(const std::vector\u003cCreateUserRequest\u003e\u0026 requests) {\n+        std::vector\u003cUser\u003e created_users;\n+        created_users.reserve(requests.size());\n+\n+        for (const auto\u0026 request : requests) {\n+            try {\n+                User user = service_-\u003ecreateUser(request);\n+                created_users.push_back(user);\n+            } catch (const std::exception\u0026 e) {\n+                std::cerr \u003c\u003c \"Failed to create user \" \u003c\u003c request.name \n+                          \u003c\u003c \": \" \u003c\u003c e.what() \u003c\u003c std::endl;\n+            }\n+        }\n+\n+        return created_users;\n+    }\n+\n+    std::unordered_map\u003cstd::string, int\u003e getUserStats() {\n+        std::vector\u003cUser\u003e users = service_-\u003elistUsers();\n+        std::unordered_map\u003cstd::string, int\u003e stats;\n+\n+        stats[\"total\"] = static_cast\u003cint\u003e(users.size());\n+        stats[\"active\"] = static_cast\u003cint\u003e(std::count_if(users.begin(), users.end(),\n+                                                        [](const User\u0026 u) { return u.isActive(); }));\n+        stats[\"inactive\"] = static_cast\u003cint\u003e(std::count_if(users.begin(), users.end(),\n+                                                          [](const User\u0026 u) { return u.getStatus() == UserStatus::INACTIVE; }));\n+        stats[\"suspended\"] = static_cast\u003cint\u003e(std::count_if(users.begin(), users.end(),\n+                                                           [](const User\u0026 u) { return u.getStatus() == UserStatus::SUSPENDED; }));\n+\n+        return stats;\n+    }\n+\n+    std::string exportUsers() {\n+        std::vector\u003cUser\u003e users = service_-\u003elistUsers();\n+        std::string result = \"ID,Name,Email,Status\\n\";\n+\n+        for (const auto\u0026 user : users) {\n+            result += std::to_string(user.getId()) + \",\" +\n+                     user.getName() + \",\" +\n+                     user.getEmail() + \",\" +\n+                     statusToString(user.getStatus()) + \"\\n\";\n+        }\n+\n+        return result;\n+    }\n+};\n+\n+// Factory functions\n+std::unique_ptr\u003cUserService\u003e createUserService() {\n+    auto repository = std::make_unique\u003cMemoryUserRepository\u003e();\n+    return std::make_unique\u003cUserService\u003e(std::move(repository));\n+}\n+\n+// Global variables\n+static int user_count = 0;\n+static bool is_initialized = false;\n+\n+// Initialization function\n+void initializeSystem() {\n+    is_initialized = true;\n+    user_count = 0;\n+    std::cout \u003c\u003c \"User management system initialized\" \u003c\u003c std::endl;\n+}\n+\n+} // namespace user_management\n+\n+// Main function\n+int main() {\n+    try {\n+        using namespace user_management;\n+        \n+        initializeSystem();\n+\n+        auto service = createUserService();\n+        auto manager = std::make_unique\u003cUserManager\u003e(std::move(service));\n+\n+        // Create test users\n+        std::vector\u003cCreateUserRequest\u003e requests = {\n+            CreateUserRequest(\"Alice Johnson\", \"alice@example.com\"),\n+            CreateUserRequest(\"Bob Smith\", \"bob@example.com\"),\n+            CreateUserRequest(\"Charlie Brown\", \"charlie@example.com\")\n+        };\n+\n+        auto created_users = manager-\u003ebulkCreateUsers(requests);\n+        std::cout \u003c\u003c \"Created \" \u003c\u003c created_users.size() \u003c\u003c \" users\" \u003c\u003c std::endl;\n+\n+        // Get stats\n+        auto stats = manager-\u003egetUserStats();\n+        std::cout \u003c\u003c \"User statistics:\" \u003c\u003c std::endl;\n+        for (const auto\u0026 pair : stats) {\n+            std::cout \u003c\u003c \"  \" \u003c\u003c pair.first \u003c\u003c \": \" \u003c\u003c pair.second \u003c\u003c std::endl;\n+        }\n+\n+        // Export users\n+        std::string export_data = manager-\u003eexportUsers();\n+        std::cout \u003c\u003c \"Exported data:\\n\" \u003c\u003c export_data \u003c\u003c std::endl;\n+\n+    } catch (const std::exception\u0026 e) {\n+        std::cerr \u003c\u003c \"Error: \" \u003c\u003c e.what() \u003c\u003c std::endl;\n+        return 1;\n+    }\n+\n+    return 0;\n+} \n\\ No newline at end of file",
      "affected_symbols": [
        {
          "symbol_name": "MemoryUserRepository",
          "symbol_type": "class",
          "full_code": "class MemoryUserRepository : public UserRepository {\nprivate:\n    std::unordered_map\u003cint, User\u003e users_;\n    int next_id_;\n\npublic:\n    MemoryUserRepository() : next_id_(1) {}\n\n    std::optional\u003cUser\u003e findById(int id) override {\n        auto it = users_.find(id);\n        if (it != users_.end()) {\n            return it-\u003esecond;\n        }\n        return std::nullopt;\n    }\n\n    User save(const User\u0026 user) override {\n        User saved_user = user;\n        if (saved_user.getId() == 0) {\n            saved_user.setId(next_id_++);\n        }\n        users_[saved_user.getId()] = saved_user;\n        return saved_user;\n    }\n\n    bool deleteById(int id) override {\n        return users_.erase(id) \u003e 0;\n    }\n\n    std::vector\u003cUser\u003e findAll() override {\n        std::vector\u003cUser\u003e result;\n        result.reserve(users_.size());\n        for (const auto\u0026 pair : users_) {\n            result.push_back(pair.second);\n        }\n        return result;\n    }\n\n    std::optional\u003cUser\u003e findByEmail(const std::string\u0026 email) override {\n        for (const auto\u0026 pair : users_) {\n            if (pair.second.getEmail() == email) {\n                return pair.second;\n            }\n        }\n        return std::nullopt;\n    }\n\n    std::vector\u003cUser\u003e findByStatus(UserStatus status) override {\n        std::vector\u003cUser\u003e result;\n        for (const auto\u0026 pair : users_) {\n            if (pair.second.getStatus() == status) {\n                result.push_back(pair.second);\n            }\n        }\n        return result;\n    }\n\n    size_t size() const { return users_.size(); }\n    void clear() { users_.clear(); next_id_ = 1; }\n};",
          "doc_comment": "// Memory-based repository implementation",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "std::unordered_map\u003cint, User\u003e",
              "snippet": "std::unordered_map\u003cint, User\u003e users_;",
              "line": 215,
              "type": "field_declaration"
            },
            {
              "name": "next_id_",
              "snippet": "int next_id_;",
              "line": 216,
              "type": "field_declaration"
            },
            {
              "name": "std::optional\u003cUser\u003e",
              "snippet": "std::optional\u003cUser\u003e findById(int id) override {\n        auto it = users_.find(id);\n        if (it != users_.end()) {\n            return it-\u003esecond;\n        }\n        return std::nullopt;\n    }",
              "line": 221,
              "type": "function"
            },
            {
              "name": "id",
              "snippet": "int id",
              "line": 221,
              "type": "parameter_declaration"
            },
            {
              "name": "users_.find",
              "snippet": "users_.find(id)",
              "line": 222,
              "type": "call_expression"
            },
            {
              "name": "users_.end",
              "snippet": "users_.end()",
              "line": 223,
              "type": "call_expression"
            },
            {
              "name": "User",
              "snippet": "User save(const User\u0026 user) override {\n        User saved_user = user;\n        if (saved_user.getId() == 0) {\n            saved_user.setId(next_id_++);\n        }\n        users_[saved_user.getId()] = saved_user;\n        return saved_user;\n    }",
              "line": 229,
              "type": "function"
            },
            {
              "name": "User",
              "snippet": "const User\u0026 user",
              "line": 229,
              "type": "parameter_declaration"
            },
            {
              "name": "User",
              "snippet": "User saved_user = user;",
              "line": 230,
              "type": "declaration"
            },
            {
              "name": "saved_user.getId",
              "snippet": "saved_user.getId()",
              "line": 231,
              "type": "call_expression"
            },
            {
              "name": "saved_user.setId",
              "snippet": "saved_user.setId(next_id_++)",
              "line": 232,
              "type": "call_expression"
            },
            {
              "name": "saved_user.getId",
              "snippet": "saved_user.getId()",
              "line": 234,
              "type": "call_expression"
            },
            {
              "name": "id",
              "snippet": "int id",
              "line": 238,
              "type": "parameter_declaration"
            },
            {
              "name": "users_.erase",
              "snippet": "users_.erase(id)",
              "line": 239,
              "type": "call_expression"
            },
            {
              "name": "std::vector\u003cUser\u003e",
              "snippet": "std::vector\u003cUser\u003e findAll() override {\n        std::vector\u003cUser\u003e result;\n        result.reserve(users_.size());\n        for (const auto\u0026 pair : users_) {\n            result.push_back(pair.second);\n        }\n        return result;\n    }",
              "line": 242,
              "type": "function"
            },
            {
              "name": "std::vector\u003cUser\u003e",
              "snippet": "std::vector\u003cUser\u003e result;",
              "line": 243,
              "type": "declaration"
            },
            {
              "name": "result.reserve",
              "snippet": "result.reserve(users_.size())",
              "line": 244,
              "type": "call_expression"
            },
            {
              "name": "users_.size",
              "snippet": "users_.size()",
              "line": 244,
              "type": "call_expression"
            },
            {
              "name": "result.push_back",
              "snippet": "result.push_back(pair.second)",
              "line": 246,
              "type": "call_expression"
            },
            {
              "name": "std::optional\u003cUser\u003e",
              "snippet": "std::optional\u003cUser\u003e findByEmail(const std::string\u0026 email) override {\n        for (const auto\u0026 pair : users_) {\n            if (pair.second.getEmail() == email) {\n                return pair.second;\n            }\n        }\n        return std::nullopt;\n    }",
              "line": 251,
              "type": "function"
            },
            {
              "name": "std::string",
              "snippet": "const std::string\u0026 email",
              "line": 251,
              "type": "parameter_declaration"
            },
            {
              "name": "pair.second.getEmail",
              "snippet": "pair.second.getEmail()",
              "line": 253,
              "type": "call_expression"
            },
            {
              "name": "std::vector\u003cUser\u003e",
              "snippet": "std::vector\u003cUser\u003e findByStatus(UserStatus status) override {\n        std::vector\u003cUser\u003e result;\n        for (const auto\u0026 pair : users_) {\n            if (pair.second.getStatus() == status) {\n                result.push_back(pair.second);\n            }\n        }\n        return result;\n    }",
              "line": 260,
              "type": "function"
            },
            {
              "name": "UserStatus",
              "snippet": "UserStatus status",
              "line": 260,
              "type": "parameter_declaration"
            },
            {
              "name": "std::vector\u003cUser\u003e",
              "snippet": "std::vector\u003cUser\u003e result;",
              "line": 261,
              "type": "declaration"
            },
            {
              "name": "pair.second.getStatus",
              "snippet": "pair.second.getStatus()",
              "line": 263,
              "type": "call_expression"
            },
            {
              "name": "result.push_back",
              "snippet": "result.push_back(pair.second)",
              "line": 264,
              "type": "call_expression"
            },
            {
              "name": "users_.size",
              "snippet": "users_.size()",
              "line": 270,
              "type": "call_expression"
            },
            {
              "name": "users_.clear",
              "snippet": "users_.clear()",
              "line": 271,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.cpp",
          "start_line": 213,
          "end_line": 272
        },
        {
          "symbol_name": "CreateUserRequest",
          "symbol_type": "struct",
          "full_code": "struct CreateUserRequest {\n    std::string name;\n    std::string email;\n    std::vector\u003cPermission\u003e permissions;\n    std::unordered_map\u003cstd::string, std::string\u003e metadata;\n\n    CreateUserRequest() = default;\n    CreateUserRequest(const std::string\u0026 n, const std::string\u0026 e) \n        : name(n), email(e) {}\n};",
          "doc_comment": "// Create User Request struct",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "std::string",
              "snippet": "std::string name;",
              "line": 276,
              "type": "field_declaration"
            },
            {
              "name": "std::string",
              "snippet": "std::string email;",
              "line": 277,
              "type": "field_declaration"
            },
            {
              "name": "std::vector\u003cPermission\u003e",
              "snippet": "std::vector\u003cPermission\u003e permissions;",
              "line": 278,
              "type": "field_declaration"
            },
            {
              "name": "std::unordered_map\u003cstd::string, std::string\u003e",
              "snippet": "std::unordered_map\u003cstd::string, std::string\u003e metadata;",
              "line": 279,
              "type": "field_declaration"
            },
            {
              "name": "std::string",
              "snippet": "const std::string\u0026 n",
              "line": 282,
              "type": "parameter_declaration"
            },
            {
              "name": "std::string",
              "snippet": "const std::string\u0026 e",
              "line": 282,
              "type": "parameter_declaration"
            }
          ],
          "file_path": "test/example.cpp",
          "start_line": 275,
          "end_line": 284
        },
        {
          "symbol_name": "UserRepository",
          "symbol_type": "class",
          "full_code": "class UserRepository;",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.cpp",
          "start_line": 23,
          "end_line": 23
        },
        {
          "symbol_name": "std::ostream",
          "symbol_type": "function",
          "full_code": "    friend std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 os, const User\u0026 user) {\n        os \u003c\u003c \"User{id=\" \u003c\u003c user.id_ \n           \u003c\u003c \", name='\" \u003c\u003c user.name_ \n           \u003c\u003c \"', email='\" \u003c\u003c user.email_ \n           \u003c\u003c \"', status=\" \u003c\u003c statusToString(user.status_) \u003c\u003c \"}\";\n        return os;\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "statusToString",
              "snippet": "statusToString(user.status_)",
              "line": 189,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.cpp",
          "start_line": 185,
          "end_line": 191
        },
        {
          "symbol_name": "UserManager",
          "symbol_type": "class",
          "full_code": "class UserManager {\nprivate:\n    std::unique_ptr\u003cUserService\u003e service_;\n\npublic:\n    explicit UserManager(std::unique_ptr\u003cUserService\u003e service)\n        : service_(std::move(service)) {}\n\n    std::vector\u003cUser\u003e bulkCreateUsers(const std::vector\u003cCreateUserRequest\u003e\u0026 requests) {\n        std::vector\u003cUser\u003e created_users;\n        created_users.reserve(requests.size());\n\n        for (const auto\u0026 request : requests) {\n            try {\n                User user = service_-\u003ecreateUser(request);\n                created_users.push_back(user);\n            } catch (const std::exception\u0026 e) {\n                std::cerr \u003c\u003c \"Failed to create user \" \u003c\u003c request.name \n                          \u003c\u003c \": \" \u003c\u003c e.what() \u003c\u003c std::endl;\n            }\n        }\n\n        return created_users;\n    }\n\n    std::unordered_map\u003cstd::string, int\u003e getUserStats() {\n        std::vector\u003cUser\u003e users = service_-\u003elistUsers();\n        std::unordered_map\u003cstd::string, int\u003e stats;\n\n        stats[\"total\"] = static_cast\u003cint\u003e(users.size());\n        stats[\"active\"] = static_cast\u003cint\u003e(std::count_if(users.begin(), users.end(),\n                                                        [](const User\u0026 u) { return u.isActive(); }));\n        stats[\"inactive\"] = static_cast\u003cint\u003e(std::count_if(users.begin(), users.end(),\n                                                          [](const User\u0026 u) { return u.getStatus() == UserStatus::INACTIVE; }));\n        stats[\"suspended\"] = static_cast\u003cint\u003e(std::count_if(users.begin(), users.end(),\n                                                           [](const User\u0026 u) { return u.getStatus() == UserStatus::SUSPENDED; }));\n\n        return stats;\n    }\n\n    std::string exportUsers() {\n        std::vector\u003cUser\u003e users = service_-\u003elistUsers();\n        std::string result = \"ID,Name,Email,Status\\n\";\n\n        for (const auto\u0026 user : users) {\n            result += std::to_string(user.getId()) + \",\" +\n                     user.getName() + \",\" +\n                     user.getEmail() + \",\" +\n                     statusToString(user.getStatus()) + \"\\n\";\n        }\n\n        return result;\n    }\n};",
          "doc_comment": "// User manager class",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "std::unique_ptr\u003cUserService\u003e",
              "snippet": "std::unique_ptr\u003cUserService\u003e service_;",
              "line": 410,
              "type": "field_declaration"
            },
            {
              "name": "std::unique_ptr\u003cUserService\u003e",
              "snippet": "std::unique_ptr\u003cUserService\u003e service",
              "line": 413,
              "type": "parameter_declaration"
            },
            {
              "name": "std::move",
              "snippet": "std::move(service)",
              "line": 414,
              "type": "call_expression"
            },
            {
              "name": "std::vector\u003cUser\u003e",
              "snippet": "std::vector\u003cUser\u003e bulkCreateUsers(const std::vector\u003cCreateUserRequest\u003e\u0026 requests) {\n        std::vector\u003cUser\u003e created_users;\n        created_users.reserve(requests.size());\n\n        for (const auto\u0026 request : requests) {\n            try {\n                User user = service_-\u003ecreateUser(request);\n                created_users.push_back(user);\n            } catch (const std::exception\u0026 e) {\n                std::cerr \u003c\u003c \"Failed to create user \" \u003c\u003c request.name \n                          \u003c\u003c \": \" \u003c\u003c e.what() \u003c\u003c std::endl;\n            }\n        }\n\n        return created_users;\n    }",
              "line": 416,
              "type": "function"
            },
            {
              "name": "std::vector\u003cCreateUserRequest\u003e",
              "snippet": "const std::vector\u003cCreateUserRequest\u003e\u0026 requests",
              "line": 416,
              "type": "parameter_declaration"
            },
            {
              "name": "std::vector\u003cUser\u003e",
              "snippet": "std::vector\u003cUser\u003e created_users;",
              "line": 417,
              "type": "declaration"
            },
            {
              "name": "created_users.reserve",
              "snippet": "created_users.reserve(requests.size())",
              "line": 418,
              "type": "call_expression"
            },
            {
              "name": "requests.size",
              "snippet": "requests.size()",
              "line": 418,
              "type": "call_expression"
            },
            {
              "name": "User",
              "snippet": "User user = service_-\u003ecreateUser(request);",
              "line": 422,
              "type": "declaration"
            },
            {
              "name": "service_-\u003ecreateUser",
              "snippet": "service_-\u003ecreateUser(request)",
              "line": 422,
              "type": "call_expression"
            },
            {
              "name": "created_users.push_back",
              "snippet": "created_users.push_back(user)",
              "line": 423,
              "type": "call_expression"
            },
            {
              "name": "std::exception",
              "snippet": "const std::exception\u0026 e",
              "line": 424,
              "type": "parameter_declaration"
            },
            {
              "name": "e.what",
              "snippet": "e.what()",
              "line": 426,
              "type": "call_expression"
            },
            {
              "name": "std::unordered_map\u003cstd::string, int\u003e",
              "snippet": "std::unordered_map\u003cstd::string, int\u003e getUserStats() {\n        std::vector\u003cUser\u003e users = service_-\u003elistUsers();\n        std::unordered_map\u003cstd::string, int\u003e stats;\n\n        stats[\"total\"] = static_cast\u003cint\u003e(users.size());\n        stats[\"active\"] = static_cast\u003cint\u003e(std::count_if(users.begin(), users.end(),\n                                                        [](const User\u0026 u) { return u.isActive(); }));\n        stats[\"inactive\"] = static_cast\u003cint\u003e(std::count_if(users.begin(), users.end(),\n                                                          [](const User\u0026 u) { return u.getStatus() == UserStatus::INACTIVE; }));\n        stats[\"suspended\"] = static_cast\u003cint\u003e(std::count_if(users.begin(), users.end(),\n                                                           [](const User\u0026 u) { return u.getStatus() == UserStatus::SUSPENDED; }));\n\n        return stats;\n    }",
              "line": 433,
              "type": "function"
            },
            {
              "name": "std::vector\u003cUser\u003e",
              "snippet": "std::vector\u003cUser\u003e users = service_-\u003elistUsers();",
              "line": 434,
              "type": "declaration"
            },
            {
              "name": "service_-\u003elistUsers",
              "snippet": "service_-\u003elistUsers()",
              "line": 434,
              "type": "call_expression"
            },
            {
              "name": "std::unordered_map\u003cstd::string, int\u003e",
              "snippet": "std::unordered_map\u003cstd::string, int\u003e stats;",
              "line": 435,
              "type": "declaration"
            },
            {
              "name": "users.size",
              "snippet": "users.size()",
              "line": 437,
              "type": "call_expression"
            },
            {
              "name": "std::count_if",
              "snippet": "std::count_if(users.begin(), users.end(),\n                                                        [](const User\u0026 u) { return u.isActive(); })",
              "line": 438,
              "type": "call_expression"
            },
            {
              "name": "users.begin",
              "snippet": "users.begin()",
              "line": 438,
              "type": "call_expression"
            },
            {
              "name": "users.end",
              "snippet": "users.end()",
              "line": 438,
              "type": "call_expression"
            },
            {
              "name": "User",
              "snippet": "const User\u0026 u",
              "line": 439,
              "type": "parameter_declaration"
            },
            {
              "name": "u.isActive",
              "snippet": "u.isActive()",
              "line": 439,
              "type": "call_expression"
            },
            {
              "name": "std::count_if",
              "snippet": "std::count_if(users.begin(), users.end(),\n                                                          [](const User\u0026 u) { return u.getStatus() == UserStatus::INACTIVE; })",
              "line": 440,
              "type": "call_expression"
            },
            {
              "name": "users.begin",
              "snippet": "users.begin()",
              "line": 440,
              "type": "call_expression"
            },
            {
              "name": "users.end",
              "snippet": "users.end()",
              "line": 440,
              "type": "call_expression"
            },
            {
              "name": "User",
              "snippet": "const User\u0026 u",
              "line": 441,
              "type": "parameter_declaration"
            },
            {
              "name": "u.getStatus",
              "snippet": "u.getStatus()",
              "line": 441,
              "type": "call_expression"
            },
            {
              "name": "std::count_if",
              "snippet": "std::count_if(users.begin(), users.end(),\n                                                           [](const User\u0026 u) { return u.getStatus() == UserStatus::SUSPENDED; })",
              "line": 442,
              "type": "call_expression"
            },
            {
              "name": "users.begin",
              "snippet": "users.begin()",
              "line": 442,
              "type": "call_expression"
            },
            {
              "name": "users.end",
              "snippet": "users.end()",
              "line": 442,
              "type": "call_expression"
            },
            {
              "name": "User",
              "snippet": "const User\u0026 u",
              "line": 443,
              "type": "parameter_declaration"
            },
            {
              "name": "u.getStatus",
              "snippet": "u.getStatus()",
              "line": 443,
              "type": "call_expression"
            },
            {
              "name": "std::string",
              "snippet": "std::string exportUsers() {\n        std::vector\u003cUser\u003e users = service_-\u003elistUsers();\n        std::string result = \"ID,Name,Email,Status\\n\";\n\n        for (const auto\u0026 user : users) {\n            result += std::to_string(user.getId()) + \",\" +\n                     user.getName() + \",\" +\n                     user.getEmail() + \",\" +\n                     statusToString(user.getStatus()) + \"\\n\";\n        }\n\n        return result;\n    }",
              "line": 448,
              "type": "function"
            },
            {
              "name": "std::vector\u003cUser\u003e",
              "snippet": "std::vector\u003cUser\u003e users = service_-\u003elistUsers();",
              "line": 449,
              "type": "declaration"
            },
            {
              "name": "service_-\u003elistUsers",
              "snippet": "service_-\u003elistUsers()",
              "line": 449,
              "type": "call_expression"
            },
            {
              "name": "std::string",
              "snippet": "std::string result = \"ID,Name,Email,Status\\n\";",
              "line": 450,
              "type": "declaration"
            },
            {
              "name": "std::to_string",
              "snippet": "std::to_string(user.getId())",
              "line": 453,
              "type": "call_expression"
            },
            {
              "name": "user.getId",
              "snippet": "user.getId()",
              "line": 453,
              "type": "call_expression"
            },
            {
              "name": "user.getName",
              "snippet": "user.getName()",
              "line": 454,
              "type": "call_expression"
            },
            {
              "name": "user.getEmail",
              "snippet": "user.getEmail()",
              "line": 455,
              "type": "call_expression"
            },
            {
              "name": "statusToString",
              "snippet": "statusToString(user.getStatus())",
              "line": 456,
              "type": "call_expression"
            },
            {
              "name": "user.getStatus",
              "snippet": "user.getStatus()",
              "line": 456,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.cpp",
          "start_line": 408,
          "end_line": 461
        },
        {
          "symbol_name": "std::unordered_map\u003cstd::string, int\u003e",
          "symbol_type": "function",
          "full_code": "    std::unordered_map\u003cstd::string, int\u003e getUserStats() {\n        std::vector\u003cUser\u003e users = service_-\u003elistUsers();\n        std::unordered_map\u003cstd::string, int\u003e stats;\n\n        stats[\"total\"] = static_cast\u003cint\u003e(users.size());\n        stats[\"active\"] = static_cast\u003cint\u003e(std::count_if(users.begin(), users.end(),\n                                                        [](const User\u0026 u) { return u.isActive(); }));\n        stats[\"inactive\"] = static_cast\u003cint\u003e(std::count_if(users.begin(), users.end(),\n                                                          [](const User\u0026 u) { return u.getStatus() == UserStatus::INACTIVE; }));\n        stats[\"suspended\"] = static_cast\u003cint\u003e(std::count_if(users.begin(), users.end(),\n                                                           [](const User\u0026 u) { return u.getStatus() == UserStatus::SUSPENDED; }));\n\n        return stats;\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "service_-\u003elistUsers",
              "snippet": "service_-\u003elistUsers()",
              "line": 434,
              "type": "call_expression"
            },
            {
              "name": "users.size",
              "snippet": "users.size()",
              "line": 437,
              "type": "call_expression"
            },
            {
              "name": "std::count_if",
              "snippet": "std::count_if(users.begin(), users.end(),\n                                                        [](const User\u0026 u) { return u.isActive(); })",
              "line": 438,
              "type": "call_expression"
            },
            {
              "name": "users.begin",
              "snippet": "users.begin()",
              "line": 438,
              "type": "call_expression"
            },
            {
              "name": "users.end",
              "snippet": "users.end()",
              "line": 438,
              "type": "call_expression"
            },
            {
              "name": "u.isActive",
              "snippet": "u.isActive()",
              "line": 439,
              "type": "call_expression"
            },
            {
              "name": "std::count_if",
              "snippet": "std::count_if(users.begin(), users.end(),\n                                                          [](const User\u0026 u) { return u.getStatus() == UserStatus::INACTIVE; })",
              "line": 440,
              "type": "call_expression"
            },
            {
              "name": "users.begin",
              "snippet": "users.begin()",
              "line": 440,
              "type": "call_expression"
            },
            {
              "name": "users.end",
              "snippet": "users.end()",
              "line": 440,
              "type": "call_expression"
            },
            {
              "name": "u.getStatus",
              "snippet": "u.getStatus()",
              "line": 441,
              "type": "call_expression"
            },
            {
              "name": "std::count_if",
              "snippet": "std::count_if(users.begin(), users.end(),\n                                                           [](const User\u0026 u) { return u.getStatus() == UserStatus::SUSPENDED; })",
              "line": 442,
              "type": "call_expression"
            },
            {
              "name": "users.begin",
              "snippet": "users.begin()",
              "line": 442,
              "type": "call_expression"
            },
            {
              "name": "users.end",
              "snippet": "users.end()",
              "line": 442,
              "type": "call_expression"
            },
            {
              "name": "u.getStatus",
              "snippet": "u.getStatus()",
              "line": 443,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.cpp",
          "start_line": 433,
          "end_line": 446
        },
        {
          "symbol_name": "std::unique_ptr\u003cUserService\u003e",
          "symbol_type": "function",
          "full_code": "std::unique_ptr\u003cUserService\u003e createUserService() {\n    auto repository = std::make_unique\u003cMemoryUserRepository\u003e();\n    return std::make_unique\u003cUserService\u003e(std::move(repository));\n}",
          "doc_comment": "// Factory functions",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "std::make_unique\u003cMemoryUserRepository\u003e",
              "snippet": "std::make_unique\u003cMemoryUserRepository\u003e()",
              "line": 465,
              "type": "call_expression"
            },
            {
              "name": "std::make_unique\u003cUserService\u003e",
              "snippet": "std::make_unique\u003cUserService\u003e(std::move(repository))",
              "line": 466,
              "type": "call_expression"
            },
            {
              "name": "std::move",
              "snippet": "std::move(repository)",
              "line": 466,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.cpp",
          "start_line": 464,
          "end_line": 467
        },
        {
          "symbol_name": "UserStatus",
          "symbol_type": "enum",
          "full_code": "enum class UserStatus {\n    ACTIVE,\n    INACTIVE,\n    SUSPENDED,\n    DELETED\n};",
          "doc_comment": "// Enums",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.cpp",
          "start_line": 27,
          "end_line": 32
        },
        {
          "symbol_name": "std::string",
          "symbol_type": "function",
          "full_code": "std::string statusToString(UserStatus status) {\n    switch (status) {\n        case UserStatus::ACTIVE: return \"ACTIVE\";\n        case UserStatus::INACTIVE: return \"INACTIVE\";\n        case UserStatus::SUSPENDED: return \"SUSPENDED\";\n        case UserStatus::DELETED: return \"DELETED\";\n        default: return \"UNKNOWN\";\n    }\n}",
          "doc_comment": "// Utility functions",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.cpp",
          "start_line": 61,
          "end_line": 69
        },
        {
          "symbol_name": "std::vector\u003cPermission\u003e",
          "symbol_type": "function",
          "full_code": "    const std::vector\u003cPermission\u003e\u0026 getPermissions() const { return permissions_; }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.cpp",
          "start_line": 130,
          "end_line": 130
        },
        {
          "symbol_name": "T",
          "symbol_type": "function",
          "full_code": "    virtual T save(const T\u0026 entity) = 0;",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.cpp",
          "start_line": 200,
          "end_line": 200
        },
        {
          "symbol_name": "UpdateUserRequest",
          "symbol_type": "struct",
          "full_code": "struct UpdateUserRequest {\n    std::optional\u003cstd::string\u003e name;\n    std::optional\u003cstd::string\u003e email;\n    std::optional\u003cUserStatus\u003e status;\n    std::optional\u003cstd::vector\u003cPermission\u003e\u003e permissions;\n};",
          "doc_comment": "// Update User Request struct",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "std::optional\u003cstd::string\u003e",
              "snippet": "std::optional\u003cstd::string\u003e name;",
              "line": 288,
              "type": "field_declaration"
            },
            {
              "name": "std::optional\u003cstd::string\u003e",
              "snippet": "std::optional\u003cstd::string\u003e email;",
              "line": 289,
              "type": "field_declaration"
            },
            {
              "name": "std::optional\u003cUserStatus\u003e",
              "snippet": "std::optional\u003cUserStatus\u003e status;",
              "line": 290,
              "type": "field_declaration"
            },
            {
              "name": "std::optional\u003cstd::vector\u003cPermission\u003e\u003e",
              "snippet": "std::optional\u003cstd::vector\u003cPermission\u003e\u003e permissions;",
              "line": 291,
              "type": "field_declaration"
            }
          ],
          "file_path": "test/example.cpp",
          "start_line": 287,
          "end_line": 292
        },
        {
          "symbol_name": "User",
          "symbol_type": "class",
          "full_code": "class User;",
          "doc_comment": "// Forward declarations",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.cpp",
          "start_line": 22,
          "end_line": 22
        },
        {
          "symbol_name": "UserService",
          "symbol_type": "class",
          "full_code": "class UserService;",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.cpp",
          "start_line": 24,
          "end_line": 24
        },
        {
          "symbol_name": "Permission",
          "symbol_type": "enum",
          "full_code": "enum class Permission {\n    READ,\n    WRITE,\n    DELETE,\n    ADMIN\n};",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.cpp",
          "start_line": 34,
          "end_line": 39
        },
        {
          "symbol_name": "ValidationException",
          "symbol_type": "class",
          "full_code": "class ValidationException : public std::runtime_error {\npublic:\n    explicit ValidationException(const std::string\u0026 message) \n        : std::runtime_error(\"Validation error: \" + message) {}\n};",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "std::string",
              "snippet": "const std::string\u0026 message",
              "line": 50,
              "type": "parameter_declaration"
            }
          ],
          "file_path": "test/example.cpp",
          "start_line": 48,
          "end_line": 52
        },
        {
          "symbol_name": "User",
          "symbol_type": "function",
          "full_code": "    User\u0026 operator=(const User\u0026 other) = default;",
          "doc_comment": "// Assignment operators",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.cpp",
          "start_line": 117,
          "end_line": 117
        },
        {
          "symbol_name": "std::optional\u003cT\u003e",
          "symbol_type": "function",
          "full_code": "    virtual std::optional\u003cT\u003e findById(K id) = 0;",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.cpp",
          "start_line": 199,
          "end_line": 199
        },
        {
          "symbol_name": "std::vector\u003cT\u003e",
          "symbol_type": "function",
          "full_code": "    virtual std::vector\u003cT\u003e findAll() = 0;",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.cpp",
          "start_line": 202,
          "end_line": 202
        },
        {
          "symbol_name": "std::optional\u003cUser\u003e",
          "symbol_type": "function",
          "full_code": "    virtual std::optional\u003cUser\u003e findByEmail(const std::string\u0026 email) = 0;",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.cpp",
          "start_line": 208,
          "end_line": 208
        },
        {
          "symbol_name": "UserNotFoundException",
          "symbol_type": "class",
          "full_code": "class UserNotFoundException : public std::runtime_error {\npublic:\n    explicit UserNotFoundException(int id) \n        : std::runtime_error(\"User with ID \" + std::to_string(id) + \" not found\") {}\n};",
          "doc_comment": "// Exception classes",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "id",
              "snippet": "int id",
              "line": 44,
              "type": "parameter_declaration"
            },
            {
              "name": "std::to_string",
              "snippet": "std::to_string(id)",
              "line": 45,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.cpp",
          "start_line": 42,
          "end_line": 46
        },
        {
          "symbol_name": "DuplicateEmailException",
          "symbol_type": "class",
          "full_code": "class DuplicateEmailException : public std::runtime_error {\npublic:\n    explicit DuplicateEmailException(const std::string\u0026 email) \n        : std::runtime_error(\"User with email \" + email + \" already exists\") {}\n};",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "std::string",
              "snippet": "const std::string\u0026 email",
              "line": 56,
              "type": "parameter_declaration"
            }
          ],
          "file_path": "test/example.cpp",
          "start_line": 54,
          "end_line": 58
        },
        {
          "symbol_name": "UserStatus",
          "symbol_type": "function",
          "full_code": "UserStatus stringToStatus(const std::string\u0026 status) {\n    if (status == \"ACTIVE\") return UserStatus::ACTIVE;\n    if (status == \"INACTIVE\") return UserStatus::INACTIVE;\n    if (status == \"SUSPENDED\") return UserStatus::SUSPENDED;\n    if (status == \"DELETED\") return UserStatus::DELETED;\n    throw std::invalid_argument(\"Unknown status: \" + status);\n}",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "std::invalid_argument",
              "snippet": "std::invalid_argument(\"Unknown status: \" + status)",
              "line": 76,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.cpp",
          "start_line": 71,
          "end_line": 77
        },
        {
          "symbol_name": "std::unordered_map\u003cstd::string, std::string\u003e",
          "symbol_type": "function",
          "full_code": "    const std::unordered_map\u003cstd::string, std::string\u003e\u0026 getMetadata() const { return metadata_; }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.cpp",
          "start_line": 131,
          "end_line": 131
        },
        {
          "symbol_name": "Repository",
          "symbol_type": "class",
          "full_code": "class Repository {\npublic:\n    virtual ~Repository() = default;\n    virtual std::optional\u003cT\u003e findById(K id) = 0;\n    virtual T save(const T\u0026 entity) = 0;\n    virtual bool deleteById(K id) = 0;\n    virtual std::vector\u003cT\u003e findAll() = 0;\n};",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "std::optional\u003cT\u003e",
              "snippet": "virtual std::optional\u003cT\u003e findById(K id) = 0;",
              "line": 199,
              "type": "function"
            },
            {
              "name": "K",
              "snippet": "K id",
              "line": 199,
              "type": "parameter_declaration"
            },
            {
              "name": "T",
              "snippet": "virtual T save(const T\u0026 entity) = 0;",
              "line": 200,
              "type": "function"
            },
            {
              "name": "T",
              "snippet": "const T\u0026 entity",
              "line": 200,
              "type": "parameter_declaration"
            },
            {
              "name": "K",
              "snippet": "K id",
              "line": 201,
              "type": "parameter_declaration"
            },
            {
              "name": "std::vector\u003cT\u003e",
              "snippet": "virtual std::vector\u003cT\u003e findAll() = 0;",
              "line": 202,
              "type": "function"
            }
          ],
          "file_path": "test/example.cpp",
          "start_line": 196,
          "end_line": 203
        },
        {
          "symbol_name": "std::vector\u003cUser\u003e",
          "symbol_type": "function",
          "full_code": "    virtual std::vector\u003cUser\u003e findByStatus(UserStatus status) = 0;",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.cpp",
          "start_line": 209,
          "end_line": 209
        }
      ],
      "related_files": []
    },
    {
      "file_path": "test/example.css",
      "change_type": "Added",
      "diff_hunk": "@@ -0,0 +1,1217 @@\n+ gi/**\n+ * User Management System - CSS Styles\n+ * Comprehensive example showcasing various CSS features\n+ */\n+\n+/* CSS Variables / Custom Properties */\n+:root {\n+    /* Color Palette */\n+    --primary-color: #3b82f6;\n+    --primary-dark: #1d4ed8;\n+    --primary-light: #93c5fd;\n+    --secondary-color: #64748b;\n+    --accent-color: #10b981;\n+    --danger-color: #ef4444;\n+    --warning-color: #f59e0b;\n+    --success-color: #22c55e;\n+    \n+    /* Neutral Colors */\n+    --white: #ffffff;\n+    --gray-50: #f8fafc;\n+    --gray-100: #f1f5f9;\n+    --gray-200: #e2e8f0;\n+    --gray-300: #cbd5e1;\n+    --gray-400: #94a3b8;\n+    --gray-500: #64748b;\n+    --gray-600: #475569;\n+    --gray-700: #334155;\n+    --gray-800: #1e293b;\n+    --gray-900: #0f172a;\n+    --black: #000000;\n+    \n+    /* Typography */\n+    --font-family-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n+    --font-family-mono: 'Fira Code', Consolas, 'Liberation Mono', Menlo, Courier, monospace;\n+    \n+    /* Font Sizes */\n+    --text-xs: 0.75rem;    /* 12px */\n+    --text-sm: 0.875rem;   /* 14px */\n+    --text-base: 1rem;     /* 16px */\n+    --text-lg: 1.125rem;   /* 18px */\n+    --text-xl: 1.25rem;    /* 20px */\n+    --text-2xl: 1.5rem;    /* 24px */\n+    --text-3xl: 1.875rem;  /* 30px */\n+    --text-4xl: 2.25rem;   /* 36px */\n+    \n+    /* Spacing */\n+    --spacing-1: 0.25rem;  /* 4px */\n+    --spacing-2: 0.5rem;   /* 8px */\n+    --spacing-3: 0.75rem;  /* 12px */\n+    --spacing-4: 1rem;     /* 16px */\n+    --spacing-5: 1.25rem;  /* 20px */\n+    --spacing-6: 1.5rem;   /* 24px */\n+    --spacing-8: 2rem;     /* 32px */\n+    --spacing-10: 2.5rem;  /* 40px */\n+    --spacing-12: 3rem;    /* 48px */\n+    --spacing-16: 4rem;    /* 64px */\n+    \n+    /* Shadows */\n+    --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n+    --shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);\n+    --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\n+    --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n+    --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);\n+    \n+    /* Border Radius */\n+    --radius-sm: 0.125rem;  /* 2px */\n+    --radius: 0.25rem;      /* 4px */\n+    --radius-md: 0.375rem;  /* 6px */\n+    --radius-lg: 0.5rem;    /* 8px */\n+    --radius-xl: 0.75rem;   /* 12px */\n+    --radius-2xl: 1rem;     /* 16px */\n+    --radius-full: 9999px;\n+    \n+    /* Transitions */\n+    --transition-fast: 150ms ease-in-out;\n+    --transition-base: 200ms ease-in-out;\n+    --transition-slow: 300ms ease-in-out;\n+    \n+    /* Z-Index Scale */\n+    --z-dropdown: 1000;\n+    --z-sticky: 1020;\n+    --z-fixed: 1030;\n+    --z-modal-backdrop: 1040;\n+    --z-modal: 1050;\n+    --z-popover: 1060;\n+    --z-tooltip: 1070;\n+    --z-toast: 1080;\n+}\n+\n+/* Reset and Base Styles */\n+*,\n+*::before,\n+*::after {\n+    box-sizing: border-box;\n+    margin: 0;\n+    padding: 0;\n+}\n+\n+html {\n+    scroll-behavior: smooth;\n+    -webkit-text-size-adjust: 100%;\n+    -moz-text-size-adjust: 100%;\n+    text-size-adjust: 100%;\n+}\n+\n+body {\n+    font-family: var(--font-family-sans);\n+    font-size: var(--text-base);\n+    line-height: 1.6;\n+    color: var(--gray-900);\n+    background-color: var(--gray-50);\n+    overflow-x: hidden;\n+    min-height: 100vh;\n+    display: flex;\n+    flex-direction: column;\n+}\n+\n+/* Typography */\n+h1, h2, h3, h4, h5, h6 {\n+    font-weight: 600;\n+    line-height: 1.25;\n+    margin-bottom: var(--spacing-4);\n+    color: var(--gray-900);\n+}\n+\n+h1 { font-size: var(--text-4xl); }\n+h2 { font-size: var(--text-3xl); }\n+h3 { font-size: var(--text-2xl); }\n+h4 { font-size: var(--text-xl); }\n+h5 { font-size: var(--text-lg); }\n+h6 { font-size: var(--text-base); }\n+\n+p {\n+    margin-bottom: var(--spacing-4);\n+}\n+\n+a {\n+    color: var(--primary-color);\n+    text-decoration: none;\n+    transition: color var(--transition-fast);\n+}\n+\n+a:hover,\n+a:focus {\n+    color: var(--primary-dark);\n+    text-decoration: underline;\n+}\n+\n+/* Lists */\n+ul, ol {\n+    margin-bottom: var(--spacing-4);\n+    padding-left: var(--spacing-6);\n+}\n+\n+li {\n+    margin-bottom: var(--spacing-1);\n+}\n+\n+/* Images */\n+img {\n+    max-width: 100%;\n+    height: auto;\n+    display: block;\n+}\n+\n+/* Container */\n+.container {\n+    max-width: 1200px;\n+    margin: 0 auto;\n+    padding: 0 var(--spacing-4);\n+}\n+\n+@media (min-width: 640px) {\n+    .container {\n+        padding: 0 var(--spacing-6);\n+    }\n+}\n+\n+@media (min-width: 1024px) {\n+    .container {\n+        padding: 0 var(--spacing-8);\n+    }\n+}\n+\n+/* Header Styles */\n+.main-header {\n+    background-color: var(--white);\n+    box-shadow: var(--shadow-sm);\n+    position: sticky;\n+    top: 0;\n+    z-index: var(--z-sticky);\n+}\n+\n+.navbar {\n+    padding: var(--spacing-4) 0;\n+}\n+\n+.nav-container {\n+    display: flex;\n+    justify-content: space-between;\n+    align-items: center;\n+}\n+\n+.nav-logo {\n+    font-size: var(--text-2xl);\n+    font-weight: 700;\n+    color: var(--primary-color);\n+    text-decoration: none;\n+}\n+\n+.nav-logo:hover {\n+    color: var(--primary-dark);\n+    text-decoration: none;\n+}\n+\n+.nav-menu {\n+    display: none;\n+    list-style: none;\n+    margin: 0;\n+    padding: 0;\n+    gap: var(--spacing-6);\n+}\n+\n+@media (min-width: 768px) {\n+    .nav-menu {\n+        display: flex;\n+    }\n+}\n+\n+.nav-item {\n+    margin: 0;\n+}\n+\n+.nav-link {\n+    font-weight: 500;\n+    color: var(--gray-700);\n+    padding: var(--spacing-2) var(--spacing-3);\n+    border-radius: var(--radius);\n+    transition: all var(--transition-fast);\n+}\n+\n+.nav-link:hover,\n+.nav-link:focus {\n+    color: var(--primary-color);\n+    background-color: var(--primary-light);\n+    text-decoration: none;\n+}\n+\n+.nav-link.logout-btn {\n+    color: var(--danger-color);\n+}\n+\n+.nav-link.logout-btn:hover {\n+    color: var(--white);\n+    background-color: var(--danger-color);\n+}\n+\n+/* Hamburger Menu */\n+.hamburger {\n+    display: flex;\n+    flex-direction: column;\n+    gap: var(--spacing-1);\n+    cursor: pointer;\n+    padding: var(--spacing-2);\n+    border-radius: var(--radius);\n+    transition: background-color var(--transition-fast);\n+}\n+\n+@media (min-width: 768px) {\n+    .hamburger {\n+        display: none;\n+    }\n+}\n+\n+.hamburger:hover {\n+    background-color: var(--gray-100);\n+}\n+\n+.bar {\n+    width: 20px;\n+    height: 2px;\n+    background-color: var(--gray-700);\n+    transition: all var(--transition-base);\n+}\n+\n+.hamburger.active .bar:nth-child(1) {\n+    transform: rotate(45deg) translate(5px, 5px);\n+}\n+\n+.hamburger.active .bar:nth-child(2) {\n+    opacity: 0;\n+}\n+\n+.hamburger.active .bar:nth-child(3) {\n+    transform: rotate(-45deg) translate(7px, -6px);\n+}\n+\n+/* Main Content */\n+.main-content {\n+    flex: 1;\n+    padding: var(--spacing-8) 0;\n+}\n+\n+.page-title {\n+    color: var(--gray-900);\n+    margin-bottom: var(--spacing-6);\n+}\n+\n+/* Dashboard Section */\n+.dashboard-section {\n+    margin-bottom: var(--spacing-12);\n+}\n+\n+.stats-grid {\n+    display: grid;\n+    grid-template-columns: 1fr;\n+    gap: var(--spacing-6);\n+    margin-bottom: var(--spacing-8);\n+}\n+\n+@media (min-width: 640px) {\n+    .stats-grid {\n+        grid-template-columns: repeat(2, 1fr);\n+    }\n+}\n+\n+@media (min-width: 1024px) {\n+    .stats-grid {\n+        grid-template-columns: repeat(3, 1fr);\n+    }\n+}\n+\n+.stat-card {\n+    background-color: var(--white);\n+    padding: var(--spacing-6);\n+    border-radius: var(--radius-xl);\n+    box-shadow: var(--shadow);\n+    transition: all var(--transition-base);\n+}\n+\n+.stat-card:hover {\n+    transform: translateY(-2px);\n+    box-shadow: var(--shadow-lg);\n+}\n+\n+.stat-title {\n+    font-size: var(--text-sm);\n+    font-weight: 500;\n+    color: var(--gray-600);\n+    margin-bottom: var(--spacing-2);\n+}\n+\n+.stat-number {\n+    font-size: var(--text-3xl);\n+    font-weight: 700;\n+    color: var(--gray-900);\n+    margin-bottom: var(--spacing-2);\n+}\n+\n+.stat-change {\n+    font-size: var(--text-sm);\n+    font-weight: 500;\n+    margin: 0;\n+}\n+\n+.stat-change.positive {\n+    color: var(--success-color);\n+}\n+\n+.stat-change.negative {\n+    color: var(--danger-color);\n+}\n+\n+.stat-change.neutral {\n+    color: var(--gray-500);\n+}\n+\n+/* Chart Container */\n+.chart-container {\n+    background-color: var(--white);\n+    padding: var(--spacing-6);\n+    border-radius: var(--radius-xl);\n+    box-shadow: var(--shadow);\n+}\n+\n+.chart-title {\n+    margin-bottom: var(--spacing-4);\n+    color: var(--gray-900);\n+}\n+\n+/* Users Section */\n+.users-section {\n+    margin-bottom: var(--spacing-12);\n+}\n+\n+.section-header {\n+    display: flex;\n+    justify-content: space-between;\n+    align-items: center;\n+    margin-bottom: var(--spacing-6);\n+    flex-wrap: wrap;\n+    gap: var(--spacing-4);\n+}\n+\n+/* Filters */\n+.filters-container {\n+    display: flex;\n+    flex-direction: column;\n+    gap: var(--spacing-4);\n+    margin-bottom: var(--spacing-6);\n+    background-color: var(--white);\n+    padding: var(--spacing-4);\n+    border-radius: var(--radius-lg);\n+    box-shadow: var(--shadow-sm);\n+}\n+\n+@media (min-width: 768px) {\n+    .filters-container {\n+        flex-direction: row;\n+        justify-content: space-between;\n+        align-items: center;\n+    }\n+}\n+\n+.search-box {\n+    position: relative;\n+    flex: 1;\n+    max-width: 400px;\n+}\n+\n+.search-input {\n+    width: 100%;\n+    padding: var(--spacing-3) var(--spacing-10) var(--spacing-3) var(--spacing-4);\n+    border: 1px solid var(--gray-300);\n+    border-radius: var(--radius-lg);\n+    font-size: var(--text-base);\n+    transition: all var(--transition-fast);\n+}\n+\n+.search-input:focus {\n+    outline: none;\n+    border-color: var(--primary-color);\n+    box-shadow: 0 0 0 3px rgb(59 130 246 / 0.1);\n+}\n+\n+.search-btn {\n+    position: absolute;\n+    right: var(--spacing-2);\n+    top: 50%;\n+    transform: translateY(-50%);\n+    background: none;\n+    border: none;\n+    color: var(--gray-400);\n+    cursor: pointer;\n+    padding: var(--spacing-2);\n+    border-radius: var(--radius);\n+    transition: color var(--transition-fast);\n+}\n+\n+.search-btn:hover {\n+    color: var(--primary-color);\n+}\n+\n+.filter-controls {\n+    display: flex;\n+    gap: var(--spacing-3);\n+    flex-wrap: wrap;\n+}\n+\n+.filter-select {\n+    padding: var(--spacing-2) var(--spacing-3);\n+    border: 1px solid var(--gray-300);\n+    border-radius: var(--radius);\n+    font-size: var(--text-sm);\n+    background-color: var(--white);\n+    cursor: pointer;\n+    transition: border-color var(--transition-fast);\n+}\n+\n+.filter-select:focus {\n+    outline: none;\n+    border-color: var(--primary-color);\n+}\n+\n+/* Table Styles */\n+.table-container {\n+    background-color: var(--white);\n+    border-radius: var(--radius-xl);\n+    overflow: hidden;\n+    box-shadow: var(--shadow);\n+    margin-bottom: var(--spacing-6);\n+}\n+\n+.users-table {\n+    width: 100%;\n+    border-collapse: collapse;\n+}\n+\n+.users-table th,\n+.users-table td {\n+    padding: var(--spacing-4);\n+    text-align: left;\n+    border-bottom: 1px solid var(--gray-200);\n+}\n+\n+.users-table th {\n+    background-color: var(--gray-50);\n+    font-weight: 600;\n+    font-size: var(--text-sm);\n+    color: var(--gray-700);\n+    position: sticky;\n+    top: 0;\n+    z-index: 10;\n+}\n+\n+.users-table tbody tr {\n+    transition: background-color var(--transition-fast);\n+}\n+\n+.users-table tbody tr:hover {\n+    background-color: var(--gray-50);\n+}\n+\n+.sortable {\n+    cursor: pointer;\n+    user-select: none;\n+    position: relative;\n+}\n+\n+.sortable:hover {\n+    background-color: var(--gray-100);\n+}\n+\n+.sort-icon {\n+    margin-left: var(--spacing-1);\n+    opacity: 0.5;\n+    transition: opacity var(--transition-fast);\n+}\n+\n+.sortable:hover .sort-icon {\n+    opacity: 1;\n+}\n+\n+.user-info {\n+    display: flex;\n+    align-items: center;\n+    gap: var(--spacing-3);\n+}\n+\n+.user-avatar {\n+    width: 32px;\n+    height: 32px;\n+    border-radius: var(--radius-full);\n+    object-fit: cover;\n+}\n+\n+.status-badge {\n+    padding: var(--spacing-1) var(--spacing-3);\n+    border-radius: var(--radius-full);\n+    font-size: var(--text-xs);\n+    font-weight: 500;\n+    text-transform: uppercase;\n+    letter-spacing: 0.05em;\n+}\n+\n+.status-badge.active {\n+    background-color: rgb(34 197 94 / 0.1);\n+    color: var(--success-color);\n+}\n+\n+.status-badge.inactive {\n+    background-color: rgb(107 114 128 / 0.1);\n+    color: var(--gray-500);\n+}\n+\n+.status-badge.suspended {\n+    background-color: rgb(245 158 11 / 0.1);\n+    color: var(--warning-color);\n+}\n+\n+.user-actions {\n+    display: flex;\n+    gap: var(--spacing-2);\n+}\n+\n+/* Buttons */\n+.btn {\n+    display: inline-flex;\n+    align-items: center;\n+    gap: var(--spacing-2);\n+    padding: var(--spacing-2) var(--spacing-4);\n+    border: none;\n+    border-radius: var(--radius-lg);\n+    font-size: var(--text-sm);\n+    font-weight: 500;\n+    cursor: pointer;\n+    transition: all var(--transition-fast);\n+    text-decoration: none;\n+    user-select: none;\n+}\n+\n+.btn:focus {\n+    outline: none;\n+    box-shadow: 0 0 0 3px rgb(59 130 246 / 0.1);\n+}\n+\n+.btn-primary {\n+    background-color: var(--primary-color);\n+    color: var(--white);\n+}\n+\n+.btn-primary:hover:not(:disabled) {\n+    background-color: var(--primary-dark);\n+    color: var(--white);\n+    text-decoration: none;\n+}\n+\n+.btn-secondary {\n+    background-color: var(--gray-200);\n+    color: var(--gray-700);\n+}\n+\n+.btn-secondary:hover:not(:disabled) {\n+    background-color: var(--gray-300);\n+    color: var(--gray-800);\n+    text-decoration: none;\n+}\n+\n+.btn-icon {\n+    width: 32px;\n+    height: 32px;\n+    padding: 0;\n+    display: flex;\n+    align-items: center;\n+    justify-content: center;\n+    border: none;\n+    border-radius: var(--radius);\n+    background-color: transparent;\n+    color: var(--gray-500);\n+    cursor: pointer;\n+    transition: all var(--transition-fast);\n+}\n+\n+.btn-icon:hover {\n+    background-color: var(--gray-100);\n+    color: var(--gray-700);\n+}\n+\n+.btn-icon.edit-btn:hover {\n+    background-color: rgb(59 130 246 / 0.1);\n+    color: var(--primary-color);\n+}\n+\n+.btn-icon.delete-btn:hover {\n+    background-color: rgb(239 68 68 / 0.1);\n+    color: var(--danger-color);\n+}\n+\n+.btn:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+}\n+\n+/* Pagination */\n+.pagination-container {\n+    display: flex;\n+    justify-content: between;\n+    align-items: center;\n+    padding: var(--spacing-4) var(--spacing-6);\n+    background-color: var(--white);\n+    border-radius: var(--radius-xl);\n+    box-shadow: var(--shadow-sm);\n+    flex-wrap: wrap;\n+    gap: var(--spacing-4);\n+}\n+\n+.pagination-info {\n+    color: var(--gray-600);\n+    font-size: var(--text-sm);\n+}\n+\n+.pagination {\n+    display: flex;\n+    gap: var(--spacing-1);\n+    align-items: center;\n+}\n+\n+.pagination-btn {\n+    padding: var(--spacing-2) var(--spacing-3);\n+    border: 1px solid var(--gray-300);\n+    background-color: var(--white);\n+    color: var(--gray-700);\n+    border-radius: var(--radius);\n+    cursor: pointer;\n+    transition: all var(--transition-fast);\n+    font-size: var(--text-sm);\n+    text-decoration: none;\n+}\n+\n+.pagination-btn:hover:not(:disabled) {\n+    background-color: var(--gray-50);\n+    border-color: var(--gray-400);\n+    text-decoration: none;\n+}\n+\n+.pagination-btn.active {\n+    background-color: var(--primary-color);\n+    border-color: var(--primary-color);\n+    color: var(--white);\n+}\n+\n+.pagination-btn:disabled {\n+    opacity: 0.5;\n+    cursor: not-allowed;\n+}\n+\n+.pagination-dots {\n+    color: var(--gray-400);\n+    padding: 0 var(--spacing-2);\n+}\n+\n+/* Modal Styles */\n+.modal {\n+    position: fixed;\n+    top: 0;\n+    left: 0;\n+    width: 100%;\n+    height: 100%;\n+    z-index: var(--z-modal);\n+    display: none;\n+    align-items: center;\n+    justify-content: center;\n+    padding: var(--spacing-4);\n+}\n+\n+.modal.active {\n+    display: flex;\n+}\n+\n+.modal-overlay {\n+    position: absolute;\n+    top: 0;\n+    left: 0;\n+    width: 100%;\n+    height: 100%;\n+    background-color: rgb(0 0 0 / 0.5);\n+    backdrop-filter: blur(4px);\n+    z-index: var(--z-modal-backdrop);\n+}\n+\n+.modal-container {\n+    position: relative;\n+    background-color: var(--white);\n+    border-radius: var(--radius-2xl);\n+    box-shadow: var(--shadow-xl);\n+    max-width: 500px;\n+    width: 100%;\n+    max-height: 90vh;\n+    overflow-y: auto;\n+    z-index: var(--z-modal);\n+    animation: modalEnter 200ms ease-out;\n+}\n+\n+@keyframes modalEnter {\n+    from {\n+        opacity: 0;\n+        transform: scale(0.95) translateY(-10px);\n+    }\n+    to {\n+        opacity: 1;\n+        transform: scale(1) translateY(0);\n+    }\n+}\n+\n+.modal-header {\n+    display: flex;\n+    justify-content: space-between;\n+    align-items: center;\n+    padding: var(--spacing-6);\n+    border-bottom: 1px solid var(--gray-200);\n+}\n+\n+.modal-title {\n+    margin: 0;\n+    font-size: var(--text-xl);\n+    color: var(--gray-900);\n+}\n+\n+.modal-close {\n+    background: none;\n+    border: none;\n+    color: var(--gray-400);\n+    cursor: pointer;\n+    padding: var(--spacing-2);\n+    border-radius: var(--radius);\n+    transition: all var(--transition-fast);\n+}\n+\n+.modal-close:hover {\n+    background-color: var(--gray-100);\n+    color: var(--gray-600);\n+}\n+\n+.modal-body {\n+    padding: var(--spacing-6);\n+}\n+\n+.modal-footer {\n+    display: flex;\n+    justify-content: flex-end;\n+    gap: var(--spacing-3);\n+    padding: var(--spacing-6);\n+    border-top: 1px solid var(--gray-200);\n+}\n+\n+/* Form Styles */\n+.user-form {\n+    display: flex;\n+    flex-direction: column;\n+    gap: var(--spacing-4);\n+}\n+\n+.form-group {\n+    display: flex;\n+    flex-direction: column;\n+    gap: var(--spacing-2);\n+}\n+\n+.form-label {\n+    font-weight: 500;\n+    color: var(--gray-700);\n+    font-size: var(--text-sm);\n+}\n+\n+.form-label.required::after {\n+    content: ' *';\n+    color: var(--danger-color);\n+}\n+\n+.form-input,\n+.form-select {\n+    padding: var(--spacing-3);\n+    border: 1px solid var(--gray-300);\n+    border-radius: var(--radius-lg);\n+    font-size: var(--text-base);\n+    transition: all var(--transition-fast);\n+}\n+\n+.form-input:focus,\n+.form-select:focus {\n+    outline: none;\n+    border-color: var(--primary-color);\n+    box-shadow: 0 0 0 3px rgb(59 130 246 / 0.1);\n+}\n+\n+.form-input::placeholder {\n+    color: var(--gray-400);\n+}\n+\n+.form-error {\n+    color: var(--danger-color);\n+    font-size: var(--text-sm);\n+    display: none;\n+}\n+\n+.form-error.visible {\n+    display: block;\n+}\n+\n+.radio-group,\n+.checkbox-group {\n+    display: flex;\n+    flex-direction: column;\n+    gap: var(--spacing-2);\n+}\n+\n+@media (min-width: 640px) {\n+    .radio-group,\n+    .checkbox-group {\n+        flex-direction: row;\n+        gap: var(--spacing-4);\n+    }\n+}\n+\n+.radio-label,\n+.checkbox-label {\n+    display: flex;\n+    align-items: center;\n+    gap: var(--spacing-2);\n+    cursor: pointer;\n+    font-size: var(--text-sm);\n+    color: var(--gray-700);\n+}\n+\n+.radio-custom,\n+.checkbox-custom {\n+    width: 16px;\n+    height: 16px;\n+    border: 2px solid var(--gray-300);\n+    background-color: var(--white);\n+    transition: all var(--transition-fast);\n+    position: relative;\n+}\n+\n+.radio-custom {\n+    border-radius: var(--radius-full);\n+}\n+\n+.checkbox-custom {\n+    border-radius: var(--radius-sm);\n+}\n+\n+input[type=\"radio\"]:checked + .radio-custom {\n+    border-color: var(--primary-color);\n+    background-color: var(--primary-color);\n+}\n+\n+input[type=\"radio\"]:checked + .radio-custom::after {\n+    content: '';\n+    position: absolute;\n+    top: 50%;\n+    left: 50%;\n+    transform: translate(-50%, -50%);\n+    width: 6px;\n+    height: 6px;\n+    border-radius: var(--radius-full);\n+    background-color: var(--white);\n+}\n+\n+input[type=\"checkbox\"]:checked + .checkbox-custom {\n+    border-color: var(--primary-color);\n+    background-color: var(--primary-color);\n+}\n+\n+input[type=\"checkbox\"]:checked + .checkbox-custom::after {\n+    content: '✓';\n+    position: absolute;\n+    top: 50%;\n+    left: 50%;\n+    transform: translate(-50%, -50%);\n+    color: var(--white);\n+    font-size: 10px;\n+    font-weight: bold;\n+}\n+\n+input[type=\"radio\"],\n+input[type=\"checkbox\"] {\n+    position: absolute;\n+    opacity: 0;\n+    pointer-events: none;\n+}\n+\n+/* Footer */\n+.main-footer {\n+    background-color: var(--gray-900);\n+    color: var(--gray-300);\n+    padding: var(--spacing-12) 0 var(--spacing-6);\n+    margin-top: auto;\n+}\n+\n+.footer-content {\n+    display: grid;\n+    grid-template-columns: 1fr;\n+    gap: var(--spacing-8);\n+    margin-bottom: var(--spacing-8);\n+}\n+\n+@media (min-width: 768px) {\n+    .footer-content {\n+        grid-template-columns: repeat(3, 1fr);\n+    }\n+}\n+\n+.footer-title {\n+    color: var(--white);\n+    margin-bottom: var(--spacing-4);\n+}\n+\n+.footer-subtitle {\n+    color: var(--white);\n+    font-size: var(--text-base);\n+    margin-bottom: var(--spacing-3);\n+}\n+\n+.footer-text {\n+    margin-bottom: var(--spacing-3);\n+}\n+\n+.footer-links {\n+    list-style: none;\n+    margin: 0;\n+    padding: 0;\n+}\n+\n+.footer-links li {\n+    margin-bottom: var(--spacing-2);\n+}\n+\n+.footer-links a {\n+    color: var(--gray-300);\n+    transition: color var(--transition-fast);\n+}\n+\n+.footer-links a:hover {\n+    color: var(--white);\n+}\n+\n+.footer-address {\n+    font-style: normal;\n+}\n+\n+.footer-address a {\n+    color: var(--gray-300);\n+}\n+\n+.footer-address a:hover {\n+    color: var(--white);\n+}\n+\n+.footer-bottom {\n+    border-top: 1px solid var(--gray-700);\n+    padding-top: var(--spacing-6);\n+    text-align: center;\n+}\n+\n+.copyright {\n+    margin: 0;\n+    color: var(--gray-400);\n+    font-size: var(--text-sm);\n+}\n+\n+/* Toast Notifications */\n+.toast-container {\n+    position: fixed;\n+    top: var(--spacing-4);\n+    right: var(--spacing-4);\n+    z-index: var(--z-toast);\n+    max-width: 350px;\n+    width: 100%;\n+}\n+\n+.toast {\n+    background-color: var(--white);\n+    border-radius: var(--radius-lg);\n+    box-shadow: var(--shadow-lg);\n+    padding: var(--spacing-4);\n+    margin-bottom: var(--spacing-3);\n+    animation: toastEnter 300ms ease-out;\n+    border-left: 4px solid var(--primary-color);\n+}\n+\n+@keyframes toastEnter {\n+    from {\n+        opacity: 0;\n+        transform: translateX(100%);\n+    }\n+    to {\n+        opacity: 1;\n+        transform: translateX(0);\n+    }\n+}\n+\n+.toast.success {\n+    border-left-color: var(--success-color);\n+}\n+\n+.toast.error {\n+    border-left-color: var(--danger-color);\n+}\n+\n+.toast.warning {\n+    border-left-color: var(--warning-color);\n+}\n+\n+/* Loading Spinner */\n+.loading-overlay {\n+    position: fixed;\n+    top: 0;\n+    left: 0;\n+    width: 100%;\n+    height: 100%;\n+    background-color: rgb(255 255 255 / 0.8);\n+    backdrop-filter: blur(2px);\n+    display: none;\n+    align-items: center;\n+    justify-content: center;\n+    z-index: var(--z-modal);\n+}\n+\n+.loading-overlay.active {\n+    display: flex;\n+}\n+\n+.spinner {\n+    text-align: center;\n+}\n+\n+.spinner-circle {\n+    width: 40px;\n+    height: 40px;\n+    border: 3px solid var(--gray-200);\n+    border-top: 3px solid var(--primary-color);\n+    border-radius: var(--radius-full);\n+    margin: 0 auto var(--spacing-3);\n+    animation: spin 1s linear infinite;\n+}\n+\n+@keyframes spin {\n+    0% { transform: rotate(0deg); }\n+    100% { transform: rotate(360deg); }\n+}\n+\n+.spinner-text {\n+    color: var(--gray-600);\n+    font-size: var(--text-sm);\n+    margin: 0;\n+}\n+\n+/* Utility Classes */\n+.sr-only {\n+    position: absolute;\n+    width: 1px;\n+    height: 1px;\n+    padding: 0;\n+    margin: -1px;\n+    overflow: hidden;\n+    clip: rect(0, 0, 0, 0);\n+    white-space: nowrap;\n+    border: 0;\n+}\n+\n+.text-center { text-align: center; }\n+.text-left { text-align: left; }\n+.text-right { text-align: right; }\n+\n+.hidden { display: none; }\n+.block { display: block; }\n+.flex { display: flex; }\n+.inline-flex { display: inline-flex; }\n+.grid { display: grid; }\n+\n+.justify-center { justify-content: center; }\n+.justify-between { justify-content: space-between; }\n+.items-center { align-items: center; }\n+\n+.w-full { width: 100%; }\n+.h-full { height: 100%; }\n+\n+.mt-4 { margin-top: var(--spacing-4); }\n+.mb-4 { margin-bottom: var(--spacing-4); }\n+.ml-4 { margin-left: var(--spacing-4); }\n+.mr-4 { margin-right: var(--spacing-4); }\n+\n+.p-4 { padding: var(--spacing-4); }\n+.px-4 { padding-left: var(--spacing-4); padding-right: var(--spacing-4); }\n+.py-4 { padding-top: var(--spacing-4); padding-bottom: var(--spacing-4); }\n+\n+/* Responsive Utilities */\n+@media (max-width: 767px) {\n+    .mobile-hidden { display: none; }\n+}\n+\n+@media (min-width: 768px) {\n+    .desktop-hidden { display: none; }\n+}\n+\n+/* Print Styles */\n+@media print {\n+    .no-print {\n+        display: none !important;\n+    }\n+    \n+    body {\n+        background-color: white !important;\n+        color: black !important;\n+    }\n+    \n+    .container {\n+        max-width: none;\n+        padding: 0;\n+    }\n+}\n+\n+/* Dark Mode Support */\n+@media (prefers-color-scheme: dark) {\n+    :root {\n+        --white: #000000;\n+        --gray-50: #0f172a;\n+        --gray-100: #1e293b;\n+        --gray-200: #334155;\n+        --gray-300: #475569;\n+        --gray-400: #64748b;\n+        --gray-500: #94a3b8;\n+        --gray-600: #cbd5e1;\n+        --gray-700: #e2e8f0;\n+        --gray-800: #f1f5f9;\n+        --gray-900: #f8fafc;\n+        --black: #ffffff;\n+    }\n+}\n+\n+/* Accessibility Improvements */\n+@media (prefers-reduced-motion: reduce) {\n+    *,\n+    *::before,\n+    *::after {\n+        animation-duration: 0.01ms !important;\n+        animation-iteration-count: 1 !important;\n+        transition-duration: 0.01ms !important;\n+    }\n+}\n+\n+/* Focus indicators for keyboard navigation */\n+:focus-visible {\n+    outline: 2px solid var(--primary-color);\n+    outline-offset: 2px;\n+} \n\\ No newline at end of file",
      "affected_symbols": null,
      "related_files": []
    },
    {
      "file_path": "test/example.go",
      "change_type": "Added",
      "diff_hunk": "@@ -0,0 +1,171 @@\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"net/http\"\n+)\n+\n+// User represents a user in the system\n+type User struct {\n+\tID     int    `json:\"id\"`\n+\tName   string `json:\"name\"`\n+\tEmail  string `json:\"email\"`\n+\tActive bool   `json:\"active\"`\n+}\n+\n+// UserRepository interface for user data access\n+type UserRepository interface {\n+\tGetUser(ctx context.Context, id int) (*User, error)\n+\tCreateUser(ctx context.Context, user *User) error\n+\tUpdateUser(ctx context.Context, user *User) error\n+\tDeleteUser(ctx context.Context, id int) error\n+}\n+\n+// userService handles user business logic\n+type userService struct {\n+\trepo UserRepository\n+\tlog  Logger\n+}\n+\n+// Logger interface for logging\n+type Logger interface {\n+\tInfo(msg string, args ...interface{})\n+\tError(msg string, args ...interface{})\n+}\n+\n+const (\n+\tMaxUsers    = 1000\n+\tDefaultPort = 8080\n+)\n+\n+var (\n+\tglobalCounter int\n+\tisInitialized bool = false\n+)\n+\n+// NewUserService creates a new user service\n+func NewUserService(repo UserRepository, logger Logger) *userService {\n+\treturn \u0026userService{\n+\t\trepo: repo,\n+\t\tlog:  logger,\n+\t}\n+}\n+\n+// GetUser retrieves a user by ID\n+func (s *userService) GetUser(ctx context.Context, id int) (*User, error) {\n+\tif id \u003c= 0 {\n+\t\treturn nil, fmt.Errorf(\"invalid user ID: %d\", id)\n+\t}\n+\n+\tuser, err := s.repo.GetUser(ctx, id)\n+\tif err != nil {\n+\t\ts.log.Error(\"failed to get user\", \"id\", id, \"error\", err)\n+\t\treturn nil, err\n+\t}\n+\n+\ts.log.Info(\"retrieved user\", \"id\", id, \"name\", user.Name)\n+\treturn user, nil\n+}\n+\n+// CreateUser creates a new user\n+func (s *userService) CreateUser(ctx context.Context, user *User) error {\n+\tif user == nil {\n+\t\treturn fmt.Errorf(\"user cannot be nil\")\n+\t}\n+\n+\tif err := validateUser(user); err != nil {\n+\t\treturn fmt.Errorf(\"validation failed: %w\", err)\n+\t}\n+\n+\treturn s.repo.CreateUser(ctx, user)\n+}\n+\n+// UpdateUser updates an existing user\n+func (s *userService) UpdateUser(ctx context.Context, user *User) error {\n+\texisting, err := s.GetUser(ctx, user.ID)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\tif existing == nil {\n+\t\treturn fmt.Errorf(\"user not found\")\n+\t}\n+\n+\treturn s.repo.UpdateUser(ctx, user)\n+}\n+\n+// validateUser validates user data\n+func validateUser(user *User) error {\n+\tif user.Name == \"\" {\n+\t\treturn fmt.Errorf(\"name is required\")\n+\t}\n+\tif user.Email == \"\" {\n+\t\treturn fmt.Errorf(\"email is required\")\n+\t}\n+\treturn nil\n+}\n+\n+// HandleUserRequest handles HTTP requests for users\n+func HandleUserRequest(w http.ResponseWriter, r *http.Request) {\n+\tswitch r.Method {\n+\tcase http.MethodGet:\n+\t\thandleGetUser(w, r)\n+\tcase http.MethodPost:\n+\t\thandleCreateUser(w, r)\n+\tcase http.MethodPut:\n+\t\thandleUpdateUser(w, r)\n+\tcase http.MethodDelete:\n+\t\thandleDeleteUser(w, r)\n+\tdefault:\n+\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n+\t}\n+}\n+\n+// handleGetUser handles GET requests\n+func handleGetUser(w http.ResponseWriter, r *http.Request) {\n+\t// Implementation here\n+\tfmt.Fprintf(w, \"Get user\")\n+}\n+\n+// handleCreateUser handles POST requests\n+func handleCreateUser(w http.ResponseWriter, r *http.Request) {\n+\t// Implementation here\n+\tfmt.Fprintf(w, \"Create user\")\n+}\n+\n+// handleUpdateUser handles PUT requests\n+func handleUpdateUser(w http.ResponseWriter, r *http.Request) {\n+\t// Implementation here\n+\tfmt.Fprintf(w, \"Update user\")\n+}\n+\n+// handleDeleteUser handles DELETE requests\n+func handleDeleteUser(w http.ResponseWriter, r *http.Request) {\n+\t// Implementation here\n+\tfmt.Fprintf(w, \"Delete user\")\n+}\n+\n+// init initializes the package\n+func init() {\n+\tglobalCounter = 0\n+\tisInitialized = true\n+}\n+\n+// main is the entry point\n+func main() {\n+\tfmt.Println(\"Starting user service...\")\n+\n+\t// Anonymous function\n+\tprocessData := func(data []string) []string {\n+\t\tresult := make([]string, len(data))\n+\t\tfor i, item := range data {\n+\t\t\tresult[i] = fmt.Sprintf(\"processed: %s\", item)\n+\t\t}\n+\t\treturn result\n+\t}\n+\n+\tdata := []string{\"item1\", \"item2\", \"item3\"}\n+\tprocessed := processData(data)\n+\tfmt.Printf(\"Processed data: %v\\n\", processed)\n+}",
      "affected_symbols": [
        {
          "symbol_name": "init",
          "symbol_type": "function",
          "full_code": "func init() {\n\tglobalCounter = 0\n\tisInitialized = true\n}",
          "doc_comment": "// init initializes the package",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.go",
          "start_line": 150,
          "end_line": 153
        },
        {
          "symbol_name": "main",
          "symbol_type": "function",
          "full_code": "func main() {\n\tfmt.Println(\"Starting user service...\")\n\n\t// Anonymous function\n\tprocessData := func(data []string) []string {\n\t\tresult := make([]string, len(data))\n\t\tfor i, item := range data {\n\t\t\tresult[i] = fmt.Sprintf(\"processed: %s\", item)\n\t\t}\n\t\treturn result\n\t}\n\n\tdata := []string{\"item1\", \"item2\", \"item3\"}\n\tprocessed := processData(data)\n\tfmt.Printf(\"Processed data: %v\\n\", processed)\n}",
          "doc_comment": "// main is the entry point",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "fmt.Println",
              "snippet": "fmt.Println(\"Starting user service...\")",
              "line": 157,
              "type": "call_expression"
            },
            {
              "name": "make",
              "snippet": "make([]string, len(data))",
              "line": 161,
              "type": "call_expression"
            },
            {
              "name": "len",
              "snippet": "len(data)",
              "line": 161,
              "type": "call_expression"
            },
            {
              "name": "fmt.Sprintf",
              "snippet": "fmt.Sprintf(\"processed: %s\", item)",
              "line": 163,
              "type": "call_expression"
            },
            {
              "name": "processData",
              "snippet": "processData(data)",
              "line": 169,
              "type": "call_expression"
            },
            {
              "name": "fmt.Printf",
              "snippet": "fmt.Printf(\"Processed data: %v\\n\", processed)",
              "line": 170,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.go",
          "start_line": 156,
          "end_line": 171
        },
        {
          "symbol_name": "MaxUsers",
          "symbol_type": "constant",
          "full_code": "\tMaxUsers    = 1000",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.go",
          "start_line": 38,
          "end_line": 38
        },
        {
          "symbol_name": "globalCounter",
          "symbol_type": "variable",
          "full_code": "\tglobalCounter int",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.go",
          "start_line": 43,
          "end_line": 43
        },
        {
          "symbol_name": "NewUserService",
          "symbol_type": "function",
          "full_code": "func NewUserService(repo UserRepository, logger Logger) *userService {\n\treturn \u0026userService{\n\t\trepo: repo,\n\t\tlog:  logger,\n\t}\n}",
          "doc_comment": "// NewUserService creates a new user service",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.go",
          "start_line": 48,
          "end_line": 53
        },
        {
          "symbol_name": "GetUser",
          "symbol_type": "method",
          "full_code": "func (s *userService) GetUser(ctx context.Context, id int) (*User, error) {\n\tif id \u003c= 0 {\n\t\treturn nil, fmt.Errorf(\"invalid user ID: %d\", id)\n\t}\n\n\tuser, err := s.repo.GetUser(ctx, id)\n\tif err != nil {\n\t\ts.log.Error(\"failed to get user\", \"id\", id, \"error\", err)\n\t\treturn nil, err\n\t}\n\n\ts.log.Info(\"retrieved user\", \"id\", id, \"name\", user.Name)\n\treturn user, nil\n}",
          "doc_comment": "// GetUser retrieves a user by ID",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "fmt.Errorf",
              "snippet": "fmt.Errorf(\"invalid user ID: %d\", id)",
              "line": 58,
              "type": "call_expression"
            },
            {
              "name": "s.repo.GetUser",
              "snippet": "s.repo.GetUser(ctx, id)",
              "line": 61,
              "type": "call_expression"
            },
            {
              "name": "s.log.Error",
              "snippet": "s.log.Error(\"failed to get user\", \"id\", id, \"error\", err)",
              "line": 63,
              "type": "call_expression"
            },
            {
              "name": "s.log.Info",
              "snippet": "s.log.Info(\"retrieved user\", \"id\", id, \"name\", user.Name)",
              "line": 67,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.go",
          "start_line": 56,
          "end_line": 69
        },
        {
          "symbol_name": "UpdateUser",
          "symbol_type": "method",
          "full_code": "func (s *userService) UpdateUser(ctx context.Context, user *User) error {\n\texisting, err := s.GetUser(ctx, user.ID)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif existing == nil {\n\t\treturn fmt.Errorf(\"user not found\")\n\t}\n\n\treturn s.repo.UpdateUser(ctx, user)\n}",
          "doc_comment": "// UpdateUser updates an existing user",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "s.GetUser",
              "snippet": "s.GetUser(ctx, user.ID)",
              "line": 86,
              "type": "call_expression"
            },
            {
              "name": "fmt.Errorf",
              "snippet": "fmt.Errorf(\"user not found\")",
              "line": 92,
              "type": "call_expression"
            },
            {
              "name": "s.repo.UpdateUser",
              "snippet": "s.repo.UpdateUser(ctx, user)",
              "line": 95,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.go",
          "start_line": 85,
          "end_line": 96
        },
        {
          "symbol_name": "HandleUserRequest",
          "symbol_type": "function",
          "full_code": "func HandleUserRequest(w http.ResponseWriter, r *http.Request) {\n\tswitch r.Method {\n\tcase http.MethodGet:\n\t\thandleGetUser(w, r)\n\tcase http.MethodPost:\n\t\thandleCreateUser(w, r)\n\tcase http.MethodPut:\n\t\thandleUpdateUser(w, r)\n\tcase http.MethodDelete:\n\t\thandleDeleteUser(w, r)\n\tdefault:\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t}\n}",
          "doc_comment": "// HandleUserRequest handles HTTP requests for users",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "handleGetUser",
              "snippet": "handleGetUser(w, r)",
              "line": 113,
              "type": "call_expression"
            },
            {
              "name": "handleCreateUser",
              "snippet": "handleCreateUser(w, r)",
              "line": 115,
              "type": "call_expression"
            },
            {
              "name": "handleUpdateUser",
              "snippet": "handleUpdateUser(w, r)",
              "line": 117,
              "type": "call_expression"
            },
            {
              "name": "handleDeleteUser",
              "snippet": "handleDeleteUser(w, r)",
              "line": 119,
              "type": "call_expression"
            },
            {
              "name": "http.Error",
              "snippet": "http.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)",
              "line": 121,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.go",
          "start_line": 110,
          "end_line": 123
        },
        {
          "symbol_name": "handleGetUser",
          "symbol_type": "function",
          "full_code": "func handleGetUser(w http.ResponseWriter, r *http.Request) {\n\t// Implementation here\n\tfmt.Fprintf(w, \"Get user\")\n}",
          "doc_comment": "// handleGetUser handles GET requests",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "fmt.Fprintf",
              "snippet": "fmt.Fprintf(w, \"Get user\")",
              "line": 128,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.go",
          "start_line": 126,
          "end_line": 129
        },
        {
          "symbol_name": "handleUpdateUser",
          "symbol_type": "function",
          "full_code": "func handleUpdateUser(w http.ResponseWriter, r *http.Request) {\n\t// Implementation here\n\tfmt.Fprintf(w, \"Update user\")\n}",
          "doc_comment": "// handleUpdateUser handles PUT requests",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "fmt.Fprintf",
              "snippet": "fmt.Fprintf(w, \"Update user\")",
              "line": 140,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.go",
          "start_line": 138,
          "end_line": 141
        },
        {
          "symbol_name": "CreateUser",
          "symbol_type": "method",
          "full_code": "func (s *userService) CreateUser(ctx context.Context, user *User) error {\n\tif user == nil {\n\t\treturn fmt.Errorf(\"user cannot be nil\")\n\t}\n\n\tif err := validateUser(user); err != nil {\n\t\treturn fmt.Errorf(\"validation failed: %w\", err)\n\t}\n\n\treturn s.repo.CreateUser(ctx, user)\n}",
          "doc_comment": "// CreateUser creates a new user",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "fmt.Errorf",
              "snippet": "fmt.Errorf(\"user cannot be nil\")",
              "line": 74,
              "type": "call_expression"
            },
            {
              "name": "validateUser",
              "snippet": "validateUser(user)",
              "line": 77,
              "type": "call_expression"
            },
            {
              "name": "fmt.Errorf",
              "snippet": "fmt.Errorf(\"validation failed: %w\", err)",
              "line": 78,
              "type": "call_expression"
            },
            {
              "name": "s.repo.CreateUser",
              "snippet": "s.repo.CreateUser(ctx, user)",
              "line": 81,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.go",
          "start_line": 72,
          "end_line": 82
        },
        {
          "symbol_name": "validateUser",
          "symbol_type": "function",
          "full_code": "func validateUser(user *User) error {\n\tif user.Name == \"\" {\n\t\treturn fmt.Errorf(\"name is required\")\n\t}\n\tif user.Email == \"\" {\n\t\treturn fmt.Errorf(\"email is required\")\n\t}\n\treturn nil\n}",
          "doc_comment": "// validateUser validates user data",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "fmt.Errorf",
              "snippet": "fmt.Errorf(\"name is required\")",
              "line": 101,
              "type": "call_expression"
            },
            {
              "name": "fmt.Errorf",
              "snippet": "fmt.Errorf(\"email is required\")",
              "line": 104,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.go",
          "start_line": 99,
          "end_line": 107
        },
        {
          "symbol_name": "handleCreateUser",
          "symbol_type": "function",
          "full_code": "func handleCreateUser(w http.ResponseWriter, r *http.Request) {\n\t// Implementation here\n\tfmt.Fprintf(w, \"Create user\")\n}",
          "doc_comment": "// handleCreateUser handles POST requests",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "fmt.Fprintf",
              "snippet": "fmt.Fprintf(w, \"Create user\")",
              "line": 134,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.go",
          "start_line": 132,
          "end_line": 135
        },
        {
          "symbol_name": "handleDeleteUser",
          "symbol_type": "function",
          "full_code": "func handleDeleteUser(w http.ResponseWriter, r *http.Request) {\n\t// Implementation here\n\tfmt.Fprintf(w, \"Delete user\")\n}",
          "doc_comment": "// handleDeleteUser handles DELETE requests",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "fmt.Fprintf",
              "snippet": "fmt.Fprintf(w, \"Delete user\")",
              "line": 146,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.go",
          "start_line": 144,
          "end_line": 147
        }
      ],
      "related_files": []
    },
    {
      "file_path": "test/example.html",
      "change_type": "Added",
      "diff_hunk": "@@ -0,0 +1,347 @@\n+\u003c!DOCTYPE html\u003e\n+\u003chtml lang=\"en\"\u003e\n+\u003chead\u003e\n+    \u003cmeta charset=\"UTF-8\"\u003e\n+    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n+    \u003ctitle\u003eUser Management System\u003c/title\u003e\n+    \u003clink rel=\"stylesheet\" href=\"example.css\"\u003e\n+    \u003clink rel=\"icon\" type=\"image/x-icon\" href=\"/favicon.ico\"\u003e\n+\u003c/head\u003e\n+\u003cbody\u003e\n+    \u003c!-- Header Section --\u003e\n+    \u003cheader class=\"main-header\"\u003e\n+        \u003cnav class=\"navbar\"\u003e\n+            \u003cdiv class=\"nav-container\"\u003e\n+                \u003ca href=\"#\" class=\"nav-logo\"\u003eUserMS\u003c/a\u003e\n+                \u003cul class=\"nav-menu\"\u003e\n+                    \u003cli class=\"nav-item\"\u003e\n+                        \u003ca href=\"#dashboard\" class=\"nav-link\"\u003eDashboard\u003c/a\u003e\n+                    \u003c/li\u003e\n+                    \u003cli class=\"nav-item\"\u003e\n+                        \u003ca href=\"#users\" class=\"nav-link\"\u003eUsers\u003c/a\u003e\n+                    \u003c/li\u003e\n+                    \u003cli class=\"nav-item\"\u003e\n+                        \u003ca href=\"#settings\" class=\"nav-link\"\u003eSettings\u003c/a\u003e\n+                    \u003c/li\u003e\n+                    \u003cli class=\"nav-item\"\u003e\n+                        \u003ca href=\"#logout\" class=\"nav-link logout-btn\"\u003eLogout\u003c/a\u003e\n+                    \u003c/li\u003e\n+                \u003c/ul\u003e\n+                \u003cdiv class=\"hamburger\"\u003e\n+                    \u003cspan class=\"bar\"\u003e\u003c/span\u003e\n+                    \u003cspan class=\"bar\"\u003e\u003c/span\u003e\n+                    \u003cspan class=\"bar\"\u003e\u003c/span\u003e\n+                \u003c/div\u003e\n+            \u003c/div\u003e\n+        \u003c/nav\u003e\n+    \u003c/header\u003e\n+\n+    \u003c!-- Main Content --\u003e\n+    \u003cmain class=\"main-content\"\u003e\n+        \u003c!-- Dashboard Section --\u003e\n+        \u003csection id=\"dashboard\" class=\"dashboard-section\"\u003e\n+            \u003cdiv class=\"container\"\u003e\n+                \u003ch1 class=\"page-title\"\u003eDashboard\u003c/h1\u003e\n+                \n+                \u003c!-- Stats Cards --\u003e\n+                \u003cdiv class=\"stats-grid\"\u003e\n+                    \u003cdiv class=\"stat-card active-users\"\u003e\n+                        \u003ch3 class=\"stat-title\"\u003eActive Users\u003c/h3\u003e\n+                        \u003cdiv class=\"stat-number\" data-count=\"1,234\"\u003e1,234\u003c/div\u003e\n+                        \u003cp class=\"stat-change positive\"\u003e+12% from last month\u003c/p\u003e\n+                    \u003c/div\u003e\n+                    \n+                    \u003cdiv class=\"stat-card total-users\"\u003e\n+                        \u003ch3 class=\"stat-title\"\u003eTotal Users\u003c/h3\u003e\n+                        \u003cdiv class=\"stat-number\" data-count=\"5,678\"\u003e5,678\u003c/div\u003e\n+                        \u003cp class=\"stat-change neutral\"\u003eNo change\u003c/p\u003e\n+                    \u003c/div\u003e\n+                    \n+                    \u003cdiv class=\"stat-card suspended-users\"\u003e\n+                        \u003ch3 class=\"stat-title\"\u003eSuspended\u003c/h3\u003e\n+                        \u003cdiv class=\"stat-number\" data-count=\"23\"\u003e23\u003c/div\u003e\n+                        \u003cp class=\"stat-change negative\"\u003e+3 this week\u003c/p\u003e\n+                    \u003c/div\u003e\n+                \u003c/div\u003e\n+\n+                \u003c!-- Chart Container --\u003e\n+                \u003cdiv class=\"chart-container\"\u003e\n+                    \u003ch2 class=\"chart-title\"\u003eUser Activity\u003c/h2\u003e\n+                    \u003ccanvas id=\"userChart\" width=\"800\" height=\"400\"\u003e\u003c/canvas\u003e\n+                \u003c/div\u003e\n+            \u003c/div\u003e\n+        \u003c/section\u003e\n+\n+        \u003c!-- Users Section --\u003e\n+        \u003csection id=\"users\" class=\"users-section\"\u003e\n+            \u003cdiv class=\"container\"\u003e\n+                \u003cdiv class=\"section-header\"\u003e\n+                    \u003ch1 class=\"page-title\"\u003eUser Management\u003c/h1\u003e\n+                    \u003cbutton class=\"btn btn-primary\" id=\"addUserBtn\"\u003e\n+                        \u003ci class=\"icon-plus\"\u003e\u003c/i\u003e\n+                        Add User\n+                    \u003c/button\u003e\n+                \u003c/div\u003e\n+\n+                \u003c!-- Search and Filters --\u003e\n+                \u003cdiv class=\"filters-container\"\u003e\n+                    \u003cdiv class=\"search-box\"\u003e\n+                        \u003cinput type=\"text\" id=\"searchInput\" placeholder=\"Search users...\" class=\"search-input\"\u003e\n+                        \u003cbutton class=\"search-btn\" type=\"button\"\u003e\n+                            \u003ci class=\"icon-search\"\u003e\u003c/i\u003e\n+                        \u003c/button\u003e\n+                    \u003c/div\u003e\n+                    \n+                    \u003cdiv class=\"filter-controls\"\u003e\n+                        \u003cselect id=\"statusFilter\" class=\"filter-select\"\u003e\n+                            \u003coption value=\"\"\u003eAll Statuses\u003c/option\u003e\n+                            \u003coption value=\"active\"\u003eActive\u003c/option\u003e\n+                            \u003coption value=\"inactive\"\u003eInactive\u003c/option\u003e\n+                            \u003coption value=\"suspended\"\u003eSuspended\u003c/option\u003e\n+                        \u003c/select\u003e\n+                        \n+                        \u003cselect id=\"roleFilter\" class=\"filter-select\"\u003e\n+                            \u003coption value=\"\"\u003eAll Roles\u003c/option\u003e\n+                            \u003coption value=\"admin\"\u003eAdmin\u003c/option\u003e\n+                            \u003coption value=\"user\"\u003eUser\u003c/option\u003e\n+                            \u003coption value=\"moderator\"\u003eModerator\u003c/option\u003e\n+                        \u003c/select\u003e\n+                    \u003c/div\u003e\n+                \u003c/div\u003e\n+\n+                \u003c!-- Users Table --\u003e\n+                \u003cdiv class=\"table-container\"\u003e\n+                    \u003ctable class=\"users-table\" id=\"usersTable\"\u003e\n+                        \u003cthead\u003e\n+                            \u003ctr\u003e\n+                                \u003cth class=\"sortable\" data-sort=\"id\"\u003e\n+                                    ID \u003ci class=\"sort-icon\"\u003e\u003c/i\u003e\n+                                \u003c/th\u003e\n+                                \u003cth class=\"sortable\" data-sort=\"name\"\u003e\n+                                    Name \u003ci class=\"sort-icon\"\u003e\u003c/i\u003e\n+                                \u003c/th\u003e\n+                                \u003cth class=\"sortable\" data-sort=\"email\"\u003e\n+                                    Email \u003ci class=\"sort-icon\"\u003e\u003c/i\u003e\n+                                \u003c/th\u003e\n+                                \u003cth class=\"sortable\" data-sort=\"status\"\u003e\n+                                    Status \u003ci class=\"sort-icon\"\u003e\u003c/i\u003e\n+                                \u003c/th\u003e\n+                                \u003cth class=\"sortable\" data-sort=\"created\"\u003e\n+                                    Created \u003ci class=\"sort-icon\"\u003e\u003c/i\u003e\n+                                \u003c/th\u003e\n+                                \u003cth class=\"actions-col\"\u003eActions\u003c/th\u003e\n+                            \u003c/tr\u003e\n+                        \u003c/thead\u003e\n+                        \u003ctbody\u003e\n+                            \u003ctr class=\"user-row\" data-user-id=\"1\"\u003e\n+                                \u003ctd class=\"user-id\"\u003e1\u003c/td\u003e\n+                                \u003ctd class=\"user-name\"\u003e\n+                                    \u003cdiv class=\"user-info\"\u003e\n+                                        \u003cimg src=\"/avatars/alice.jpg\" alt=\"Alice Johnson\" class=\"user-avatar\"\u003e\n+                                        \u003cspan\u003eAlice Johnson\u003c/span\u003e\n+                                    \u003c/div\u003e\n+                                \u003c/td\u003e\n+                                \u003ctd class=\"user-email\"\u003ealice@example.com\u003c/td\u003e\n+                                \u003ctd class=\"user-status\"\u003e\n+                                    \u003cspan class=\"status-badge active\"\u003eActive\u003c/span\u003e\n+                                \u003c/td\u003e\n+                                \u003ctd class=\"user-created\"\u003e2024-01-15\u003c/td\u003e\n+                                \u003ctd class=\"user-actions\"\u003e\n+                                    \u003cbutton class=\"btn-icon edit-btn\" title=\"Edit user\"\u003e\n+                                        \u003ci class=\"icon-edit\"\u003e\u003c/i\u003e\n+                                    \u003c/button\u003e\n+                                    \u003cbutton class=\"btn-icon delete-btn\" title=\"Delete user\"\u003e\n+                                        \u003ci class=\"icon-delete\"\u003e\u003c/i\u003e\n+                                    \u003c/button\u003e\n+                                \u003c/td\u003e\n+                            \u003c/tr\u003e\n+                            \n+                            \u003ctr class=\"user-row\" data-user-id=\"2\"\u003e\n+                                \u003ctd class=\"user-id\"\u003e2\u003c/td\u003e\n+                                \u003ctd class=\"user-name\"\u003e\n+                                    \u003cdiv class=\"user-info\"\u003e\n+                                        \u003cimg src=\"/avatars/bob.jpg\" alt=\"Bob Smith\" class=\"user-avatar\"\u003e\n+                                        \u003cspan\u003eBob Smith\u003c/span\u003e\n+                                    \u003c/div\u003e\n+                                \u003c/td\u003e\n+                                \u003ctd class=\"user-email\"\u003ebob@example.com\u003c/td\u003e\n+                                \u003ctd class=\"user-status\"\u003e\n+                                    \u003cspan class=\"status-badge inactive\"\u003eInactive\u003c/span\u003e\n+                                \u003c/td\u003e\n+                                \u003ctd class=\"user-created\"\u003e2024-01-10\u003c/td\u003e\n+                                \u003ctd class=\"user-actions\"\u003e\n+                                    \u003cbutton class=\"btn-icon edit-btn\" title=\"Edit user\"\u003e\n+                                        \u003ci class=\"icon-edit\"\u003e\u003c/i\u003e\n+                                    \u003c/button\u003e\n+                                    \u003cbutton class=\"btn-icon delete-btn\" title=\"Delete user\"\u003e\n+                                        \u003ci class=\"icon-delete\"\u003e\u003c/i\u003e\n+                                    \u003c/button\u003e\n+                                \u003c/td\u003e\n+                            \u003c/tr\u003e\n+                        \u003c/tbody\u003e\n+                    \u003c/table\u003e\n+                \u003c/div\u003e\n+\n+                \u003c!-- Pagination --\u003e\n+                \u003cdiv class=\"pagination-container\"\u003e\n+                    \u003cdiv class=\"pagination-info\"\u003e\n+                        Showing 1-10 of 234 users\n+                    \u003c/div\u003e\n+                    \u003cnav class=\"pagination\"\u003e\n+                        \u003cbutton class=\"pagination-btn prev\" disabled\u003e\n+                            \u003ci class=\"icon-prev\"\u003e\u003c/i\u003e\n+                            Previous\n+                        \u003c/button\u003e\n+                        \u003cbutton class=\"pagination-btn page-num active\"\u003e1\u003c/button\u003e\n+                        \u003cbutton class=\"pagination-btn page-num\"\u003e2\u003c/button\u003e\n+                        \u003cbutton class=\"pagination-btn page-num\"\u003e3\u003c/button\u003e\n+                        \u003cspan class=\"pagination-dots\"\u003e...\u003c/span\u003e\n+                        \u003cbutton class=\"pagination-btn page-num\"\u003e24\u003c/button\u003e\n+                        \u003cbutton class=\"pagination-btn next\"\u003e\n+                            Next\n+                            \u003ci class=\"icon-next\"\u003e\u003c/i\u003e\n+                        \u003c/button\u003e\n+                    \u003c/nav\u003e\n+                \u003c/div\u003e\n+            \u003c/div\u003e\n+        \u003c/section\u003e\n+    \u003c/main\u003e\n+\n+    \u003c!-- Modal for Add/Edit User --\u003e\n+    \u003cdiv id=\"userModal\" class=\"modal\" role=\"dialog\" aria-labelledby=\"modalTitle\" aria-hidden=\"true\"\u003e\n+        \u003cdiv class=\"modal-overlay\" aria-hidden=\"true\"\u003e\u003c/div\u003e\n+        \u003cdiv class=\"modal-container\"\u003e\n+            \u003cdiv class=\"modal-header\"\u003e\n+                \u003ch2 id=\"modalTitle\" class=\"modal-title\"\u003eAdd New User\u003c/h2\u003e\n+                \u003cbutton class=\"modal-close\" aria-label=\"Close modal\"\u003e\n+                    \u003ci class=\"icon-close\"\u003e\u003c/i\u003e\n+                \u003c/button\u003e\n+            \u003c/div\u003e\n+            \n+            \u003cdiv class=\"modal-body\"\u003e\n+                \u003cform id=\"userForm\" class=\"user-form\" novalidate\u003e\n+                    \u003cdiv class=\"form-group\"\u003e\n+                        \u003clabel for=\"userName\" class=\"form-label required\"\u003eName\u003c/label\u003e\n+                        \u003cinput type=\"text\" id=\"userName\" name=\"name\" class=\"form-input\" required \n+                               placeholder=\"Enter user's full name\"\u003e\n+                        \u003cdiv class=\"form-error\" id=\"nameError\"\u003e\u003c/div\u003e\n+                    \u003c/div\u003e\n+                    \n+                    \u003cdiv class=\"form-group\"\u003e\n+                        \u003clabel for=\"userEmail\" class=\"form-label required\"\u003eEmail\u003c/label\u003e\n+                        \u003cinput type=\"email\" id=\"userEmail\" name=\"email\" class=\"form-input\" required \n+                               placeholder=\"user@example.com\"\u003e\n+                        \u003cdiv class=\"form-error\" id=\"emailError\"\u003e\u003c/div\u003e\n+                    \u003c/div\u003e\n+                    \n+                    \u003cdiv class=\"form-group\"\u003e\n+                        \u003clabel for=\"userRole\" class=\"form-label\"\u003eRole\u003c/label\u003e\n+                        \u003cselect id=\"userRole\" name=\"role\" class=\"form-select\"\u003e\n+                            \u003coption value=\"user\"\u003eUser\u003c/option\u003e\n+                            \u003coption value=\"moderator\"\u003eModerator\u003c/option\u003e\n+                            \u003coption value=\"admin\"\u003eAdmin\u003c/option\u003e\n+                        \u003c/select\u003e\n+                    \u003c/div\u003e\n+                    \n+                    \u003cdiv class=\"form-group\"\u003e\n+                        \u003clabel for=\"userStatus\" class=\"form-label\"\u003eStatus\u003c/label\u003e\n+                        \u003cdiv class=\"radio-group\"\u003e\n+                            \u003clabel class=\"radio-label\"\u003e\n+                                \u003cinput type=\"radio\" name=\"status\" value=\"active\" checked\u003e\n+                                \u003cspan class=\"radio-custom\"\u003e\u003c/span\u003e\n+                                Active\n+                            \u003c/label\u003e\n+                            \u003clabel class=\"radio-label\"\u003e\n+                                \u003cinput type=\"radio\" name=\"status\" value=\"inactive\"\u003e\n+                                \u003cspan class=\"radio-custom\"\u003e\u003c/span\u003e\n+                                Inactive\n+                            \u003c/label\u003e\n+                        \u003c/div\u003e\n+                    \u003c/div\u003e\n+                    \n+                    \u003cdiv class=\"form-group\"\u003e\n+                        \u003clabel class=\"form-label\"\u003ePermissions\u003c/label\u003e\n+                        \u003cdiv class=\"checkbox-group\"\u003e\n+                            \u003clabel class=\"checkbox-label\"\u003e\n+                                \u003cinput type=\"checkbox\" name=\"permissions\" value=\"read\" checked\u003e\n+                                \u003cspan class=\"checkbox-custom\"\u003e\u003c/span\u003e\n+                                Read\n+                            \u003c/label\u003e\n+                            \u003clabel class=\"checkbox-label\"\u003e\n+                                \u003cinput type=\"checkbox\" name=\"permissions\" value=\"write\"\u003e\n+                                \u003cspan class=\"checkbox-custom\"\u003e\u003c/span\u003e\n+                                Write\n+                            \u003c/label\u003e\n+                            \u003clabel class=\"checkbox-label\"\u003e\n+                                \u003cinput type=\"checkbox\" name=\"permissions\" value=\"delete\"\u003e\n+                                \u003cspan class=\"checkbox-custom\"\u003e\u003c/span\u003e\n+                                Delete\n+                            \u003c/label\u003e\n+                        \u003c/div\u003e\n+                    \u003c/div\u003e\n+                \u003c/form\u003e\n+            \u003c/div\u003e\n+            \n+            \u003cdiv class=\"modal-footer\"\u003e\n+                \u003cbutton type=\"button\" class=\"btn btn-secondary\" id=\"cancelBtn\"\u003eCancel\u003c/button\u003e\n+                \u003cbutton type=\"submit\" form=\"userForm\" class=\"btn btn-primary\" id=\"saveBtn\"\u003e\n+                    \u003ci class=\"icon-save\"\u003e\u003c/i\u003e\n+                    Save User\n+                \u003c/button\u003e\n+            \u003c/div\u003e\n+        \u003c/div\u003e\n+    \u003c/div\u003e\n+\n+    \u003c!-- Footer --\u003e\n+    \u003cfooter class=\"main-footer\"\u003e\n+        \u003cdiv class=\"container\"\u003e\n+            \u003cdiv class=\"footer-content\"\u003e\n+                \u003cdiv class=\"footer-section\"\u003e\n+                    \u003ch3 class=\"footer-title\"\u003eUser Management System\u003c/h3\u003e\n+                    \u003cp class=\"footer-text\"\u003eEfficient user management for modern applications.\u003c/p\u003e\n+                \u003c/div\u003e\n+                \n+                \u003cdiv class=\"footer-section\"\u003e\n+                    \u003ch4 class=\"footer-subtitle\"\u003eQuick Links\u003c/h4\u003e\n+                    \u003cul class=\"footer-links\"\u003e\n+                        \u003cli\u003e\u003ca href=\"#documentation\"\u003eDocumentation\u003c/a\u003e\u003c/li\u003e\n+                        \u003cli\u003e\u003ca href=\"#api\"\u003eAPI Reference\u003c/a\u003e\u003c/li\u003e\n+                        \u003cli\u003e\u003ca href=\"#support\"\u003eSupport\u003c/a\u003e\u003c/li\u003e\n+                    \u003c/ul\u003e\n+                \u003c/div\u003e\n+                \n+                \u003cdiv class=\"footer-section\"\u003e\n+                    \u003ch4 class=\"footer-subtitle\"\u003eContact\u003c/h4\u003e\n+                    \u003caddress class=\"footer-address\"\u003e\n+                        \u003cp\u003eEmail: \u003ca href=\"mailto:support@example.com\"\u003esupport@example.com\u003c/a\u003e\u003c/p\u003e\n+                        \u003cp\u003ePhone: \u003ca href=\"tel:+1234567890\"\u003e+1 (234) 567-890\u003c/a\u003e\u003c/p\u003e\n+                    \u003c/address\u003e\n+                \u003c/div\u003e\n+            \u003c/div\u003e\n+            \n+            \u003cdiv class=\"footer-bottom\"\u003e\n+                \u003cp class=\"copyright\"\u003e\n+                    \u0026copy; 2024 User Management System. All rights reserved.\n+                \u003c/p\u003e\n+            \u003c/div\u003e\n+        \u003c/div\u003e\n+    \u003c/footer\u003e\n+\n+    \u003c!-- Toast Notifications --\u003e\n+    \u003cdiv id=\"toastContainer\" class=\"toast-container\" aria-live=\"polite\" aria-atomic=\"true\"\u003e\u003c/div\u003e\n+\n+    \u003c!-- Loading Spinner --\u003e\n+    \u003cdiv id=\"loadingSpinner\" class=\"loading-overlay\" aria-hidden=\"true\"\u003e\n+        \u003cdiv class=\"spinner\"\u003e\n+            \u003cdiv class=\"spinner-circle\"\u003e\u003c/div\u003e\n+            \u003cp class=\"spinner-text\"\u003eLoading...\u003c/p\u003e\n+        \u003c/div\u003e\n+    \u003c/div\u003e\n+\n+    \u003c!-- Scripts --\u003e\n+    \u003cscript src=\"js/utils.js\"\u003e\u003c/script\u003e\n+    \u003cscript src=\"js/api.js\"\u003e\u003c/script\u003e\n+    \u003cscript src=\"js/components.js\"\u003e\u003c/script\u003e\n+    \u003cscript src=\"js/main.js\"\u003e\u003c/script\u003e\n+\u003c/body\u003e\n+\u003c/html\u003e \n\\ No newline at end of file",
      "affected_symbols": null,
      "related_files": []
    },
    {
      "file_path": "test/example.java",
      "change_type": "Added",
      "diff_hunk": "@@ -0,0 +1,524 @@\n+package com.example.user;\n+\n+import java.util.*;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * User management system in Java\n+ */\n+public class UserManagementSystem {\n+    \n+    // Constants\n+    public static final int MAX_USERS = 1000;\n+    public static final String DEFAULT_STATUS = \"ACTIVE\";\n+    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ISO_LOCAL_DATE_TIME;\n+    \n+    // Static variables\n+    private static int userCount = 0;\n+    private static boolean isInitialized = false;\n+    \n+    // Enums\n+    public enum UserStatus {\n+        ACTIVE(\"active\"),\n+        INACTIVE(\"inactive\"),\n+        SUSPENDED(\"suspended\"),\n+        DELETED(\"deleted\");\n+        \n+        private final String value;\n+        \n+        UserStatus(String value) {\n+            this.value = value;\n+        }\n+        \n+        public String getValue() {\n+            return value;\n+        }\n+        \n+        public static UserStatus fromString(String value) {\n+            for (UserStatus status : UserStatus.values()) {\n+                if (status.getValue().equals(value)) {\n+                    return status;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"Unknown status: \" + value);\n+        }\n+    }\n+    \n+    public enum Permission {\n+        READ, WRITE, DELETE, ADMIN\n+    }\n+    \n+    // Exception classes\n+    public static class UserNotFoundException extends Exception {\n+        public UserNotFoundException(Long id) {\n+            super(\"User with ID \" + id + \" not found\");\n+        }\n+    }\n+    \n+    public static class ValidationException extends Exception {\n+        public ValidationException(String message) {\n+            super(\"Validation error: \" + message);\n+        }\n+    }\n+    \n+    public static class DuplicateEmailException extends Exception {\n+        public DuplicateEmailException(String email) {\n+            super(\"User with email \" + email + \" already exists\");\n+        }\n+    }\n+    \n+    // Interfaces\n+    public interface UserRepository {\n+        Optional\u003cUser\u003e findById(Long id);\n+        User save(User user);\n+        boolean deleteById(Long id);\n+        Optional\u003cUser\u003e findByEmail(String email);\n+        List\u003cUser\u003e findAll();\n+        List\u003cUser\u003e findByStatus(UserStatus status);\n+    }\n+    \n+    public interface UserService {\n+        User getUser(Long id) throws UserNotFoundException;\n+        User createUser(CreateUserRequest request) throws ValidationException, DuplicateEmailException;\n+        User updateUser(Long id, UpdateUserRequest request) throws UserNotFoundException, ValidationException;\n+        boolean deleteUser(Long id) throws UserNotFoundException;\n+        List\u003cUser\u003e listUsers();\n+        List\u003cUser\u003e searchUsers(String query);\n+    }\n+    \n+    // Data Transfer Objects\n+    public static class CreateUserRequest {\n+        private String name;\n+        private String email;\n+        private Set\u003cPermission\u003e permissions;\n+        private Map\u003cString, String\u003e metadata;\n+        \n+        public CreateUserRequest() {\n+            this.permissions = new HashSet\u003c\u003e();\n+            this.metadata = new HashMap\u003c\u003e();\n+        }\n+        \n+        public CreateUserRequest(String name, String email) {\n+            this();\n+            this.name = name;\n+            this.email = email;\n+        }\n+        \n+        // Getters and setters\n+        public String getName() { return name; }\n+        public void setName(String name) { this.name = name; }\n+        \n+        public String getEmail() { return email; }\n+        public void setEmail(String email) { this.email = email; }\n+        \n+        public Set\u003cPermission\u003e getPermissions() { return permissions; }\n+        public void setPermissions(Set\u003cPermission\u003e permissions) { this.permissions = permissions; }\n+        \n+        public Map\u003cString, String\u003e getMetadata() { return metadata; }\n+        public void setMetadata(Map\u003cString, String\u003e metadata) { this.metadata = metadata; }\n+    }\n+    \n+    public static class UpdateUserRequest {\n+        private String name;\n+        private String email;\n+        private UserStatus status;\n+        private Set\u003cPermission\u003e permissions;\n+        \n+        // Getters and setters\n+        public String getName() { return name; }\n+        public void setName(String name) { this.name = name; }\n+        \n+        public String getEmail() { return email; }\n+        public void setEmail(String email) { this.email = email; }\n+        \n+        public UserStatus getStatus() { return status; }\n+        public void setStatus(UserStatus status) { this.status = status; }\n+        \n+        public Set\u003cPermission\u003e getPermissions() { return permissions; }\n+        public void setPermissions(Set\u003cPermission\u003e permissions) { this.permissions = permissions; }\n+    }\n+    \n+    // User entity class\n+    public static class User {\n+        private Long id;\n+        private String name;\n+        private String email;\n+        private UserStatus status;\n+        private LocalDateTime createdAt;\n+        private LocalDateTime lastLoginAt;\n+        private Set\u003cPermission\u003e permissions;\n+        private Map\u003cString, String\u003e metadata;\n+        \n+        // Constructors\n+        public User() {\n+            this.status = UserStatus.ACTIVE;\n+            this.createdAt = LocalDateTime.now();\n+            this.permissions = new HashSet\u003c\u003e();\n+            this.metadata = new HashMap\u003c\u003e();\n+        }\n+        \n+        public User(Long id, String name, String email) {\n+            this();\n+            this.id = id;\n+            this.name = name;\n+            this.email = email;\n+        }\n+        \n+        public User(String name, String email, Set\u003cPermission\u003e permissions) {\n+            this();\n+            this.name = name;\n+            this.email = email;\n+            this.permissions = new HashSet\u003c\u003e(permissions);\n+        }\n+        \n+        // Business methods\n+        public void activate() {\n+            this.status = UserStatus.ACTIVE;\n+        }\n+        \n+        public void deactivate() {\n+            this.status = UserStatus.INACTIVE;\n+        }\n+        \n+        public void suspend() {\n+            this.status = UserStatus.SUSPENDED;\n+        }\n+        \n+        public boolean hasPermission(Permission permission) {\n+            return permissions.contains(permission) || permissions.contains(Permission.ADMIN);\n+        }\n+        \n+        public void addPermission(Permission permission) {\n+            permissions.add(permission);\n+        }\n+        \n+        public void removePermission(Permission permission) {\n+            permissions.remove(permission);\n+        }\n+        \n+        public void updateLastLogin() {\n+            this.lastLoginAt = LocalDateTime.now();\n+        }\n+        \n+        public String getDisplayName() {\n+            return name + \" (\" + email + \")\";\n+        }\n+        \n+        public boolean isActive() {\n+            return status == UserStatus.ACTIVE;\n+        }\n+        \n+        // Getters and setters\n+        public Long getId() { return id; }\n+        public void setId(Long id) { this.id = id; }\n+        \n+        public String getName() { return name; }\n+        public void setName(String name) { this.name = name; }\n+        \n+        public String getEmail() { return email; }\n+        public void setEmail(String email) { this.email = email; }\n+        \n+        public UserStatus getStatus() { return status; }\n+        public void setStatus(UserStatus status) { this.status = status; }\n+        \n+        public LocalDateTime getCreatedAt() { return createdAt; }\n+        public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }\n+        \n+        public LocalDateTime getLastLoginAt() { return lastLoginAt; }\n+        public void setLastLoginAt(LocalDateTime lastLoginAt) { this.lastLoginAt = lastLoginAt; }\n+        \n+        public Set\u003cPermission\u003e getPermissions() { return permissions; }\n+        public void setPermissions(Set\u003cPermission\u003e permissions) { this.permissions = permissions; }\n+        \n+        public Map\u003cString, String\u003e getMetadata() { return metadata; }\n+        public void setMetadata(Map\u003cString, String\u003e metadata) { this.metadata = metadata; }\n+        \n+        @Override\n+        public boolean equals(Object obj) {\n+            if (this == obj) return true;\n+            if (obj == null || getClass() != obj.getClass()) return false;\n+            User user = (User) obj;\n+            return Objects.equals(id, user.id);\n+        }\n+        \n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(id);\n+        }\n+        \n+        @Override\n+        public String toString() {\n+            return \"User{\" +\n+                \"id=\" + id +\n+                \", name='\" + name + '\\'' +\n+                \", email='\" + email + '\\'' +\n+                \", status=\" + status +\n+                \", createdAt=\" + createdAt +\n+                '}';\n+        }\n+    }\n+    \n+    // Repository implementation\n+    public static class MemoryUserRepository implements UserRepository {\n+        private final Map\u003cLong, User\u003e users = new ConcurrentHashMap\u003c\u003e();\n+        private long nextId = 1L;\n+        \n+        @Override\n+        public Optional\u003cUser\u003e findById(Long id) {\n+            return Optional.ofNullable(users.get(id));\n+        }\n+        \n+        @Override\n+        public User save(User user) {\n+            if (user.getId() == null) {\n+                user.setId(nextId++);\n+            }\n+            users.put(user.getId(), user);\n+            return user;\n+        }\n+        \n+        @Override\n+        public boolean deleteById(Long id) {\n+            return users.remove(id) != null;\n+        }\n+        \n+        @Override\n+        public Optional\u003cUser\u003e findByEmail(String email) {\n+            return users.values().stream()\n+                .filter(user -\u003e email.equals(user.getEmail()))\n+                .findFirst();\n+        }\n+        \n+        @Override\n+        public List\u003cUser\u003e findAll() {\n+            return new ArrayList\u003c\u003e(users.values());\n+        }\n+        \n+        @Override\n+        public List\u003cUser\u003e findByStatus(UserStatus status) {\n+            return users.values().stream()\n+                .filter(user -\u003e user.getStatus() == status)\n+                .collect(Collectors.toList());\n+        }\n+        \n+        public int size() {\n+            return users.size();\n+        }\n+        \n+        public void clear() {\n+            users.clear();\n+            nextId = 1L;\n+        }\n+    }\n+    \n+    // Service implementation\n+    public static class UserServiceImpl implements UserService {\n+        private final UserRepository repository;\n+        private final Map\u003cLong, User\u003e cache = new ConcurrentHashMap\u003c\u003e();\n+        \n+        public UserServiceImpl(UserRepository repository) {\n+            this.repository = repository;\n+        }\n+        \n+        @Override\n+        public User getUser(Long id) throws UserNotFoundException {\n+            if (cache.containsKey(id)) {\n+                return cache.get(id);\n+            }\n+            \n+            User user = repository.findById(id)\n+                .orElseThrow(() -\u003e new UserNotFoundException(id));\n+            \n+            cache.put(id, user);\n+            return user;\n+        }\n+        \n+        @Override\n+        public User createUser(CreateUserRequest request) throws ValidationException, DuplicateEmailException {\n+            validateCreateRequest(request);\n+            \n+            if (repository.findByEmail(request.getEmail()).isPresent()) {\n+                throw new DuplicateEmailException(request.getEmail());\n+            }\n+            \n+            User user = new User(null, request.getName(), request.getEmail());\n+            user.setPermissions(request.getPermissions());\n+            user.setMetadata(request.getMetadata());\n+            \n+            User savedUser = repository.save(user);\n+            userCount++;\n+            \n+            System.out.println(\"Created user: \" + savedUser.getDisplayName());\n+            return savedUser;\n+        }\n+        \n+        @Override\n+        public User updateUser(Long id, UpdateUserRequest request) throws UserNotFoundException, ValidationException {\n+            User user = getUser(id);\n+            \n+            if (request.getName() != null) {\n+                user.setName(request.getName());\n+            }\n+            if (request.getEmail() != null) {\n+                if (!isValidEmail(request.getEmail())) {\n+                    throw new ValidationException(\"Invalid email format\");\n+                }\n+                user.setEmail(request.getEmail());\n+            }\n+            if (request.getStatus() != null) {\n+                user.setStatus(request.getStatus());\n+            }\n+            if (request.getPermissions() != null) {\n+                user.setPermissions(request.getPermissions());\n+            }\n+            \n+            User updatedUser = repository.save(user);\n+            cache.put(id, updatedUser);\n+            \n+            return updatedUser;\n+        }\n+        \n+        @Override\n+        public boolean deleteUser(Long id) throws UserNotFoundException {\n+            User user = getUser(id);\n+            boolean success = repository.deleteById(id);\n+            \n+            if (success) {\n+                cache.remove(id);\n+                userCount--;\n+                System.out.println(\"Deleted user: \" + user.getDisplayName());\n+            }\n+            \n+            return success;\n+        }\n+        \n+        @Override\n+        public List\u003cUser\u003e listUsers() {\n+            return repository.findAll().stream()\n+                .sorted(Comparator.comparing(User::getCreatedAt))\n+                .collect(Collectors.toList());\n+        }\n+        \n+        @Override\n+        public List\u003cUser\u003e searchUsers(String query) {\n+            String lowerQuery = query.toLowerCase();\n+            return repository.findAll().stream()\n+                .filter(user -\u003e \n+                    user.getName().toLowerCase().contains(lowerQuery) ||\n+                    user.getEmail().toLowerCase().contains(lowerQuery))\n+                .collect(Collectors.toList());\n+        }\n+        \n+        private void validateCreateRequest(CreateUserRequest request) throws ValidationException {\n+            if (request.getName() == null || request.getName().trim().isEmpty()) {\n+                throw new ValidationException(\"Name is required\");\n+            }\n+            if (request.getEmail() == null || !isValidEmail(request.getEmail())) {\n+                throw new ValidationException(\"Valid email is required\");\n+            }\n+        }\n+        \n+        private boolean isValidEmail(String email) {\n+            return email != null \u0026\u0026 email.matches(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}$\");\n+        }\n+    }\n+    \n+    // Manager class\n+    public static class UserManager {\n+        private final UserService userService;\n+        \n+        public UserManager(UserService userService) {\n+            this.userService = userService;\n+        }\n+        \n+        public List\u003cUser\u003e bulkCreateUsers(List\u003cCreateUserRequest\u003e requests) {\n+            List\u003cUser\u003e createdUsers = new ArrayList\u003c\u003e();\n+            \n+            for (CreateUserRequest request : requests) {\n+                try {\n+                    User user = userService.createUser(request);\n+                    createdUsers.add(user);\n+                } catch (Exception e) {\n+                    System.err.println(\"Failed to create user \" + request.getName() + \": \" + e.getMessage());\n+                }\n+            }\n+            \n+            return createdUsers;\n+        }\n+        \n+        public Map\u003cString, Integer\u003e getUserStats() {\n+            List\u003cUser\u003e users = userService.listUsers();\n+            Map\u003cString, Integer\u003e stats = new HashMap\u003c\u003e();\n+            \n+            stats.put(\"total\", users.size());\n+            stats.put(\"active\", (int) users.stream().filter(User::isActive).count());\n+            stats.put(\"inactive\", (int) users.stream().filter(u -\u003e u.getStatus() == UserStatus.INACTIVE).count());\n+            stats.put(\"suspended\", (int) users.stream().filter(u -\u003e u.getStatus() == UserStatus.SUSPENDED).count());\n+            \n+            return stats;\n+        }\n+        \n+        public String exportUsers() {\n+            List\u003cUser\u003e users = userService.listUsers();\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(\"ID,Name,Email,Status,Created At\\n\");\n+            \n+            for (User user : users) {\n+                sb.append(user.getId()).append(\",\")\n+                  .append(user.getName()).append(\",\")\n+                  .append(user.getEmail()).append(\",\")\n+                  .append(user.getStatus().getValue()).append(\",\")\n+                  .append(user.getCreatedAt().format(DATE_FORMATTER))\n+                  .append(\"\\n\");\n+            }\n+            \n+            return sb.toString();\n+        }\n+    }\n+    \n+    // Utility methods\n+    public static UserService createUserService() {\n+        UserRepository repository = new MemoryUserRepository();\n+        return new UserServiceImpl(repository);\n+    }\n+    \n+    public static void initializeSystem() {\n+        isInitialized = true;\n+        userCount = 0;\n+        System.out.println(\"User management system initialized\");\n+    }\n+    \n+    // Main method for testing\n+    public static void main(String[] args) {\n+        try {\n+            initializeSystem();\n+            \n+            UserService service = createUserService();\n+            UserManager manager = new UserManager(service);\n+            \n+            // Create test users\n+            List\u003cCreateUserRequest\u003e requests = Arrays.asList(\n+                new CreateUserRequest(\"Alice Johnson\", \"alice@example.com\"),\n+                new CreateUserRequest(\"Bob Smith\", \"bob@example.com\"),\n+                new CreateUserRequest(\"Charlie Brown\", \"charlie@example.com\")\n+            );\n+            \n+            List\u003cUser\u003e createdUsers = manager.bulkCreateUsers(requests);\n+            System.out.println(\"Created \" + createdUsers.size() + \" users\");\n+            \n+            // Get stats\n+            Map\u003cString, Integer\u003e stats = manager.getUserStats();\n+            System.out.println(\"User statistics: \" + stats);\n+            \n+            // Export users\n+            String exportData = manager.exportUsers();\n+            System.out.println(\"Exported data:\\n\" + exportData);\n+            \n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+} \n\\ No newline at end of file",
      "affected_symbols": [
        {
          "symbol_name": "isActive",
          "symbol_type": "method",
          "full_code": "        public boolean isActive() {\n            return status == UserStatus.ACTIVE;\n        }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 210,
          "end_line": 212
        },
        {
          "symbol_name": "requests",
          "symbol_type": "variable",
          "full_code": "            List\u003cCreateUserRequest\u003e requests = Arrays.asList(\n                new CreateUserRequest(\"Alice Johnson\", \"alice@example.com\"),\n                new CreateUserRequest(\"Bob Smith\", \"bob@example.com\"),\n                new CreateUserRequest(\"Charlie Brown\", \"charlie@example.com\")\n            );",
          "doc_comment": "// Create test users",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 503,
          "end_line": 507
        },
        {
          "symbol_name": "ZW1lbnRTeXN0ZW0gewogICAgCiAgICAvLyBDb25zdGFudHMKICAgIHB1Ymxp",
          "symbol_type": "variable",
          "full_code": "ZW1lbnRTeXN0ZW0gewogICAgCiAgICAvLyBDb25zdGFudHMKICAgIHB1Ymxp\nYyBzdGF0aWMgZmluYWwgaW50IE1BWF9VU0VSUyA9IDEwMDA7CiAgICBwdWJs",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 7,
          "end_line": 8
        },
        {
          "symbol_name": "ValidationException",
          "symbol_type": "class",
          "full_code": "    public static class ValidationException extends Exception {\n        public ValidationException(String message) {\n            super(\"Validation error: \" + message);\n        }\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "ValidationException",
              "snippet": "public ValidationException(String message) {\n            super(\"Validation error: \" + message);\n        }",
              "line": 62,
              "type": "struct"
            }
          ],
          "file_path": "test/example.java",
          "start_line": 61,
          "end_line": 65
        },
        {
          "symbol_name": "UserService",
          "symbol_type": "interface",
          "full_code": "    public interface UserService {\n        User getUser(Long id) throws UserNotFoundException;\n        User createUser(CreateUserRequest request) throws ValidationException, DuplicateEmailException;\n        User updateUser(Long id, UpdateUserRequest request) throws UserNotFoundException, ValidationException;\n        boolean deleteUser(Long id) throws UserNotFoundException;\n        List\u003cUser\u003e listUsers();\n        List\u003cUser\u003e searchUsers(String query);\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "User",
              "snippet": "User getUser(Long id) throws UserNotFoundException;",
              "line": 84,
              "type": "method"
            },
            {
              "name": "User",
              "snippet": "User createUser(CreateUserRequest request) throws ValidationException, DuplicateEmailException;",
              "line": 85,
              "type": "method"
            },
            {
              "name": "User",
              "snippet": "User updateUser(Long id, UpdateUserRequest request) throws UserNotFoundException, ValidationException;",
              "line": 86,
              "type": "method"
            },
            {
              "name": "deleteUser",
              "snippet": "boolean deleteUser(Long id) throws UserNotFoundException;",
              "line": 87,
              "type": "method"
            },
            {
              "name": "listUsers",
              "snippet": "List\u003cUser\u003e listUsers();",
              "line": 88,
              "type": "method"
            },
            {
              "name": "searchUsers",
              "snippet": "List\u003cUser\u003e searchUsers(String query);",
              "line": 89,
              "type": "method"
            }
          ],
          "file_path": "test/example.java",
          "start_line": 83,
          "end_line": 90
        },
        {
          "symbol_name": "setEmail",
          "symbol_type": "method",
          "full_code": "        public void setEmail(String email) { this.email = email; }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 115,
          "end_line": 115
        },
        {
          "symbol_name": "findAll",
          "symbol_type": "method",
          "full_code": "        List\u003cUser\u003e findAll();",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 79,
          "end_line": 79
        },
        {
          "symbol_name": "setName",
          "symbol_type": "method",
          "full_code": "        public void setName(String name) { this.name = name; }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 112,
          "end_line": 112
        },
        {
          "symbol_name": "User",
          "symbol_type": "class",
          "full_code": "    public static class User {\n        private Long id;\n        private String name;\n        private String email;\n        private UserStatus status;\n        private LocalDateTime createdAt;\n        private LocalDateTime lastLoginAt;\n        private Set\u003cPermission\u003e permissions;\n        private Map\u003cString, String\u003e metadata;\n        \n        // Constructors\n        public User() {\n            this.status = UserStatus.ACTIVE;\n            this.createdAt = LocalDateTime.now();\n            this.permissions = new HashSet\u003c\u003e();\n            this.metadata = new HashMap\u003c\u003e();\n        }\n        \n        public User(Long id, String name, String email) {\n            this();\n            this.id = id;\n            this.name = name;\n            this.email = email;\n        }\n        \n        public User(String name, String email, Set\u003cPermission\u003e permissions) {\n            this();\n            this.name = name;\n            this.email = email;\n            this.permissions = new HashSet\u003c\u003e(permissions);\n        }\n        \n        // Business methods\n        public void activate() {\n            this.status = UserStatus.ACTIVE;\n        }\n        \n        public void deactivate() {\n            this.status = UserStatus.INACTIVE;\n        }\n        \n        public void suspend() {\n            this.status = UserStatus.SUSPENDED;\n        }\n        \n        public boolean hasPermission(Permission permission) {\n            return permissions.contains(permission) || permissions.contains(Permission.ADMIN);\n        }\n        \n        public void addPermission(Permission permission) {\n            permissions.add(permission);\n        }\n        \n        public void removePermission(Permission permission) {\n            permissions.remove(permission);\n        }\n        \n        public void updateLastLogin() {\n            this.lastLoginAt = LocalDateTime.now();\n        }\n        \n        public String getDisplayName() {\n            return name + \" (\" + email + \")\";\n        }\n        \n        public boolean isActive() {\n            return status == UserStatus.ACTIVE;\n        }\n        \n        // Getters and setters\n        public Long getId() { return id; }\n        public void setId(Long id) { this.id = id; }\n        \n        public String getName() { return name; }\n        public void setName(String name) { this.name = name; }\n        \n        public String getEmail() { return email; }\n        public void setEmail(String email) { this.email = email; }\n        \n        public UserStatus getStatus() { return status; }\n        public void setStatus(UserStatus status) { this.status = status; }\n        \n        public LocalDateTime getCreatedAt() { return createdAt; }\n        public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }\n        \n        public LocalDateTime getLastLoginAt() { return lastLoginAt; }\n        public void setLastLoginAt(LocalDateTime lastLoginAt) { this.lastLoginAt = lastLoginAt; }\n        \n        public Set\u003cPermission\u003e getPermissions() { return permissions; }\n        public void setPermissions(Set\u003cPermission\u003e permissions) { this.permissions = permissions; }\n        \n        public Map\u003cString, String\u003e getMetadata() { return metadata; }\n        public void setMetadata(Map\u003cString, String\u003e metadata) { this.metadata = metadata; }\n        \n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj) return true;\n            if (obj == null || getClass() != obj.getClass()) return false;\n            User user = (User) obj;\n            return Objects.equals(id, user.id);\n        }\n        \n        @Override\n        public int hashCode() {\n            return Objects.hash(id);\n        }\n        \n        @Override\n        public String toString() {\n            return \"User{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                \", email='\" + email + '\\'' +\n                \", status=\" + status +\n                \", createdAt=\" + createdAt +\n                '}';\n        }\n    }",
          "doc_comment": "// User entity class",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "Long",
              "snippet": "private Long id;",
              "line": 146,
              "type": "field_declaration"
            },
            {
              "name": "String",
              "snippet": "private String name;",
              "line": 147,
              "type": "field_declaration"
            },
            {
              "name": "String",
              "snippet": "private String email;",
              "line": 148,
              "type": "field_declaration"
            },
            {
              "name": "UserStatus",
              "snippet": "private UserStatus status;",
              "line": 149,
              "type": "field_declaration"
            },
            {
              "name": "LocalDateTime",
              "snippet": "private LocalDateTime createdAt;",
              "line": 150,
              "type": "field_declaration"
            },
            {
              "name": "LocalDateTime",
              "snippet": "private LocalDateTime lastLoginAt;",
              "line": 151,
              "type": "field_declaration"
            },
            {
              "name": "User",
              "snippet": "public User() {\n            this.status = UserStatus.ACTIVE;\n            this.createdAt = LocalDateTime.now();\n            this.permissions = new HashSet\u003c\u003e();\n            this.metadata = new HashMap\u003c\u003e();\n        }",
              "line": 156,
              "type": "struct"
            },
            {
              "name": "User",
              "snippet": "public User(Long id, String name, String email) {\n            this();\n            this.id = id;\n            this.name = name;\n            this.email = email;\n        }",
              "line": 163,
              "type": "struct"
            },
            {
              "name": "User",
              "snippet": "public User(String name, String email, Set\u003cPermission\u003e permissions) {\n            this();\n            this.name = name;\n            this.email = email;\n            this.permissions = new HashSet\u003c\u003e(permissions);\n        }",
              "line": 170,
              "type": "struct"
            },
            {
              "name": "activate",
              "snippet": "public void activate() {\n            this.status = UserStatus.ACTIVE;\n        }",
              "line": 178,
              "type": "method"
            },
            {
              "name": "deactivate",
              "snippet": "public void deactivate() {\n            this.status = UserStatus.INACTIVE;\n        }",
              "line": 182,
              "type": "method"
            },
            {
              "name": "suspend",
              "snippet": "public void suspend() {\n            this.status = UserStatus.SUSPENDED;\n        }",
              "line": 186,
              "type": "method"
            },
            {
              "name": "hasPermission",
              "snippet": "public boolean hasPermission(Permission permission) {\n            return permissions.contains(permission) || permissions.contains(Permission.ADMIN);\n        }",
              "line": 190,
              "type": "method"
            },
            {
              "name": "addPermission",
              "snippet": "public void addPermission(Permission permission) {\n            permissions.add(permission);\n        }",
              "line": 194,
              "type": "method"
            },
            {
              "name": "removePermission",
              "snippet": "public void removePermission(Permission permission) {\n            permissions.remove(permission);\n        }",
              "line": 198,
              "type": "method"
            },
            {
              "name": "updateLastLogin",
              "snippet": "public void updateLastLogin() {\n            this.lastLoginAt = LocalDateTime.now();\n        }",
              "line": 202,
              "type": "method"
            },
            {
              "name": "String",
              "snippet": "public String getDisplayName() {\n            return name + \" (\" + email + \")\";\n        }",
              "line": 206,
              "type": "method"
            },
            {
              "name": "isActive",
              "snippet": "public boolean isActive() {\n            return status == UserStatus.ACTIVE;\n        }",
              "line": 210,
              "type": "method"
            },
            {
              "name": "Long",
              "snippet": "public Long getId() { return id; }",
              "line": 215,
              "type": "method"
            },
            {
              "name": "setId",
              "snippet": "public void setId(Long id) { this.id = id; }",
              "line": 216,
              "type": "method"
            },
            {
              "name": "String",
              "snippet": "public String getName() { return name; }",
              "line": 218,
              "type": "method"
            },
            {
              "name": "setName",
              "snippet": "public void setName(String name) { this.name = name; }",
              "line": 219,
              "type": "method"
            },
            {
              "name": "String",
              "snippet": "public String getEmail() { return email; }",
              "line": 221,
              "type": "method"
            },
            {
              "name": "setEmail",
              "snippet": "public void setEmail(String email) { this.email = email; }",
              "line": 222,
              "type": "method"
            },
            {
              "name": "UserStatus",
              "snippet": "public UserStatus getStatus() { return status; }",
              "line": 224,
              "type": "method"
            },
            {
              "name": "setStatus",
              "snippet": "public void setStatus(UserStatus status) { this.status = status; }",
              "line": 225,
              "type": "method"
            },
            {
              "name": "LocalDateTime",
              "snippet": "public LocalDateTime getCreatedAt() { return createdAt; }",
              "line": 227,
              "type": "method"
            },
            {
              "name": "setCreatedAt",
              "snippet": "public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }",
              "line": 228,
              "type": "method"
            },
            {
              "name": "LocalDateTime",
              "snippet": "public LocalDateTime getLastLoginAt() { return lastLoginAt; }",
              "line": 230,
              "type": "method"
            },
            {
              "name": "setLastLoginAt",
              "snippet": "public void setLastLoginAt(LocalDateTime lastLoginAt) { this.lastLoginAt = lastLoginAt; }",
              "line": 231,
              "type": "method"
            },
            {
              "name": "getPermissions",
              "snippet": "public Set\u003cPermission\u003e getPermissions() { return permissions; }",
              "line": 233,
              "type": "method"
            },
            {
              "name": "setPermissions",
              "snippet": "public void setPermissions(Set\u003cPermission\u003e permissions) { this.permissions = permissions; }",
              "line": 234,
              "type": "method"
            },
            {
              "name": "getMetadata",
              "snippet": "public Map\u003cString, String\u003e getMetadata() { return metadata; }",
              "line": 236,
              "type": "method"
            },
            {
              "name": "setMetadata",
              "snippet": "public void setMetadata(Map\u003cString, String\u003e metadata) { this.metadata = metadata; }",
              "line": 237,
              "type": "method"
            },
            {
              "name": "equals",
              "snippet": "@Override\n        public boolean equals(Object obj) {\n            if (this == obj) return true;\n            if (obj == null || getClass() != obj.getClass()) return false;\n            User user = (User) obj;\n            return Objects.equals(id, user.id);\n        }",
              "line": 239,
              "type": "method"
            },
            {
              "name": "User",
              "snippet": "User user = (User) obj;",
              "line": 243,
              "type": "variable"
            },
            {
              "name": "hashCode",
              "snippet": "@Override\n        public int hashCode() {\n            return Objects.hash(id);\n        }",
              "line": 247,
              "type": "method"
            },
            {
              "name": "String",
              "snippet": "@Override\n        public String toString() {\n            return \"User{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                \", email='\" + email + '\\'' +\n                \", status=\" + status +\n                \", createdAt=\" + createdAt +\n                '}';\n        }",
              "line": 252,
              "type": "method"
            }
          ],
          "file_path": "test/example.java",
          "start_line": 145,
          "end_line": 262
        },
        {
          "symbol_name": "MemoryUserRepository",
          "symbol_type": "class",
          "full_code": "    public static class MemoryUserRepository implements UserRepository {\n        private final Map\u003cLong, User\u003e users = new ConcurrentHashMap\u003c\u003e();\n        private long nextId = 1L;\n        \n        @Override\n        public Optional\u003cUser\u003e findById(Long id) {\n            return Optional.ofNullable(users.get(id));\n        }\n        \n        @Override\n        public User save(User user) {\n            if (user.getId() == null) {\n                user.setId(nextId++);\n            }\n            users.put(user.getId(), user);\n            return user;\n        }\n        \n        @Override\n        public boolean deleteById(Long id) {\n            return users.remove(id) != null;\n        }\n        \n        @Override\n        public Optional\u003cUser\u003e findByEmail(String email) {\n            return users.values().stream()\n                .filter(user -\u003e email.equals(user.getEmail()))\n                .findFirst();\n        }\n        \n        @Override\n        public List\u003cUser\u003e findAll() {\n            return new ArrayList\u003c\u003e(users.values());\n        }\n        \n        @Override\n        public List\u003cUser\u003e findByStatus(UserStatus status) {\n            return users.values().stream()\n                .filter(user -\u003e user.getStatus() == status)\n                .collect(Collectors.toList());\n        }\n        \n        public int size() {\n            return users.size();\n        }\n        \n        public void clear() {\n            users.clear();\n            nextId = 1L;\n        }\n    }",
          "doc_comment": "// Repository implementation",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "findById",
              "snippet": "@Override\n        public Optional\u003cUser\u003e findById(Long id) {\n            return Optional.ofNullable(users.get(id));\n        }",
              "line": 269,
              "type": "method"
            },
            {
              "name": "User",
              "snippet": "@Override\n        public User save(User user) {\n            if (user.getId() == null) {\n                user.setId(nextId++);\n            }\n            users.put(user.getId(), user);\n            return user;\n        }",
              "line": 274,
              "type": "method"
            },
            {
              "name": "deleteById",
              "snippet": "@Override\n        public boolean deleteById(Long id) {\n            return users.remove(id) != null;\n        }",
              "line": 283,
              "type": "method"
            },
            {
              "name": "findByEmail",
              "snippet": "@Override\n        public Optional\u003cUser\u003e findByEmail(String email) {\n            return users.values().stream()\n                .filter(user -\u003e email.equals(user.getEmail()))\n                .findFirst();\n        }",
              "line": 288,
              "type": "method"
            },
            {
              "name": "findAll",
              "snippet": "@Override\n        public List\u003cUser\u003e findAll() {\n            return new ArrayList\u003c\u003e(users.values());\n        }",
              "line": 295,
              "type": "method"
            },
            {
              "name": "findByStatus",
              "snippet": "@Override\n        public List\u003cUser\u003e findByStatus(UserStatus status) {\n            return users.values().stream()\n                .filter(user -\u003e user.getStatus() == status)\n                .collect(Collectors.toList());\n        }",
              "line": 300,
              "type": "method"
            },
            {
              "name": "size",
              "snippet": "public int size() {\n            return users.size();\n        }",
              "line": 307,
              "type": "method"
            },
            {
              "name": "clear",
              "snippet": "public void clear() {\n            users.clear();\n            nextId = 1L;\n        }",
              "line": 311,
              "type": "method"
            }
          ],
          "file_path": "test/example.java",
          "start_line": 265,
          "end_line": 315
        },
        {
          "symbol_name": "U3RhdHVzKFN0cmluZyB2YWx1ZSkgewogICAgICAgICAgICB0aGlzLnZhbHVl",
          "symbol_type": "variable",
          "full_code": "U3RhdHVzKFN0cmluZyB2YWx1ZSkgewogICAgICAgICAgICB0aGlzLnZhbHVl",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 20,
          "end_line": 20
        },
        {
          "symbol_name": "StringBuilder",
          "symbol_type": "variable",
          "full_code": "            StringBuilder sb = new StringBuilder();",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 466,
          "end_line": 466
        },
        {
          "symbol_name": "YWxzKHZhbHVlKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGF0",
          "symbol_type": "variable",
          "full_code": "YWxzKHZhbHVlKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGF0\ndXM7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAg",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 27,
          "end_line": 28
        },
        {
          "symbol_name": "UserStatus",
          "symbol_type": "struct",
          "full_code": "        UserStatus(String value) {\n            this.value = value;\n        }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 32,
          "end_line": 34
        },
        {
          "symbol_name": "deleteUser",
          "symbol_type": "method",
          "full_code": "        boolean deleteUser(Long id) throws UserNotFoundException;",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 87,
          "end_line": 87
        },
        {
          "symbol_name": "getPermissions",
          "symbol_type": "method",
          "full_code": "        public Set\u003cPermission\u003e getPermissions() { return permissions; }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 117,
          "end_line": 117
        },
        {
          "symbol_name": "addPermission",
          "symbol_type": "method",
          "full_code": "        public void addPermission(Permission permission) {\n            permissions.add(permission);\n        }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 194,
          "end_line": 196
        },
        {
          "symbol_name": "aWMgc3RhdGljIGZpbmFsIFN0cmluZyBERUZBVUxUX1NUQVRVUyA9ICJBQ1RJ",
          "symbol_type": "variable",
          "full_code": "aWMgc3RhdGljIGZpbmFsIFN0cmluZyBERUZBVUxUX1NUQVRVUyA9ICJBQ1RJ\nVkUiOwogICAgcHJpdmF0ZSBzdGF0aWMgZmluYWwgRGF0ZVRpbWVGb3JtYXR0",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 9,
          "end_line": 10
        },
        {
          "symbol_name": "QUxfREFURV9USU1FOwogICAgCiAgICAvLyBTdGF0aWMgdmFyaWFibGVzCiAg",
          "symbol_type": "variable",
          "full_code": "QUxfREFURV9USU1FOwogICAgCiAgICAvLyBTdGF0aWMgdmFyaWFibGVzCiAg",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 12,
          "end_line": 12
        },
        {
          "symbol_name": "ICBwdWJsaWMgZW51bSBQZXJtaXNzaW9uIHsKICAgICAgICBSRUFELCBXUklU",
          "symbol_type": "variable",
          "full_code": "ICBwdWJsaWMgZW51bSBQZXJtaXNzaW9uIHsKICAgICAgICBSRUFELCBXUklU\nRSwgREVMRVRFLCBBRE1JTgogICAgfQogICAgCiAgICAvLyBFeGNlcHRpb24g",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 31,
          "end_line": 32
        },
        {
          "symbol_name": "RSwgREVMRVRFLCBBRE1JTgogICAgfQogICAgCiAgICAvLyBFeGNlcHRpb24g",
          "symbol_type": "variable",
          "full_code": "RSwgREVMRVRFLCBBRE1JTgogICAgfQogICAgCiAgICAvLyBFeGNlcHRpb24g",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 32,
          "end_line": 32
        },
        {
          "symbol_name": "User",
          "symbol_type": "method",
          "full_code": "        User save(User user);",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 76,
          "end_line": 76
        },
        {
          "symbol_name": "findByStatus",
          "symbol_type": "method",
          "full_code": "        List\u003cUser\u003e findByStatus(UserStatus status);",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 80,
          "end_line": 80
        },
        {
          "symbol_name": "isValidEmail",
          "symbol_type": "method",
          "full_code": "        private boolean isValidEmail(String email) {\n            return email != null \u0026\u0026 email.matches(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}$\");\n        }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 424,
          "end_line": 426
        },
        {
          "symbol_name": "UserNotFoundException",
          "symbol_type": "struct",
          "full_code": "        public UserNotFoundException(Long id) {\n            super(\"User with ID \" + id + \" not found\");\n        }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 56,
          "end_line": 58
        },
        {
          "symbol_name": "deleteById",
          "symbol_type": "method",
          "full_code": "        boolean deleteById(Long id);",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 77,
          "end_line": 77
        },
        {
          "symbol_name": "deactivate",
          "symbol_type": "method",
          "full_code": "        public void deactivate() {\n            this.status = UserStatus.INACTIVE;\n        }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 182,
          "end_line": 184
        },
        {
          "symbol_name": "bulkCreateUsers",
          "symbol_type": "method",
          "full_code": "        public List\u003cUser\u003e bulkCreateUsers(List\u003cCreateUserRequest\u003e requests) {\n            List\u003cUser\u003e createdUsers = new ArrayList\u003c\u003e();\n            \n            for (CreateUserRequest request : requests) {\n                try {\n                    User user = userService.createUser(request);\n                    createdUsers.add(user);\n                } catch (Exception e) {\n                    System.err.println(\"Failed to create user \" + request.getName() + \": \" + e.getMessage());\n                }\n            }\n            \n            return createdUsers;\n        }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 437,
          "end_line": 450
        },
        {
          "symbol_name": "main",
          "symbol_type": "method",
          "full_code": "    public static void main(String[] args) {\n        try {\n            initializeSystem();\n            \n            UserService service = createUserService();\n            UserManager manager = new UserManager(service);\n            \n            // Create test users\n            List\u003cCreateUserRequest\u003e requests = Arrays.asList(\n                new CreateUserRequest(\"Alice Johnson\", \"alice@example.com\"),\n                new CreateUserRequest(\"Bob Smith\", \"bob@example.com\"),\n                new CreateUserRequest(\"Charlie Brown\", \"charlie@example.com\")\n            );\n            \n            List\u003cUser\u003e createdUsers = manager.bulkCreateUsers(requests);\n            System.out.println(\"Created \" + createdUsers.size() + \" users\");\n            \n            // Get stats\n            Map\u003cString, Integer\u003e stats = manager.getUserStats();\n            System.out.println(\"User statistics: \" + stats);\n            \n            // Export users\n            String exportData = manager.exportUsers();\n            System.out.println(\"Exported data:\\n\" + exportData);\n            \n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }",
          "doc_comment": "// Main method for testing",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 495,
          "end_line": 523
        },
        {
          "symbol_name": "VkUiOwogICAgcHJpdmF0ZSBzdGF0aWMgZmluYWwgRGF0ZVRpbWVGb3JtYXR0",
          "symbol_type": "variable",
          "full_code": "VkUiOwogICAgcHJpdmF0ZSBzdGF0aWMgZmluYWwgRGF0ZVRpbWVGb3JtYXR0",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 10,
          "end_line": 10
        },
        {
          "symbol_name": "UserManagementSystem",
          "symbol_type": "class",
          "full_code": "public class UserManagementSystem {\n    \n    // Constants\n    public static final int MAX_USERS = 1000;\n    public static final String DEFAULT_STATUS = \"ACTIVE\";\n    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ISO_LOCAL_DATE_TIME;\n    \n    // Static variables\n    private static int userCount = 0;\n    private static boolean isInitialized = false;\n    \n    // Enums\n    public enum UserStatus {\n        ACTIVE(\"active\"),\n        INACTIVE(\"inactive\"),\n        SUSPENDED(\"suspended\"),\n        DELETED(\"deleted\");\n        \n        private final String value;\n        \n        UserStatus(String value) {\n            this.value = value;\n        }\n        \n        public String getValue() {\n            return value;\n        }\n        \n        public static UserStatus fromString(String value) {\n            for (UserStatus status : UserStatus.values()) {\n                if (status.getValue().equals(value)) {\n                    return status;\n                }\n            }\n            throw new IllegalArgumentException(\"Unknown status: \" + value);\n        }\n    }\n    \n    public enum Permission {\n        READ, WRITE, DELETE, ADMIN\n    }\n    \n    // Exception classes\n    public static class UserNotFoundException extends Exception {\n        public UserNotFoundException(Long id) {\n            super(\"User with ID \" + id + \" not found\");\n        }\n    }\n    \n    public static class ValidationException extends Exception {\n        public ValidationException(String message) {\n            super(\"Validation error: \" + message);\n        }\n    }\n    \n    public static class DuplicateEmailException extends Exception {\n        public DuplicateEmailException(String email) {\n            super(\"User with email \" + email + \" already exists\");\n        }\n    }\n    \n    // Interfaces\n    public interface UserRepository {\n        Optional\u003cUser\u003e findById(Long id);\n        User save(User user);\n        boolean deleteById(Long id);\n        Optional\u003cUser\u003e findByEmail(String email);\n        List\u003cUser\u003e findAll();\n        List\u003cUser\u003e findByStatus(UserStatus status);\n    }\n    \n    public interface UserService {\n        User getUser(Long id) throws UserNotFoundException;\n        User createUser(CreateUserRequest request) throws ValidationException, DuplicateEmailException;\n        User updateUser(Long id, UpdateUserRequest request) throws UserNotFoundException, ValidationException;\n        boolean deleteUser(Long id) throws UserNotFoundException;\n        List\u003cUser\u003e listUsers();\n        List\u003cUser\u003e searchUsers(String query);\n    }\n    \n    // Data Transfer Objects\n    public static class CreateUserRequest {\n        private String name;\n        private String email;\n        private Set\u003cPermission\u003e permissions;\n        private Map\u003cString, String\u003e metadata;\n        \n        public CreateUserRequest() {\n            this.permissions = new HashSet\u003c\u003e();\n            this.metadata = new HashMap\u003c\u003e();\n        }\n        \n        public CreateUserRequest(String name, String email) {\n            this();\n            this.name = name;\n            this.email = email;\n        }\n        \n        // Getters and setters\n        public String getName() { return name; }\n        public void setName(String name) { this.name = name; }\n        \n        public String getEmail() { return email; }\n        public void setEmail(String email) { this.email = email; }\n        \n        public Set\u003cPermission\u003e getPermissions() { return permissions; }\n        public void setPermissions(Set\u003cPermission\u003e permissions) { this.permissions = permissions; }\n        \n        public Map\u003cString, String\u003e getMetadata() { return metadata; }\n        public void setMetadata(Map\u003cString, String\u003e metadata) { this.metadata = metadata; }\n    }\n    \n    public static class UpdateUserRequest {\n        private String name;\n        private String email;\n        private UserStatus status;\n        private Set\u003cPermission\u003e permissions;\n        \n        // Getters and setters\n        public String getName() { return name; }\n        public void setName(String name) { this.name = name; }\n        \n        public String getEmail() { return email; }\n        public void setEmail(String email) { this.email = email; }\n        \n        public UserStatus getStatus() { return status; }\n        public void setStatus(UserStatus status) { this.status = status; }\n        \n        public Set\u003cPermission\u003e getPermissions() { return permissions; }\n        public void setPermissions(Set\u003cPermission\u003e permissions) { this.permissions = permissions; }\n    }\n    \n    // User entity class\n    public static class User {\n        private Long id;\n        private String name;\n        private String email;\n        private UserStatus status;\n        private LocalDateTime createdAt;\n        private LocalDateTime lastLoginAt;\n        private Set\u003cPermission\u003e permissions;\n        private Map\u003cString, String\u003e metadata;\n        \n        // Constructors\n        public User() {\n            this.status = UserStatus.ACTIVE;\n            this.createdAt = LocalDateTime.now();\n            this.permissions = new HashSet\u003c\u003e();\n            this.metadata = new HashMap\u003c\u003e();\n        }\n        \n        public User(Long id, String name, String email) {\n            this();\n            this.id = id;\n            this.name = name;\n            this.email = email;\n        }\n        \n        public User(String name, String email, Set\u003cPermission\u003e permissions) {\n            this();\n            this.name = name;\n            this.email = email;\n            this.permissions = new HashSet\u003c\u003e(permissions);\n        }\n        \n        // Business methods\n        public void activate() {\n            this.status = UserStatus.ACTIVE;\n        }\n        \n        public void deactivate() {\n            this.status = UserStatus.INACTIVE;\n        }\n        \n        public void suspend() {\n            this.status = UserStatus.SUSPENDED;\n        }\n        \n        public boolean hasPermission(Permission permission) {\n            return permissions.contains(permission) || permissions.contains(Permission.ADMIN);\n        }\n        \n        public void addPermission(Permission permission) {\n            permissions.add(permission);\n        }\n        \n        public void removePermission(Permission permission) {\n            permissions.remove(permission);\n        }\n        \n        public void updateLastLogin() {\n            this.lastLoginAt = LocalDateTime.now();\n        }\n        \n        public String getDisplayName() {\n            return name + \" (\" + email + \")\";\n        }\n        \n        public boolean isActive() {\n            return status == UserStatus.ACTIVE;\n        }\n        \n        // Getters and setters\n        public Long getId() { return id; }\n        public void setId(Long id) { this.id = id; }\n        \n        public String getName() { return name; }\n        public void setName(String name) { this.name = name; }\n        \n        public String getEmail() { return email; }\n        public void setEmail(String email) { this.email = email; }\n        \n        public UserStatus getStatus() { return status; }\n        public void setStatus(UserStatus status) { this.status = status; }\n        \n        public LocalDateTime getCreatedAt() { return createdAt; }\n        public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }\n        \n        public LocalDateTime getLastLoginAt() { return lastLoginAt; }\n        public void setLastLoginAt(LocalDateTime lastLoginAt) { this.lastLoginAt = lastLoginAt; }\n        \n        public Set\u003cPermission\u003e getPermissions() { return permissions; }\n        public void setPermissions(Set\u003cPermission\u003e permissions) { this.permissions = permissions; }\n        \n        public Map\u003cString, String\u003e getMetadata() { return metadata; }\n        public void setMetadata(Map\u003cString, String\u003e metadata) { this.metadata = metadata; }\n        \n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj) return true;\n            if (obj == null || getClass() != obj.getClass()) return false;\n            User user = (User) obj;\n            return Objects.equals(id, user.id);\n        }\n        \n        @Override\n        public int hashCode() {\n            return Objects.hash(id);\n        }\n        \n        @Override\n        public String toString() {\n            return \"User{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                \", email='\" + email + '\\'' +\n                \", status=\" + status +\n                \", createdAt=\" + createdAt +\n                '}';\n        }\n    }\n    \n    // Repository implementation\n    public static class MemoryUserRepository implements UserRepository {\n        private final Map\u003cLong, User\u003e users = new ConcurrentHashMap\u003c\u003e();\n        private long nextId = 1L;\n        \n        @Override\n        public Optional\u003cUser\u003e findById(Long id) {\n            return Optional.ofNullable(users.get(id));\n        }\n        \n        @Override\n        public User save(User user) {\n            if (user.getId() == null) {\n                user.setId(nextId++);\n            }\n            users.put(user.getId(), user);\n            return user;\n        }\n        \n        @Override\n        public boolean deleteById(Long id) {\n            return users.remove(id) != null;\n        }\n        \n        @Override\n        public Optional\u003cUser\u003e findByEmail(String email) {\n            return users.values().stream()\n                .filter(user -\u003e email.equals(user.getEmail()))\n                .findFirst();\n        }\n        \n        @Override\n        public List\u003cUser\u003e findAll() {\n            return new ArrayList\u003c\u003e(users.values());\n        }\n        \n        @Override\n        public List\u003cUser\u003e findByStatus(UserStatus status) {\n            return users.values().stream()\n                .filter(user -\u003e user.getStatus() == status)\n                .collect(Collectors.toList());\n        }\n        \n        public int size() {\n            return users.size();\n        }\n        \n        public void clear() {\n            users.clear();\n            nextId = 1L;\n        }\n    }\n    \n    // Service implementation\n    public static class UserServiceImpl implements UserService {\n        private final UserRepository repository;\n        private final Map\u003cLong, User\u003e cache = new ConcurrentHashMap\u003c\u003e();\n        \n        public UserServiceImpl(UserRepository repository) {\n            this.repository = repository;\n        }\n        \n        @Override\n        public User getUser(Long id) throws UserNotFoundException {\n            if (cache.containsKey(id)) {\n                return cache.get(id);\n            }\n            \n            User user = repository.findById(id)\n                .orElseThrow(() -\u003e new UserNotFoundException(id));\n            \n            cache.put(id, user);\n            return user;\n        }\n        \n        @Override\n        public User createUser(CreateUserRequest request) throws ValidationException, DuplicateEmailException {\n            validateCreateRequest(request);\n            \n            if (repository.findByEmail(request.getEmail()).isPresent()) {\n                throw new DuplicateEmailException(request.getEmail());\n            }\n            \n            User user = new User(null, request.getName(), request.getEmail());\n            user.setPermissions(request.getPermissions());\n            user.setMetadata(request.getMetadata());\n            \n            User savedUser = repository.save(user);\n            userCount++;\n            \n            System.out.println(\"Created user: \" + savedUser.getDisplayName());\n            return savedUser;\n        }\n        \n        @Override\n        public User updateUser(Long id, UpdateUserRequest request) throws UserNotFoundException, ValidationException {\n            User user = getUser(id);\n            \n            if (request.getName() != null) {\n                user.setName(request.getName());\n            }\n            if (request.getEmail() != null) {\n                if (!isValidEmail(request.getEmail())) {\n                    throw new ValidationException(\"Invalid email format\");\n                }\n                user.setEmail(request.getEmail());\n            }\n            if (request.getStatus() != null) {\n                user.setStatus(request.getStatus());\n            }\n            if (request.getPermissions() != null) {\n                user.setPermissions(request.getPermissions());\n            }\n            \n            User updatedUser = repository.save(user);\n            cache.put(id, updatedUser);\n            \n            return updatedUser;\n        }\n        \n        @Override\n        public boolean deleteUser(Long id) throws UserNotFoundException {\n            User user = getUser(id);\n            boolean success = repository.deleteById(id);\n            \n            if (success) {\n                cache.remove(id);\n                userCount--;\n                System.out.println(\"Deleted user: \" + user.getDisplayName());\n            }\n            \n            return success;\n        }\n        \n        @Override\n        public List\u003cUser\u003e listUsers() {\n            return repository.findAll().stream()\n                .sorted(Comparator.comparing(User::getCreatedAt))\n                .collect(Collectors.toList());\n        }\n        \n        @Override\n        public List\u003cUser\u003e searchUsers(String query) {\n            String lowerQuery = query.toLowerCase();\n            return repository.findAll().stream()\n                .filter(user -\u003e \n                    user.getName().toLowerCase().contains(lowerQuery) ||\n                    user.getEmail().toLowerCase().contains(lowerQuery))\n                .collect(Collectors.toList());\n        }\n        \n        private void validateCreateRequest(CreateUserRequest request) throws ValidationException {\n            if (request.getName() == null || request.getName().trim().isEmpty()) {\n                throw new ValidationException(\"Name is required\");\n            }\n            if (request.getEmail() == null || !isValidEmail(request.getEmail())) {\n                throw new ValidationException(\"Valid email is required\");\n            }\n        }\n        \n        private boolean isValidEmail(String email) {\n            return email != null \u0026\u0026 email.matches(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}$\");\n        }\n    }\n    \n    // Manager class\n    public static class UserManager {\n        private final UserService userService;\n        \n        public UserManager(UserService userService) {\n            this.userService = userService;\n        }\n        \n        public List\u003cUser\u003e bulkCreateUsers(List\u003cCreateUserRequest\u003e requests) {\n            List\u003cUser\u003e createdUsers = new ArrayList\u003c\u003e();\n            \n            for (CreateUserRequest request : requests) {\n                try {\n                    User user = userService.createUser(request);\n                    createdUsers.add(user);\n                } catch (Exception e) {\n                    System.err.println(\"Failed to create user \" + request.getName() + \": \" + e.getMessage());\n                }\n            }\n            \n            return createdUsers;\n        }\n        \n        public Map\u003cString, Integer\u003e getUserStats() {\n            List\u003cUser\u003e users = userService.listUsers();\n            Map\u003cString, Integer\u003e stats = new HashMap\u003c\u003e();\n            \n            stats.put(\"total\", users.size());\n            stats.put(\"active\", (int) users.stream().filter(User::isActive).count());\n            stats.put(\"inactive\", (int) users.stream().filter(u -\u003e u.getStatus() == UserStatus.INACTIVE).count());\n            stats.put(\"suspended\", (int) users.stream().filter(u -\u003e u.getStatus() == UserStatus.SUSPENDED).count());\n            \n            return stats;\n        }\n        \n        public String exportUsers() {\n            List\u003cUser\u003e users = userService.listUsers();\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"ID,Name,Email,Status,Created At\\n\");\n            \n            for (User user : users) {\n                sb.append(user.getId()).append(\",\")\n                  .append(user.getName()).append(\",\")\n                  .append(user.getEmail()).append(\",\")\n                  .append(user.getStatus().getValue()).append(\",\")\n                  .append(user.getCreatedAt().format(DATE_FORMATTER))\n                  .append(\"\\n\");\n            }\n            \n            return sb.toString();\n        }\n    }\n    \n    // Utility methods\n    public static UserService createUserService() {\n        UserRepository repository = new MemoryUserRepository();\n        return new UserServiceImpl(repository);\n    }\n    \n    public static void initializeSystem() {\n        isInitialized = true;\n        userCount = 0;\n        System.out.println(\"User management system initialized\");\n    }\n    \n    // Main method for testing\n    public static void main(String[] args) {\n        try {\n            initializeSystem();\n            \n            UserService service = createUserService();\n            UserManager manager = new UserManager(service);\n            \n            // Create test users\n            List\u003cCreateUserRequest\u003e requests = Arrays.asList(\n                new CreateUserRequest(\"Alice Johnson\", \"alice@example.com\"),\n                new CreateUserRequest(\"Bob Smith\", \"bob@example.com\"),\n                new CreateUserRequest(\"Charlie Brown\", \"charlie@example.com\")\n            );\n            \n            List\u003cUser\u003e createdUsers = manager.bulkCreateUsers(requests);\n            System.out.println(\"Created \" + createdUsers.size() + \" users\");\n            \n            // Get stats\n            Map\u003cString, Integer\u003e stats = manager.getUserStats();\n            System.out.println(\"User statistics: \" + stats);\n            \n            // Export users\n            String exportData = manager.exportUsers();\n            System.out.println(\"Exported data:\\n\" + exportData);\n            \n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n} ",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "String",
              "snippet": "public static final String DEFAULT_STATUS = \"ACTIVE\";",
              "line": 16,
              "type": "field_declaration"
            },
            {
              "name": "DateTimeFormatter",
              "snippet": "private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ISO_LOCAL_DATE_TIME;",
              "line": 17,
              "type": "field_declaration"
            },
            {
              "name": "UserStatus",
              "snippet": "public enum UserStatus {\n        ACTIVE(\"active\"),\n        INACTIVE(\"inactive\"),\n        SUSPENDED(\"suspended\"),\n        DELETED(\"deleted\");\n        \n        private final String value;\n        \n        UserStatus(String value) {\n            this.value = value;\n        }\n        \n        public String getValue() {\n            return value;\n        }\n        \n        public static UserStatus fromString(String value) {\n            for (UserStatus status : UserStatus.values()) {\n                if (status.getValue().equals(value)) {\n                    return status;\n                }\n            }\n            throw new IllegalArgumentException(\"Unknown status: \" + value);\n        }\n    }",
              "line": 24,
              "type": "enum"
            },
            {
              "name": "String",
              "snippet": "private final String value;",
              "line": 30,
              "type": "field_declaration"
            },
            {
              "name": "UserStatus",
              "snippet": "UserStatus(String value) {\n            this.value = value;\n        }",
              "line": 32,
              "type": "struct"
            },
            {
              "name": "String",
              "snippet": "public String getValue() {\n            return value;\n        }",
              "line": 36,
              "type": "method"
            },
            {
              "name": "UserStatus",
              "snippet": "public static UserStatus fromString(String value) {\n            for (UserStatus status : UserStatus.values()) {\n                if (status.getValue().equals(value)) {\n                    return status;\n                }\n            }\n            throw new IllegalArgumentException(\"Unknown status: \" + value);\n        }",
              "line": 40,
              "type": "method"
            },
            {
              "name": "Permission",
              "snippet": "public enum Permission {\n        READ, WRITE, DELETE, ADMIN\n    }",
              "line": 50,
              "type": "enum"
            },
            {
              "name": "UserNotFoundException",
              "snippet": "public static class UserNotFoundException extends Exception {\n        public UserNotFoundException(Long id) {\n            super(\"User with ID \" + id + \" not found\");\n        }\n    }",
              "line": 55,
              "type": "class"
            },
            {
              "name": "UserNotFoundException",
              "snippet": "public UserNotFoundException(Long id) {\n            super(\"User with ID \" + id + \" not found\");\n        }",
              "line": 56,
              "type": "struct"
            },
            {
              "name": "ValidationException",
              "snippet": "public static class ValidationException extends Exception {\n        public ValidationException(String message) {\n            super(\"Validation error: \" + message);\n        }\n    }",
              "line": 61,
              "type": "class"
            },
            {
              "name": "ValidationException",
              "snippet": "public ValidationException(String message) {\n            super(\"Validation error: \" + message);\n        }",
              "line": 62,
              "type": "struct"
            },
            {
              "name": "DuplicateEmailException",
              "snippet": "public static class DuplicateEmailException extends Exception {\n        public DuplicateEmailException(String email) {\n            super(\"User with email \" + email + \" already exists\");\n        }\n    }",
              "line": 67,
              "type": "class"
            },
            {
              "name": "DuplicateEmailException",
              "snippet": "public DuplicateEmailException(String email) {\n            super(\"User with email \" + email + \" already exists\");\n        }",
              "line": 68,
              "type": "struct"
            },
            {
              "name": "UserRepository",
              "snippet": "public interface UserRepository {\n        Optional\u003cUser\u003e findById(Long id);\n        User save(User user);\n        boolean deleteById(Long id);\n        Optional\u003cUser\u003e findByEmail(String email);\n        List\u003cUser\u003e findAll();\n        List\u003cUser\u003e findByStatus(UserStatus status);\n    }",
              "line": 74,
              "type": "interface"
            },
            {
              "name": "findById",
              "snippet": "Optional\u003cUser\u003e findById(Long id);",
              "line": 75,
              "type": "method"
            },
            {
              "name": "User",
              "snippet": "User save(User user);",
              "line": 76,
              "type": "method"
            },
            {
              "name": "deleteById",
              "snippet": "boolean deleteById(Long id);",
              "line": 77,
              "type": "method"
            },
            {
              "name": "findByEmail",
              "snippet": "Optional\u003cUser\u003e findByEmail(String email);",
              "line": 78,
              "type": "method"
            },
            {
              "name": "findAll",
              "snippet": "List\u003cUser\u003e findAll();",
              "line": 79,
              "type": "method"
            },
            {
              "name": "findByStatus",
              "snippet": "List\u003cUser\u003e findByStatus(UserStatus status);",
              "line": 80,
              "type": "method"
            },
            {
              "name": "UserService",
              "snippet": "public interface UserService {\n        User getUser(Long id) throws UserNotFoundException;\n        User createUser(CreateUserRequest request) throws ValidationException, DuplicateEmailException;\n        User updateUser(Long id, UpdateUserRequest request) throws UserNotFoundException, ValidationException;\n        boolean deleteUser(Long id) throws UserNotFoundException;\n        List\u003cUser\u003e listUsers();\n        List\u003cUser\u003e searchUsers(String query);\n    }",
              "line": 83,
              "type": "interface"
            },
            {
              "name": "User",
              "snippet": "User getUser(Long id) throws UserNotFoundException;",
              "line": 84,
              "type": "method"
            },
            {
              "name": "User",
              "snippet": "User createUser(CreateUserRequest request) throws ValidationException, DuplicateEmailException;",
              "line": 85,
              "type": "method"
            },
            {
              "name": "User",
              "snippet": "User updateUser(Long id, UpdateUserRequest request) throws UserNotFoundException, ValidationException;",
              "line": 86,
              "type": "method"
            },
            {
              "name": "deleteUser",
              "snippet": "boolean deleteUser(Long id) throws UserNotFoundException;",
              "line": 87,
              "type": "method"
            },
            {
              "name": "listUsers",
              "snippet": "List\u003cUser\u003e listUsers();",
              "line": 88,
              "type": "method"
            },
            {
              "name": "searchUsers",
              "snippet": "List\u003cUser\u003e searchUsers(String query);",
              "line": 89,
              "type": "method"
            },
            {
              "name": "CreateUserRequest",
              "snippet": "public static class CreateUserRequest {\n        private String name;\n        private String email;\n        private Set\u003cPermission\u003e permissions;\n        private Map\u003cString, String\u003e metadata;\n        \n        public CreateUserRequest() {\n            this.permissions = new HashSet\u003c\u003e();\n            this.metadata = new HashMap\u003c\u003e();\n        }\n        \n        public CreateUserRequest(String name, String email) {\n            this();\n            this.name = name;\n            this.email = email;\n        }\n        \n        // Getters and setters\n        public String getName() { return name; }\n        public void setName(String name) { this.name = name; }\n        \n        public String getEmail() { return email; }\n        public void setEmail(String email) { this.email = email; }\n        \n        public Set\u003cPermission\u003e getPermissions() { return permissions; }\n        public void setPermissions(Set\u003cPermission\u003e permissions) { this.permissions = permissions; }\n        \n        public Map\u003cString, String\u003e getMetadata() { return metadata; }\n        public void setMetadata(Map\u003cString, String\u003e metadata) { this.metadata = metadata; }\n    }",
              "line": 93,
              "type": "class"
            },
            {
              "name": "String",
              "snippet": "private String name;",
              "line": 94,
              "type": "field_declaration"
            },
            {
              "name": "String",
              "snippet": "private String email;",
              "line": 95,
              "type": "field_declaration"
            },
            {
              "name": "CreateUserRequest",
              "snippet": "public CreateUserRequest() {\n            this.permissions = new HashSet\u003c\u003e();\n            this.metadata = new HashMap\u003c\u003e();\n        }",
              "line": 99,
              "type": "struct"
            },
            {
              "name": "CreateUserRequest",
              "snippet": "public CreateUserRequest(String name, String email) {\n            this();\n            this.name = name;\n            this.email = email;\n        }",
              "line": 104,
              "type": "struct"
            },
            {
              "name": "String",
              "snippet": "public String getName() { return name; }",
              "line": 111,
              "type": "method"
            },
            {
              "name": "setName",
              "snippet": "public void setName(String name) { this.name = name; }",
              "line": 112,
              "type": "method"
            },
            {
              "name": "String",
              "snippet": "public String getEmail() { return email; }",
              "line": 114,
              "type": "method"
            },
            {
              "name": "setEmail",
              "snippet": "public void setEmail(String email) { this.email = email; }",
              "line": 115,
              "type": "method"
            },
            {
              "name": "getPermissions",
              "snippet": "public Set\u003cPermission\u003e getPermissions() { return permissions; }",
              "line": 117,
              "type": "method"
            },
            {
              "name": "setPermissions",
              "snippet": "public void setPermissions(Set\u003cPermission\u003e permissions) { this.permissions = permissions; }",
              "line": 118,
              "type": "method"
            },
            {
              "name": "getMetadata",
              "snippet": "public Map\u003cString, String\u003e getMetadata() { return metadata; }",
              "line": 120,
              "type": "method"
            },
            {
              "name": "setMetadata",
              "snippet": "public void setMetadata(Map\u003cString, String\u003e metadata) { this.metadata = metadata; }",
              "line": 121,
              "type": "method"
            },
            {
              "name": "UpdateUserRequest",
              "snippet": "public static class UpdateUserRequest {\n        private String name;\n        private String email;\n        private UserStatus status;\n        private Set\u003cPermission\u003e permissions;\n        \n        // Getters and setters\n        public String getName() { return name; }\n        public void setName(String name) { this.name = name; }\n        \n        public String getEmail() { return email; }\n        public void setEmail(String email) { this.email = email; }\n        \n        public UserStatus getStatus() { return status; }\n        public void setStatus(UserStatus status) { this.status = status; }\n        \n        public Set\u003cPermission\u003e getPermissions() { return permissions; }\n        public void setPermissions(Set\u003cPermission\u003e permissions) { this.permissions = permissions; }\n    }",
              "line": 124,
              "type": "class"
            },
            {
              "name": "String",
              "snippet": "private String name;",
              "line": 125,
              "type": "field_declaration"
            },
            {
              "name": "String",
              "snippet": "private String email;",
              "line": 126,
              "type": "field_declaration"
            },
            {
              "name": "UserStatus",
              "snippet": "private UserStatus status;",
              "line": 127,
              "type": "field_declaration"
            },
            {
              "name": "String",
              "snippet": "public String getName() { return name; }",
              "line": 131,
              "type": "method"
            },
            {
              "name": "setName",
              "snippet": "public void setName(String name) { this.name = name; }",
              "line": 132,
              "type": "method"
            },
            {
              "name": "String",
              "snippet": "public String getEmail() { return email; }",
              "line": 134,
              "type": "method"
            },
            {
              "name": "setEmail",
              "snippet": "public void setEmail(String email) { this.email = email; }",
              "line": 135,
              "type": "method"
            },
            {
              "name": "UserStatus",
              "snippet": "public UserStatus getStatus() { return status; }",
              "line": 137,
              "type": "method"
            },
            {
              "name": "setStatus",
              "snippet": "public void setStatus(UserStatus status) { this.status = status; }",
              "line": 138,
              "type": "method"
            },
            {
              "name": "getPermissions",
              "snippet": "public Set\u003cPermission\u003e getPermissions() { return permissions; }",
              "line": 140,
              "type": "method"
            },
            {
              "name": "setPermissions",
              "snippet": "public void setPermissions(Set\u003cPermission\u003e permissions) { this.permissions = permissions; }",
              "line": 141,
              "type": "method"
            },
            {
              "name": "User",
              "snippet": "public static class User {\n        private Long id;\n        private String name;\n        private String email;\n        private UserStatus status;\n        private LocalDateTime createdAt;\n        private LocalDateTime lastLoginAt;\n        private Set\u003cPermission\u003e permissions;\n        private Map\u003cString, String\u003e metadata;\n        \n        // Constructors\n        public User() {\n            this.status = UserStatus.ACTIVE;\n            this.createdAt = LocalDateTime.now();\n            this.permissions = new HashSet\u003c\u003e();\n            this.metadata = new HashMap\u003c\u003e();\n        }\n        \n        public User(Long id, String name, String email) {\n            this();\n            this.id = id;\n            this.name = name;\n            this.email = email;\n        }\n        \n        public User(String name, String email, Set\u003cPermission\u003e permissions) {\n            this();\n            this.name = name;\n            this.email = email;\n            this.permissions = new HashSet\u003c\u003e(permissions);\n        }\n        \n        // Business methods\n        public void activate() {\n            this.status = UserStatus.ACTIVE;\n        }\n        \n        public void deactivate() {\n            this.status = UserStatus.INACTIVE;\n        }\n        \n        public void suspend() {\n            this.status = UserStatus.SUSPENDED;\n        }\n        \n        public boolean hasPermission(Permission permission) {\n            return permissions.contains(permission) || permissions.contains(Permission.ADMIN);\n        }\n        \n        public void addPermission(Permission permission) {\n            permissions.add(permission);\n        }\n        \n        public void removePermission(Permission permission) {\n            permissions.remove(permission);\n        }\n        \n        public void updateLastLogin() {\n            this.lastLoginAt = LocalDateTime.now();\n        }\n        \n        public String getDisplayName() {\n            return name + \" (\" + email + \")\";\n        }\n        \n        public boolean isActive() {\n            return status == UserStatus.ACTIVE;\n        }\n        \n        // Getters and setters\n        public Long getId() { return id; }\n        public void setId(Long id) { this.id = id; }\n        \n        public String getName() { return name; }\n        public void setName(String name) { this.name = name; }\n        \n        public String getEmail() { return email; }\n        public void setEmail(String email) { this.email = email; }\n        \n        public UserStatus getStatus() { return status; }\n        public void setStatus(UserStatus status) { this.status = status; }\n        \n        public LocalDateTime getCreatedAt() { return createdAt; }\n        public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }\n        \n        public LocalDateTime getLastLoginAt() { return lastLoginAt; }\n        public void setLastLoginAt(LocalDateTime lastLoginAt) { this.lastLoginAt = lastLoginAt; }\n        \n        public Set\u003cPermission\u003e getPermissions() { return permissions; }\n        public void setPermissions(Set\u003cPermission\u003e permissions) { this.permissions = permissions; }\n        \n        public Map\u003cString, String\u003e getMetadata() { return metadata; }\n        public void setMetadata(Map\u003cString, String\u003e metadata) { this.metadata = metadata; }\n        \n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj) return true;\n            if (obj == null || getClass() != obj.getClass()) return false;\n            User user = (User) obj;\n            return Objects.equals(id, user.id);\n        }\n        \n        @Override\n        public int hashCode() {\n            return Objects.hash(id);\n        }\n        \n        @Override\n        public String toString() {\n            return \"User{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                \", email='\" + email + '\\'' +\n                \", status=\" + status +\n                \", createdAt=\" + createdAt +\n                '}';\n        }\n    }",
              "line": 145,
              "type": "class"
            },
            {
              "name": "Long",
              "snippet": "private Long id;",
              "line": 146,
              "type": "field_declaration"
            },
            {
              "name": "String",
              "snippet": "private String name;",
              "line": 147,
              "type": "field_declaration"
            },
            {
              "name": "String",
              "snippet": "private String email;",
              "line": 148,
              "type": "field_declaration"
            },
            {
              "name": "UserStatus",
              "snippet": "private UserStatus status;",
              "line": 149,
              "type": "field_declaration"
            },
            {
              "name": "LocalDateTime",
              "snippet": "private LocalDateTime createdAt;",
              "line": 150,
              "type": "field_declaration"
            },
            {
              "name": "LocalDateTime",
              "snippet": "private LocalDateTime lastLoginAt;",
              "line": 151,
              "type": "field_declaration"
            },
            {
              "name": "User",
              "snippet": "public User() {\n            this.status = UserStatus.ACTIVE;\n            this.createdAt = LocalDateTime.now();\n            this.permissions = new HashSet\u003c\u003e();\n            this.metadata = new HashMap\u003c\u003e();\n        }",
              "line": 156,
              "type": "struct"
            },
            {
              "name": "User",
              "snippet": "public User(Long id, String name, String email) {\n            this();\n            this.id = id;\n            this.name = name;\n            this.email = email;\n        }",
              "line": 163,
              "type": "struct"
            },
            {
              "name": "User",
              "snippet": "public User(String name, String email, Set\u003cPermission\u003e permissions) {\n            this();\n            this.name = name;\n            this.email = email;\n            this.permissions = new HashSet\u003c\u003e(permissions);\n        }",
              "line": 170,
              "type": "struct"
            },
            {
              "name": "activate",
              "snippet": "public void activate() {\n            this.status = UserStatus.ACTIVE;\n        }",
              "line": 178,
              "type": "method"
            },
            {
              "name": "deactivate",
              "snippet": "public void deactivate() {\n            this.status = UserStatus.INACTIVE;\n        }",
              "line": 182,
              "type": "method"
            },
            {
              "name": "suspend",
              "snippet": "public void suspend() {\n            this.status = UserStatus.SUSPENDED;\n        }",
              "line": 186,
              "type": "method"
            },
            {
              "name": "hasPermission",
              "snippet": "public boolean hasPermission(Permission permission) {\n            return permissions.contains(permission) || permissions.contains(Permission.ADMIN);\n        }",
              "line": 190,
              "type": "method"
            },
            {
              "name": "addPermission",
              "snippet": "public void addPermission(Permission permission) {\n            permissions.add(permission);\n        }",
              "line": 194,
              "type": "method"
            },
            {
              "name": "removePermission",
              "snippet": "public void removePermission(Permission permission) {\n            permissions.remove(permission);\n        }",
              "line": 198,
              "type": "method"
            },
            {
              "name": "updateLastLogin",
              "snippet": "public void updateLastLogin() {\n            this.lastLoginAt = LocalDateTime.now();\n        }",
              "line": 202,
              "type": "method"
            },
            {
              "name": "String",
              "snippet": "public String getDisplayName() {\n            return name + \" (\" + email + \")\";\n        }",
              "line": 206,
              "type": "method"
            },
            {
              "name": "isActive",
              "snippet": "public boolean isActive() {\n            return status == UserStatus.ACTIVE;\n        }",
              "line": 210,
              "type": "method"
            },
            {
              "name": "Long",
              "snippet": "public Long getId() { return id; }",
              "line": 215,
              "type": "method"
            },
            {
              "name": "setId",
              "snippet": "public void setId(Long id) { this.id = id; }",
              "line": 216,
              "type": "method"
            },
            {
              "name": "String",
              "snippet": "public String getName() { return name; }",
              "line": 218,
              "type": "method"
            },
            {
              "name": "setName",
              "snippet": "public void setName(String name) { this.name = name; }",
              "line": 219,
              "type": "method"
            },
            {
              "name": "String",
              "snippet": "public String getEmail() { return email; }",
              "line": 221,
              "type": "method"
            },
            {
              "name": "setEmail",
              "snippet": "public void setEmail(String email) { this.email = email; }",
              "line": 222,
              "type": "method"
            },
            {
              "name": "UserStatus",
              "snippet": "public UserStatus getStatus() { return status; }",
              "line": 224,
              "type": "method"
            },
            {
              "name": "setStatus",
              "snippet": "public void setStatus(UserStatus status) { this.status = status; }",
              "line": 225,
              "type": "method"
            },
            {
              "name": "LocalDateTime",
              "snippet": "public LocalDateTime getCreatedAt() { return createdAt; }",
              "line": 227,
              "type": "method"
            },
            {
              "name": "setCreatedAt",
              "snippet": "public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }",
              "line": 228,
              "type": "method"
            },
            {
              "name": "LocalDateTime",
              "snippet": "public LocalDateTime getLastLoginAt() { return lastLoginAt; }",
              "line": 230,
              "type": "method"
            },
            {
              "name": "setLastLoginAt",
              "snippet": "public void setLastLoginAt(LocalDateTime lastLoginAt) { this.lastLoginAt = lastLoginAt; }",
              "line": 231,
              "type": "method"
            },
            {
              "name": "getPermissions",
              "snippet": "public Set\u003cPermission\u003e getPermissions() { return permissions; }",
              "line": 233,
              "type": "method"
            },
            {
              "name": "setPermissions",
              "snippet": "public void setPermissions(Set\u003cPermission\u003e permissions) { this.permissions = permissions; }",
              "line": 234,
              "type": "method"
            },
            {
              "name": "getMetadata",
              "snippet": "public Map\u003cString, String\u003e getMetadata() { return metadata; }",
              "line": 236,
              "type": "method"
            },
            {
              "name": "setMetadata",
              "snippet": "public void setMetadata(Map\u003cString, String\u003e metadata) { this.metadata = metadata; }",
              "line": 237,
              "type": "method"
            },
            {
              "name": "equals",
              "snippet": "@Override\n        public boolean equals(Object obj) {\n            if (this == obj) return true;\n            if (obj == null || getClass() != obj.getClass()) return false;\n            User user = (User) obj;\n            return Objects.equals(id, user.id);\n        }",
              "line": 239,
              "type": "method"
            },
            {
              "name": "User",
              "snippet": "User user = (User) obj;",
              "line": 243,
              "type": "variable"
            },
            {
              "name": "hashCode",
              "snippet": "@Override\n        public int hashCode() {\n            return Objects.hash(id);\n        }",
              "line": 247,
              "type": "method"
            },
            {
              "name": "String",
              "snippet": "@Override\n        public String toString() {\n            return \"User{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                \", email='\" + email + '\\'' +\n                \", status=\" + status +\n                \", createdAt=\" + createdAt +\n                '}';\n        }",
              "line": 252,
              "type": "method"
            },
            {
              "name": "MemoryUserRepository",
              "snippet": "public static class MemoryUserRepository implements UserRepository {\n        private final Map\u003cLong, User\u003e users = new ConcurrentHashMap\u003c\u003e();\n        private long nextId = 1L;\n        \n        @Override\n        public Optional\u003cUser\u003e findById(Long id) {\n            return Optional.ofNullable(users.get(id));\n        }\n        \n        @Override\n        public User save(User user) {\n            if (user.getId() == null) {\n                user.setId(nextId++);\n            }\n            users.put(user.getId(), user);\n            return user;\n        }\n        \n        @Override\n        public boolean deleteById(Long id) {\n            return users.remove(id) != null;\n        }\n        \n        @Override\n        public Optional\u003cUser\u003e findByEmail(String email) {\n            return users.values().stream()\n                .filter(user -\u003e email.equals(user.getEmail()))\n                .findFirst();\n        }\n        \n        @Override\n        public List\u003cUser\u003e findAll() {\n            return new ArrayList\u003c\u003e(users.values());\n        }\n        \n        @Override\n        public List\u003cUser\u003e findByStatus(UserStatus status) {\n            return users.values().stream()\n                .filter(user -\u003e user.getStatus() == status)\n                .collect(Collectors.toList());\n        }\n        \n        public int size() {\n            return users.size();\n        }\n        \n        public void clear() {\n            users.clear();\n            nextId = 1L;\n        }\n    }",
              "line": 265,
              "type": "class"
            },
            {
              "name": "findById",
              "snippet": "@Override\n        public Optional\u003cUser\u003e findById(Long id) {\n            return Optional.ofNullable(users.get(id));\n        }",
              "line": 269,
              "type": "method"
            },
            {
              "name": "User",
              "snippet": "@Override\n        public User save(User user) {\n            if (user.getId() == null) {\n                user.setId(nextId++);\n            }\n            users.put(user.getId(), user);\n            return user;\n        }",
              "line": 274,
              "type": "method"
            },
            {
              "name": "deleteById",
              "snippet": "@Override\n        public boolean deleteById(Long id) {\n            return users.remove(id) != null;\n        }",
              "line": 283,
              "type": "method"
            },
            {
              "name": "findByEmail",
              "snippet": "@Override\n        public Optional\u003cUser\u003e findByEmail(String email) {\n            return users.values().stream()\n                .filter(user -\u003e email.equals(user.getEmail()))\n                .findFirst();\n        }",
              "line": 288,
              "type": "method"
            },
            {
              "name": "findAll",
              "snippet": "@Override\n        public List\u003cUser\u003e findAll() {\n            return new ArrayList\u003c\u003e(users.values());\n        }",
              "line": 295,
              "type": "method"
            },
            {
              "name": "findByStatus",
              "snippet": "@Override\n        public List\u003cUser\u003e findByStatus(UserStatus status) {\n            return users.values().stream()\n                .filter(user -\u003e user.getStatus() == status)\n                .collect(Collectors.toList());\n        }",
              "line": 300,
              "type": "method"
            },
            {
              "name": "size",
              "snippet": "public int size() {\n            return users.size();\n        }",
              "line": 307,
              "type": "method"
            },
            {
              "name": "clear",
              "snippet": "public void clear() {\n            users.clear();\n            nextId = 1L;\n        }",
              "line": 311,
              "type": "method"
            },
            {
              "name": "UserServiceImpl",
              "snippet": "public static class UserServiceImpl implements UserService {\n        private final UserRepository repository;\n        private final Map\u003cLong, User\u003e cache = new ConcurrentHashMap\u003c\u003e();\n        \n        public UserServiceImpl(UserRepository repository) {\n            this.repository = repository;\n        }\n        \n        @Override\n        public User getUser(Long id) throws UserNotFoundException {\n            if (cache.containsKey(id)) {\n                return cache.get(id);\n            }\n            \n            User user = repository.findById(id)\n                .orElseThrow(() -\u003e new UserNotFoundException(id));\n            \n            cache.put(id, user);\n            return user;\n        }\n        \n        @Override\n        public User createUser(CreateUserRequest request) throws ValidationException, DuplicateEmailException {\n            validateCreateRequest(request);\n            \n            if (repository.findByEmail(request.getEmail()).isPresent()) {\n                throw new DuplicateEmailException(request.getEmail());\n            }\n            \n            User user = new User(null, request.getName(), request.getEmail());\n            user.setPermissions(request.getPermissions());\n            user.setMetadata(request.getMetadata());\n            \n            User savedUser = repository.save(user);\n            userCount++;\n            \n            System.out.println(\"Created user: \" + savedUser.getDisplayName());\n            return savedUser;\n        }\n        \n        @Override\n        public User updateUser(Long id, UpdateUserRequest request) throws UserNotFoundException, ValidationException {\n            User user = getUser(id);\n            \n            if (request.getName() != null) {\n                user.setName(request.getName());\n            }\n            if (request.getEmail() != null) {\n                if (!isValidEmail(request.getEmail())) {\n                    throw new ValidationException(\"Invalid email format\");\n                }\n                user.setEmail(request.getEmail());\n            }\n            if (request.getStatus() != null) {\n                user.setStatus(request.getStatus());\n            }\n            if (request.getPermissions() != null) {\n                user.setPermissions(request.getPermissions());\n            }\n            \n            User updatedUser = repository.save(user);\n            cache.put(id, updatedUser);\n            \n            return updatedUser;\n        }\n        \n        @Override\n        public boolean deleteUser(Long id) throws UserNotFoundException {\n            User user = getUser(id);\n            boolean success = repository.deleteById(id);\n            \n            if (success) {\n                cache.remove(id);\n                userCount--;\n                System.out.println(\"Deleted user: \" + user.getDisplayName());\n            }\n            \n            return success;\n        }\n        \n        @Override\n        public List\u003cUser\u003e listUsers() {\n            return repository.findAll().stream()\n                .sorted(Comparator.comparing(User::getCreatedAt))\n                .collect(Collectors.toList());\n        }\n        \n        @Override\n        public List\u003cUser\u003e searchUsers(String query) {\n            String lowerQuery = query.toLowerCase();\n            return repository.findAll().stream()\n                .filter(user -\u003e \n                    user.getName().toLowerCase().contains(lowerQuery) ||\n                    user.getEmail().toLowerCase().contains(lowerQuery))\n                .collect(Collectors.toList());\n        }\n        \n        private void validateCreateRequest(CreateUserRequest request) throws ValidationException {\n            if (request.getName() == null || request.getName().trim().isEmpty()) {\n                throw new ValidationException(\"Name is required\");\n            }\n            if (request.getEmail() == null || !isValidEmail(request.getEmail())) {\n                throw new ValidationException(\"Valid email is required\");\n            }\n        }\n        \n        private boolean isValidEmail(String email) {\n            return email != null \u0026\u0026 email.matches(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}$\");\n        }\n    }",
              "line": 318,
              "type": "class"
            },
            {
              "name": "UserRepository",
              "snippet": "private final UserRepository repository;",
              "line": 319,
              "type": "field_declaration"
            },
            {
              "name": "UserServiceImpl",
              "snippet": "public UserServiceImpl(UserRepository repository) {\n            this.repository = repository;\n        }",
              "line": 322,
              "type": "struct"
            },
            {
              "name": "User",
              "snippet": "@Override\n        public User getUser(Long id) throws UserNotFoundException {\n            if (cache.containsKey(id)) {\n                return cache.get(id);\n            }\n            \n            User user = repository.findById(id)\n                .orElseThrow(() -\u003e new UserNotFoundException(id));\n            \n            cache.put(id, user);\n            return user;\n        }",
              "line": 326,
              "type": "method"
            },
            {
              "name": "User",
              "snippet": "User user = repository.findById(id)\n                .orElseThrow(() -\u003e new UserNotFoundException(id));",
              "line": 332,
              "type": "variable"
            },
            {
              "name": "User",
              "snippet": "@Override\n        public User createUser(CreateUserRequest request) throws ValidationException, DuplicateEmailException {\n            validateCreateRequest(request);\n            \n            if (repository.findByEmail(request.getEmail()).isPresent()) {\n                throw new DuplicateEmailException(request.getEmail());\n            }\n            \n            User user = new User(null, request.getName(), request.getEmail());\n            user.setPermissions(request.getPermissions());\n            user.setMetadata(request.getMetadata());\n            \n            User savedUser = repository.save(user);\n            userCount++;\n            \n            System.out.println(\"Created user: \" + savedUser.getDisplayName());\n            return savedUser;\n        }",
              "line": 339,
              "type": "method"
            },
            {
              "name": "User",
              "snippet": "User user = new User(null, request.getName(), request.getEmail());",
              "line": 347,
              "type": "variable"
            },
            {
              "name": "User",
              "snippet": "User savedUser = repository.save(user);",
              "line": 351,
              "type": "variable"
            },
            {
              "name": "User",
              "snippet": "@Override\n        public User updateUser(Long id, UpdateUserRequest request) throws UserNotFoundException, ValidationException {\n            User user = getUser(id);\n            \n            if (request.getName() != null) {\n                user.setName(request.getName());\n            }\n            if (request.getEmail() != null) {\n                if (!isValidEmail(request.getEmail())) {\n                    throw new ValidationException(\"Invalid email format\");\n                }\n                user.setEmail(request.getEmail());\n            }\n            if (request.getStatus() != null) {\n                user.setStatus(request.getStatus());\n            }\n            if (request.getPermissions() != null) {\n                user.setPermissions(request.getPermissions());\n            }\n            \n            User updatedUser = repository.save(user);\n            cache.put(id, updatedUser);\n            \n            return updatedUser;\n        }",
              "line": 358,
              "type": "method"
            },
            {
              "name": "User",
              "snippet": "User user = getUser(id);",
              "line": 360,
              "type": "variable"
            },
            {
              "name": "User",
              "snippet": "User updatedUser = repository.save(user);",
              "line": 378,
              "type": "variable"
            },
            {
              "name": "deleteUser",
              "snippet": "@Override\n        public boolean deleteUser(Long id) throws UserNotFoundException {\n            User user = getUser(id);\n            boolean success = repository.deleteById(id);\n            \n            if (success) {\n                cache.remove(id);\n                userCount--;\n                System.out.println(\"Deleted user: \" + user.getDisplayName());\n            }\n            \n            return success;\n        }",
              "line": 384,
              "type": "method"
            },
            {
              "name": "User",
              "snippet": "User user = getUser(id);",
              "line": 386,
              "type": "variable"
            },
            {
              "name": "listUsers",
              "snippet": "@Override\n        public List\u003cUser\u003e listUsers() {\n            return repository.findAll().stream()\n                .sorted(Comparator.comparing(User::getCreatedAt))\n                .collect(Collectors.toList());\n        }",
              "line": 398,
              "type": "method"
            },
            {
              "name": "searchUsers",
              "snippet": "@Override\n        public List\u003cUser\u003e searchUsers(String query) {\n            String lowerQuery = query.toLowerCase();\n            return repository.findAll().stream()\n                .filter(user -\u003e \n                    user.getName().toLowerCase().contains(lowerQuery) ||\n                    user.getEmail().toLowerCase().contains(lowerQuery))\n                .collect(Collectors.toList());\n        }",
              "line": 405,
              "type": "method"
            },
            {
              "name": "String",
              "snippet": "String lowerQuery = query.toLowerCase();",
              "line": 407,
              "type": "variable"
            },
            {
              "name": "validateCreateRequest",
              "snippet": "private void validateCreateRequest(CreateUserRequest request) throws ValidationException {\n            if (request.getName() == null || request.getName().trim().isEmpty()) {\n                throw new ValidationException(\"Name is required\");\n            }\n            if (request.getEmail() == null || !isValidEmail(request.getEmail())) {\n                throw new ValidationException(\"Valid email is required\");\n            }\n        }",
              "line": 415,
              "type": "method"
            },
            {
              "name": "isValidEmail",
              "snippet": "private boolean isValidEmail(String email) {\n            return email != null \u0026\u0026 email.matches(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}$\");\n        }",
              "line": 424,
              "type": "method"
            },
            {
              "name": "UserManager",
              "snippet": "public static class UserManager {\n        private final UserService userService;\n        \n        public UserManager(UserService userService) {\n            this.userService = userService;\n        }\n        \n        public List\u003cUser\u003e bulkCreateUsers(List\u003cCreateUserRequest\u003e requests) {\n            List\u003cUser\u003e createdUsers = new ArrayList\u003c\u003e();\n            \n            for (CreateUserRequest request : requests) {\n                try {\n                    User user = userService.createUser(request);\n                    createdUsers.add(user);\n                } catch (Exception e) {\n                    System.err.println(\"Failed to create user \" + request.getName() + \": \" + e.getMessage());\n                }\n            }\n            \n            return createdUsers;\n        }\n        \n        public Map\u003cString, Integer\u003e getUserStats() {\n            List\u003cUser\u003e users = userService.listUsers();\n            Map\u003cString, Integer\u003e stats = new HashMap\u003c\u003e();\n            \n            stats.put(\"total\", users.size());\n            stats.put(\"active\", (int) users.stream().filter(User::isActive).count());\n            stats.put(\"inactive\", (int) users.stream().filter(u -\u003e u.getStatus() == UserStatus.INACTIVE).count());\n            stats.put(\"suspended\", (int) users.stream().filter(u -\u003e u.getStatus() == UserStatus.SUSPENDED).count());\n            \n            return stats;\n        }\n        \n        public String exportUsers() {\n            List\u003cUser\u003e users = userService.listUsers();\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"ID,Name,Email,Status,Created At\\n\");\n            \n            for (User user : users) {\n                sb.append(user.getId()).append(\",\")\n                  .append(user.getName()).append(\",\")\n                  .append(user.getEmail()).append(\",\")\n                  .append(user.getStatus().getValue()).append(\",\")\n                  .append(user.getCreatedAt().format(DATE_FORMATTER))\n                  .append(\"\\n\");\n            }\n            \n            return sb.toString();\n        }\n    }",
              "line": 430,
              "type": "class"
            },
            {
              "name": "UserService",
              "snippet": "private final UserService userService;",
              "line": 431,
              "type": "field_declaration"
            },
            {
              "name": "UserManager",
              "snippet": "public UserManager(UserService userService) {\n            this.userService = userService;\n        }",
              "line": 433,
              "type": "struct"
            },
            {
              "name": "bulkCreateUsers",
              "snippet": "public List\u003cUser\u003e bulkCreateUsers(List\u003cCreateUserRequest\u003e requests) {\n            List\u003cUser\u003e createdUsers = new ArrayList\u003c\u003e();\n            \n            for (CreateUserRequest request : requests) {\n                try {\n                    User user = userService.createUser(request);\n                    createdUsers.add(user);\n                } catch (Exception e) {\n                    System.err.println(\"Failed to create user \" + request.getName() + \": \" + e.getMessage());\n                }\n            }\n            \n            return createdUsers;\n        }",
              "line": 437,
              "type": "method"
            },
            {
              "name": "User",
              "snippet": "User user = userService.createUser(request);",
              "line": 442,
              "type": "variable"
            },
            {
              "name": "getUserStats",
              "snippet": "public Map\u003cString, Integer\u003e getUserStats() {\n            List\u003cUser\u003e users = userService.listUsers();\n            Map\u003cString, Integer\u003e stats = new HashMap\u003c\u003e();\n            \n            stats.put(\"total\", users.size());\n            stats.put(\"active\", (int) users.stream().filter(User::isActive).count());\n            stats.put(\"inactive\", (int) users.stream().filter(u -\u003e u.getStatus() == UserStatus.INACTIVE).count());\n            stats.put(\"suspended\", (int) users.stream().filter(u -\u003e u.getStatus() == UserStatus.SUSPENDED).count());\n            \n            return stats;\n        }",
              "line": 452,
              "type": "method"
            },
            {
              "name": "String",
              "snippet": "public String exportUsers() {\n            List\u003cUser\u003e users = userService.listUsers();\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"ID,Name,Email,Status,Created At\\n\");\n            \n            for (User user : users) {\n                sb.append(user.getId()).append(\",\")\n                  .append(user.getName()).append(\",\")\n                  .append(user.getEmail()).append(\",\")\n                  .append(user.getStatus().getValue()).append(\",\")\n                  .append(user.getCreatedAt().format(DATE_FORMATTER))\n                  .append(\"\\n\");\n            }\n            \n            return sb.toString();\n        }",
              "line": 464,
              "type": "method"
            },
            {
              "name": "StringBuilder",
              "snippet": "StringBuilder sb = new StringBuilder();",
              "line": 466,
              "type": "variable"
            },
            {
              "name": "UserService",
              "snippet": "public static UserService createUserService() {\n        UserRepository repository = new MemoryUserRepository();\n        return new UserServiceImpl(repository);\n    }",
              "line": 483,
              "type": "method"
            },
            {
              "name": "UserRepository",
              "snippet": "UserRepository repository = new MemoryUserRepository();",
              "line": 484,
              "type": "variable"
            },
            {
              "name": "initializeSystem",
              "snippet": "public static void initializeSystem() {\n        isInitialized = true;\n        userCount = 0;\n        System.out.println(\"User management system initialized\");\n    }",
              "line": 488,
              "type": "method"
            },
            {
              "name": "main",
              "snippet": "public static void main(String[] args) {\n        try {\n            initializeSystem();\n            \n            UserService service = createUserService();\n            UserManager manager = new UserManager(service);\n            \n            // Create test users\n            List\u003cCreateUserRequest\u003e requests = Arrays.asList(\n                new CreateUserRequest(\"Alice Johnson\", \"alice@example.com\"),\n                new CreateUserRequest(\"Bob Smith\", \"bob@example.com\"),\n                new CreateUserRequest(\"Charlie Brown\", \"charlie@example.com\")\n            );\n            \n            List\u003cUser\u003e createdUsers = manager.bulkCreateUsers(requests);\n            System.out.println(\"Created \" + createdUsers.size() + \" users\");\n            \n            // Get stats\n            Map\u003cString, Integer\u003e stats = manager.getUserStats();\n            System.out.println(\"User statistics: \" + stats);\n            \n            // Export users\n            String exportData = manager.exportUsers();\n            System.out.println(\"Exported data:\\n\" + exportData);\n            \n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }",
              "line": 495,
              "type": "method"
            },
            {
              "name": "UserService",
              "snippet": "UserService service = createUserService();",
              "line": 499,
              "type": "variable"
            },
            {
              "name": "UserManager",
              "snippet": "UserManager manager = new UserManager(service);",
              "line": 500,
              "type": "variable"
            },
            {
              "name": "String",
              "snippet": "String exportData = manager.exportUsers();",
              "line": 517,
              "type": "variable"
            }
          ],
          "file_path": "test/example.java",
          "start_line": 12,
          "end_line": 524
        },
        {
          "symbol_name": "DuplicateEmailException",
          "symbol_type": "struct",
          "full_code": "        public DuplicateEmailException(String email) {\n            super(\"User with email \" + email + \" already exists\");\n        }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 68,
          "end_line": 70
        },
        {
          "symbol_name": "initializeSystem",
          "symbol_type": "method",
          "full_code": "    public static void initializeSystem() {\n        isInitialized = true;\n        userCount = 0;\n        System.out.println(\"User management system initialized\");\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 488,
          "end_line": 492
        },
        {
          "symbol_name": "LnV0aWwuc3RyZWFtLkNvbGxlY3RvcnM7CgovKioKICogVXNlciBtYW5hZ2Vt",
          "symbol_type": "variable",
          "full_code": "LnV0aWwuc3RyZWFtLkNvbGxlY3RvcnM7CgovKioKICogVXNlciBtYW5hZ2Vt\nZW50IHN5c3RlbSBpbiBKYXZhCiAqLwpwdWJsaWMgY2xhc3MgVXNlck1hbmFn",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 5,
          "end_line": 6
        },
        {
          "symbol_name": "KSB7CiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzLmdldFZhbHVlKCkuZXF1",
          "symbol_type": "variable",
          "full_code": "KSB7CiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzLmdldFZhbHVlKCkuZXF1",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 26,
          "end_line": 26
        },
        {
          "symbol_name": "setCreatedAt",
          "symbol_type": "method",
          "full_code": "        public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 228,
          "end_line": 228
        },
        {
          "symbol_name": "getUserStats",
          "symbol_type": "method",
          "full_code": "        public Map\u003cString, Integer\u003e getUserStats() {\n            List\u003cUser\u003e users = userService.listUsers();\n            Map\u003cString, Integer\u003e stats = new HashMap\u003c\u003e();\n            \n            stats.put(\"total\", users.size());\n            stats.put(\"active\", (int) users.stream().filter(User::isActive).count());\n            stats.put(\"inactive\", (int) users.stream().filter(u -\u003e u.getStatus() == UserStatus.INACTIVE).count());\n            stats.put(\"suspended\", (int) users.stream().filter(u -\u003e u.getStatus() == UserStatus.SUSPENDED).count());\n            \n            return stats;\n        }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 452,
          "end_line": 462
        },
        {
          "symbol_name": "UserService",
          "symbol_type": "variable",
          "full_code": "            UserService service = createUserService();",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 499,
          "end_line": 499
        },
        {
          "symbol_name": "ICAgdGhyb3cgbmV3IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbigiVW5rbm93",
          "symbol_type": "variable",
          "full_code": "ICAgdGhyb3cgbmV3IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbigiVW5rbm93\nbiBzdGF0dXM6ICIgKyB2YWx1ZSk7CiAgICAgICAgfQogICAgfQogICAgCiAg",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 29,
          "end_line": 30
        },
        {
          "symbol_name": "findById",
          "symbol_type": "method",
          "full_code": "        Optional\u003cUser\u003e findById(Long id);",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 75,
          "end_line": 75
        },
        {
          "symbol_name": "setPermissions",
          "symbol_type": "method",
          "full_code": "        public void setPermissions(Set\u003cPermission\u003e permissions) { this.permissions = permissions; }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 118,
          "end_line": 118
        },
        {
          "symbol_name": "UpdateUserRequest",
          "symbol_type": "class",
          "full_code": "    public static class UpdateUserRequest {\n        private String name;\n        private String email;\n        private UserStatus status;\n        private Set\u003cPermission\u003e permissions;\n        \n        // Getters and setters\n        public String getName() { return name; }\n        public void setName(String name) { this.name = name; }\n        \n        public String getEmail() { return email; }\n        public void setEmail(String email) { this.email = email; }\n        \n        public UserStatus getStatus() { return status; }\n        public void setStatus(UserStatus status) { this.status = status; }\n        \n        public Set\u003cPermission\u003e getPermissions() { return permissions; }\n        public void setPermissions(Set\u003cPermission\u003e permissions) { this.permissions = permissions; }\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "String",
              "snippet": "private String name;",
              "line": 125,
              "type": "field_declaration"
            },
            {
              "name": "String",
              "snippet": "private String email;",
              "line": 126,
              "type": "field_declaration"
            },
            {
              "name": "UserStatus",
              "snippet": "private UserStatus status;",
              "line": 127,
              "type": "field_declaration"
            },
            {
              "name": "String",
              "snippet": "public String getName() { return name; }",
              "line": 131,
              "type": "method"
            },
            {
              "name": "setName",
              "snippet": "public void setName(String name) { this.name = name; }",
              "line": 132,
              "type": "method"
            },
            {
              "name": "String",
              "snippet": "public String getEmail() { return email; }",
              "line": 134,
              "type": "method"
            },
            {
              "name": "setEmail",
              "snippet": "public void setEmail(String email) { this.email = email; }",
              "line": 135,
              "type": "method"
            },
            {
              "name": "UserStatus",
              "snippet": "public UserStatus getStatus() { return status; }",
              "line": 137,
              "type": "method"
            },
            {
              "name": "setStatus",
              "snippet": "public void setStatus(UserStatus status) { this.status = status; }",
              "line": 138,
              "type": "method"
            },
            {
              "name": "getPermissions",
              "snippet": "public Set\u003cPermission\u003e getPermissions() { return permissions; }",
              "line": 140,
              "type": "method"
            },
            {
              "name": "setPermissions",
              "snippet": "public void setPermissions(Set\u003cPermission\u003e permissions) { this.permissions = permissions; }",
              "line": 141,
              "type": "method"
            }
          ],
          "file_path": "test/example.java",
          "start_line": 124,
          "end_line": 142
        },
        {
          "symbol_name": "setStatus",
          "symbol_type": "method",
          "full_code": "        public void setStatus(UserStatus status) { this.status = status; }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 138,
          "end_line": 138
        },
        {
          "symbol_name": "hashCode",
          "symbol_type": "method",
          "full_code": "        @Override\n        public int hashCode() {\n            return Objects.hash(id);\n        }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 247,
          "end_line": 250
        },
        {
          "symbol_name": "UserStatus",
          "symbol_type": "enum",
          "full_code": "    public enum UserStatus {\n        ACTIVE(\"active\"),\n        INACTIVE(\"inactive\"),\n        SUSPENDED(\"suspended\"),\n        DELETED(\"deleted\");\n        \n        private final String value;\n        \n        UserStatus(String value) {\n            this.value = value;\n        }\n        \n        public String getValue() {\n            return value;\n        }\n        \n        public static UserStatus fromString(String value) {\n            for (UserStatus status : UserStatus.values()) {\n                if (status.getValue().equals(value)) {\n                    return status;\n                }\n            }\n            throw new IllegalArgumentException(\"Unknown status: \" + value);\n        }\n    }",
          "doc_comment": "// Enums",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "String",
              "snippet": "private final String value;",
              "line": 30,
              "type": "field_declaration"
            },
            {
              "name": "UserStatus",
              "snippet": "UserStatus(String value) {\n            this.value = value;\n        }",
              "line": 32,
              "type": "struct"
            },
            {
              "name": "String",
              "snippet": "public String getValue() {\n            return value;\n        }",
              "line": 36,
              "type": "method"
            },
            {
              "name": "UserStatus",
              "snippet": "public static UserStatus fromString(String value) {\n            for (UserStatus status : UserStatus.values()) {\n                if (status.getValue().equals(value)) {\n                    return status;\n                }\n            }\n            throw new IllegalArgumentException(\"Unknown status: \" + value);\n        }",
              "line": 40,
              "type": "method"
            }
          ],
          "file_path": "test/example.java",
          "start_line": 24,
          "end_line": 48
        },
        {
          "symbol_name": "ZW50IHN5c3RlbSBpbiBKYXZhCiAqLwpwdWJsaWMgY2xhc3MgVXNlck1hbmFn",
          "symbol_type": "variable",
          "full_code": "ZW50IHN5c3RlbSBpbiBKYXZhCiAqLwpwdWJsaWMgY2xhc3MgVXNlck1hbmFn",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 6,
          "end_line": 6
        },
        {
          "symbol_name": "ICAgICAgQUNUSVZFKCJhY3RpdmUiKSwKICAgICAgICBJTkFDVElWRSgiaW5h",
          "symbol_type": "variable",
          "full_code": "ICAgICAgQUNUSVZFKCJhY3RpdmUiKSwKICAgICAgICBJTkFDVElWRSgiaW5h",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 16,
          "end_line": 16
        },
        {
          "symbol_name": "U3RhdHVzIGZyb21TdHJpbmcoU3RyaW5nIHZhbHVlKSB7CiAgICAgICAgICAg",
          "symbol_type": "variable",
          "full_code": "U3RhdHVzIGZyb21TdHJpbmcoU3RyaW5nIHZhbHVlKSB7CiAgICAgICAgICAg",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 24,
          "end_line": 24
        },
        {
          "symbol_name": "IGZvciAoVXNlclN0YXR1cyBzdGF0dXMgOiBVc2VyU3RhdHVzLnZhbHVlcygp",
          "symbol_type": "variable",
          "full_code": "IGZvciAoVXNlclN0YXR1cyBzdGF0dXMgOiBVc2VyU3RhdHVzLnZhbHVlcygp\nKSB7CiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzLmdldFZhbHVlKCkuZXF1",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 25,
          "end_line": 26
        },
        {
          "symbol_name": "biBzdGF0dXM6ICIgKyB2YWx1ZSk7CiAgICAgICAgfQogICAgfQogICAgCiAg",
          "symbol_type": "variable",
          "full_code": "biBzdGF0dXM6ICIgKyB2YWx1ZSk7CiAgICAgICAgfQogICAgfQogICAgCiAg",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 30,
          "end_line": 30
        },
        {
          "symbol_name": "User",
          "symbol_type": "struct",
          "full_code": "        public User() {\n            this.status = UserStatus.ACTIVE;\n            this.createdAt = LocalDateTime.now();\n            this.permissions = new HashSet\u003c\u003e();\n            this.metadata = new HashMap\u003c\u003e();\n        }",
          "doc_comment": "// Constructors",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 156,
          "end_line": 161
        },
        {
          "symbol_name": "ICAgICAgIE9wdGlvbmFsPFVzZXI",
          "symbol_type": "variable",
          "full_code": "ICAgICAgIE9wdGlvbmFsPFVzZXI+IGZpbmRCeUVtYWlsKFN0cmluZyBlbWFp",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 50,
          "end_line": 50
        },
        {
          "symbol_name": "Permission",
          "symbol_type": "enum",
          "full_code": "    public enum Permission {\n        READ, WRITE, DELETE, ADMIN\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 50,
          "end_line": 52
        },
        {
          "symbol_name": "ValidationException",
          "symbol_type": "struct",
          "full_code": "        public ValidationException(String message) {\n            super(\"Validation error: \" + message);\n        }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 62,
          "end_line": 64
        },
        {
          "symbol_name": "listUsers",
          "symbol_type": "method",
          "full_code": "        List\u003cUser\u003e listUsers();",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 88,
          "end_line": 88
        },
        {
          "symbol_name": "suspend",
          "symbol_type": "method",
          "full_code": "        public void suspend() {\n            this.status = UserStatus.SUSPENDED;\n        }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 186,
          "end_line": 188
        },
        {
          "symbol_name": "IGNsYXNzIER1cGxpY2F0ZUVtYWlsRXhjZXB0aW9uIGV4dGVuZHMgRXhjZXB0",
          "symbol_type": "variable",
          "full_code": "IGNsYXNzIER1cGxpY2F0ZUVtYWlsRXhjZXB0aW9uIGV4dGVuZHMgRXhjZXB0",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 42,
          "end_line": 42
        },
        {
          "symbol_name": "UserNotFoundException",
          "symbol_type": "class",
          "full_code": "    public static class UserNotFoundException extends Exception {\n        public UserNotFoundException(Long id) {\n            super(\"User with ID \" + id + \" not found\");\n        }\n    }",
          "doc_comment": "// Exception classes",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "UserNotFoundException",
              "snippet": "public UserNotFoundException(Long id) {\n            super(\"User with ID \" + id + \" not found\");\n        }",
              "line": 56,
              "type": "struct"
            }
          ],
          "file_path": "test/example.java",
          "start_line": 55,
          "end_line": 59
        },
        {
          "symbol_name": "UserServiceImpl",
          "symbol_type": "class",
          "full_code": "    public static class UserServiceImpl implements UserService {\n        private final UserRepository repository;\n        private final Map\u003cLong, User\u003e cache = new ConcurrentHashMap\u003c\u003e();\n        \n        public UserServiceImpl(UserRepository repository) {\n            this.repository = repository;\n        }\n        \n        @Override\n        public User getUser(Long id) throws UserNotFoundException {\n            if (cache.containsKey(id)) {\n                return cache.get(id);\n            }\n            \n            User user = repository.findById(id)\n                .orElseThrow(() -\u003e new UserNotFoundException(id));\n            \n            cache.put(id, user);\n            return user;\n        }\n        \n        @Override\n        public User createUser(CreateUserRequest request) throws ValidationException, DuplicateEmailException {\n            validateCreateRequest(request);\n            \n            if (repository.findByEmail(request.getEmail()).isPresent()) {\n                throw new DuplicateEmailException(request.getEmail());\n            }\n            \n            User user = new User(null, request.getName(), request.getEmail());\n            user.setPermissions(request.getPermissions());\n            user.setMetadata(request.getMetadata());\n            \n            User savedUser = repository.save(user);\n            userCount++;\n            \n            System.out.println(\"Created user: \" + savedUser.getDisplayName());\n            return savedUser;\n        }\n        \n        @Override\n        public User updateUser(Long id, UpdateUserRequest request) throws UserNotFoundException, ValidationException {\n            User user = getUser(id);\n            \n            if (request.getName() != null) {\n                user.setName(request.getName());\n            }\n            if (request.getEmail() != null) {\n                if (!isValidEmail(request.getEmail())) {\n                    throw new ValidationException(\"Invalid email format\");\n                }\n                user.setEmail(request.getEmail());\n            }\n            if (request.getStatus() != null) {\n                user.setStatus(request.getStatus());\n            }\n            if (request.getPermissions() != null) {\n                user.setPermissions(request.getPermissions());\n            }\n            \n            User updatedUser = repository.save(user);\n            cache.put(id, updatedUser);\n            \n            return updatedUser;\n        }\n        \n        @Override\n        public boolean deleteUser(Long id) throws UserNotFoundException {\n            User user = getUser(id);\n            boolean success = repository.deleteById(id);\n            \n            if (success) {\n                cache.remove(id);\n                userCount--;\n                System.out.println(\"Deleted user: \" + user.getDisplayName());\n            }\n            \n            return success;\n        }\n        \n        @Override\n        public List\u003cUser\u003e listUsers() {\n            return repository.findAll().stream()\n                .sorted(Comparator.comparing(User::getCreatedAt))\n                .collect(Collectors.toList());\n        }\n        \n        @Override\n        public List\u003cUser\u003e searchUsers(String query) {\n            String lowerQuery = query.toLowerCase();\n            return repository.findAll().stream()\n                .filter(user -\u003e \n                    user.getName().toLowerCase().contains(lowerQuery) ||\n                    user.getEmail().toLowerCase().contains(lowerQuery))\n                .collect(Collectors.toList());\n        }\n        \n        private void validateCreateRequest(CreateUserRequest request) throws ValidationException {\n            if (request.getName() == null || request.getName().trim().isEmpty()) {\n                throw new ValidationException(\"Name is required\");\n            }\n            if (request.getEmail() == null || !isValidEmail(request.getEmail())) {\n                throw new ValidationException(\"Valid email is required\");\n            }\n        }\n        \n        private boolean isValidEmail(String email) {\n            return email != null \u0026\u0026 email.matches(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}$\");\n        }\n    }",
          "doc_comment": "// Service implementation",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "UserRepository",
              "snippet": "private final UserRepository repository;",
              "line": 319,
              "type": "field_declaration"
            },
            {
              "name": "UserServiceImpl",
              "snippet": "public UserServiceImpl(UserRepository repository) {\n            this.repository = repository;\n        }",
              "line": 322,
              "type": "struct"
            },
            {
              "name": "User",
              "snippet": "@Override\n        public User getUser(Long id) throws UserNotFoundException {\n            if (cache.containsKey(id)) {\n                return cache.get(id);\n            }\n            \n            User user = repository.findById(id)\n                .orElseThrow(() -\u003e new UserNotFoundException(id));\n            \n            cache.put(id, user);\n            return user;\n        }",
              "line": 326,
              "type": "method"
            },
            {
              "name": "User",
              "snippet": "User user = repository.findById(id)\n                .orElseThrow(() -\u003e new UserNotFoundException(id));",
              "line": 332,
              "type": "variable"
            },
            {
              "name": "User",
              "snippet": "@Override\n        public User createUser(CreateUserRequest request) throws ValidationException, DuplicateEmailException {\n            validateCreateRequest(request);\n            \n            if (repository.findByEmail(request.getEmail()).isPresent()) {\n                throw new DuplicateEmailException(request.getEmail());\n            }\n            \n            User user = new User(null, request.getName(), request.getEmail());\n            user.setPermissions(request.getPermissions());\n            user.setMetadata(request.getMetadata());\n            \n            User savedUser = repository.save(user);\n            userCount++;\n            \n            System.out.println(\"Created user: \" + savedUser.getDisplayName());\n            return savedUser;\n        }",
              "line": 339,
              "type": "method"
            },
            {
              "name": "User",
              "snippet": "User user = new User(null, request.getName(), request.getEmail());",
              "line": 347,
              "type": "variable"
            },
            {
              "name": "User",
              "snippet": "User savedUser = repository.save(user);",
              "line": 351,
              "type": "variable"
            },
            {
              "name": "User",
              "snippet": "@Override\n        public User updateUser(Long id, UpdateUserRequest request) throws UserNotFoundException, ValidationException {\n            User user = getUser(id);\n            \n            if (request.getName() != null) {\n                user.setName(request.getName());\n            }\n            if (request.getEmail() != null) {\n                if (!isValidEmail(request.getEmail())) {\n                    throw new ValidationException(\"Invalid email format\");\n                }\n                user.setEmail(request.getEmail());\n            }\n            if (request.getStatus() != null) {\n                user.setStatus(request.getStatus());\n            }\n            if (request.getPermissions() != null) {\n                user.setPermissions(request.getPermissions());\n            }\n            \n            User updatedUser = repository.save(user);\n            cache.put(id, updatedUser);\n            \n            return updatedUser;\n        }",
              "line": 358,
              "type": "method"
            },
            {
              "name": "User",
              "snippet": "User user = getUser(id);",
              "line": 360,
              "type": "variable"
            },
            {
              "name": "User",
              "snippet": "User updatedUser = repository.save(user);",
              "line": 378,
              "type": "variable"
            },
            {
              "name": "deleteUser",
              "snippet": "@Override\n        public boolean deleteUser(Long id) throws UserNotFoundException {\n            User user = getUser(id);\n            boolean success = repository.deleteById(id);\n            \n            if (success) {\n                cache.remove(id);\n                userCount--;\n                System.out.println(\"Deleted user: \" + user.getDisplayName());\n            }\n            \n            return success;\n        }",
              "line": 384,
              "type": "method"
            },
            {
              "name": "User",
              "snippet": "User user = getUser(id);",
              "line": 386,
              "type": "variable"
            },
            {
              "name": "listUsers",
              "snippet": "@Override\n        public List\u003cUser\u003e listUsers() {\n            return repository.findAll().stream()\n                .sorted(Comparator.comparing(User::getCreatedAt))\n                .collect(Collectors.toList());\n        }",
              "line": 398,
              "type": "method"
            },
            {
              "name": "searchUsers",
              "snippet": "@Override\n        public List\u003cUser\u003e searchUsers(String query) {\n            String lowerQuery = query.toLowerCase();\n            return repository.findAll().stream()\n                .filter(user -\u003e \n                    user.getName().toLowerCase().contains(lowerQuery) ||\n                    user.getEmail().toLowerCase().contains(lowerQuery))\n                .collect(Collectors.toList());\n        }",
              "line": 405,
              "type": "method"
            },
            {
              "name": "String",
              "snippet": "String lowerQuery = query.toLowerCase();",
              "line": 407,
              "type": "variable"
            },
            {
              "name": "validateCreateRequest",
              "snippet": "private void validateCreateRequest(CreateUserRequest request) throws ValidationException {\n            if (request.getName() == null || request.getName().trim().isEmpty()) {\n                throw new ValidationException(\"Name is required\");\n            }\n            if (request.getEmail() == null || !isValidEmail(request.getEmail())) {\n                throw new ValidationException(\"Valid email is required\");\n            }\n        }",
              "line": 415,
              "type": "method"
            },
            {
              "name": "isValidEmail",
              "snippet": "private boolean isValidEmail(String email) {\n            return email != null \u0026\u0026 email.matches(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}$\");\n        }",
              "line": 424,
              "type": "method"
            }
          ],
          "file_path": "test/example.java",
          "start_line": 318,
          "end_line": 427
        },
        {
          "symbol_name": "dGlsLmNvbmN1cnJlbnQuQ29uY3VycmVudEhhc2hNYXA7CmltcG9ydCBqYXZh",
          "symbol_type": "variable",
          "full_code": "dGlsLmNvbmN1cnJlbnQuQ29uY3VycmVudEhhc2hNYXA7CmltcG9ydCBqYXZh",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 4,
          "end_line": 4
        },
        {
          "symbol_name": "YXRlIGZpbmFsIFN0cmluZyB2YWx1ZTsKICAgICAgICAKICAgICAgICBVc2Vy",
          "symbol_type": "variable",
          "full_code": "YXRlIGZpbmFsIFN0cmluZyB2YWx1ZTsKICAgICAgICAKICAgICAgICBVc2Vy\nU3RhdHVzKFN0cmluZyB2YWx1ZSkgewogICAgICAgICAgICB0aGlzLnZhbHVl",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 19,
          "end_line": 20
        },
        {
          "symbol_name": "c2VyTm90Rm91bmRFeGNlcHRpb24oTG9uZyBpZCkgewogICAgICAgICAgICBz",
          "symbol_type": "variable",
          "full_code": "c2VyTm90Rm91bmRFeGNlcHRpb24oTG9uZyBpZCkgewogICAgICAgICAgICBz\ndXBlcigiVXNlciB3aXRoIElEICIgKyBpZCArICIgbm90IGZvdW5kIik7CiAg",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 35,
          "end_line": 36
        },
        {
          "symbol_name": "searchUsers",
          "symbol_type": "method",
          "full_code": "        List\u003cUser\u003e searchUsers(String query);",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 89,
          "end_line": 89
        },
        {
          "symbol_name": "LocalDateTime",
          "symbol_type": "method",
          "full_code": "        public LocalDateTime getCreatedAt() { return createdAt; }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 227,
          "end_line": 227
        },
        {
          "symbol_name": "UserService",
          "symbol_type": "method",
          "full_code": "    public static UserService createUserService() {\n        UserRepository repository = new MemoryUserRepository();\n        return new UserServiceImpl(repository);\n    }",
          "doc_comment": "// Utility methods",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 483,
          "end_line": 486
        },
        {
          "symbol_name": "IH0KICAgIH0KICAgIAogICAgLy8gSW50ZXJmYWNlcwogICAgcHVibGljIGlu",
          "symbol_type": "variable",
          "full_code": "IH0KICAgIH0KICAgIAogICAgLy8gSW50ZXJmYWNlcwogICAgcHVibGljIGlu",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 46,
          "end_line": 46
        },
        {
          "symbol_name": "DuplicateEmailException",
          "symbol_type": "class",
          "full_code": "    public static class DuplicateEmailException extends Exception {\n        public DuplicateEmailException(String email) {\n            super(\"User with email \" + email + \" already exists\");\n        }\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "DuplicateEmailException",
              "snippet": "public DuplicateEmailException(String email) {\n            super(\"User with email \" + email + \" already exists\");\n        }",
              "line": 68,
              "type": "struct"
            }
          ],
          "file_path": "test/example.java",
          "start_line": 67,
          "end_line": 71
        },
        {
          "symbol_name": "setMetadata",
          "symbol_type": "method",
          "full_code": "        public void setMetadata(Map\u003cString, String\u003e metadata) { this.metadata = metadata; }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 121,
          "end_line": 121
        },
        {
          "symbol_name": "UserManager",
          "symbol_type": "class",
          "full_code": "    public static class UserManager {\n        private final UserService userService;\n        \n        public UserManager(UserService userService) {\n            this.userService = userService;\n        }\n        \n        public List\u003cUser\u003e bulkCreateUsers(List\u003cCreateUserRequest\u003e requests) {\n            List\u003cUser\u003e createdUsers = new ArrayList\u003c\u003e();\n            \n            for (CreateUserRequest request : requests) {\n                try {\n                    User user = userService.createUser(request);\n                    createdUsers.add(user);\n                } catch (Exception e) {\n                    System.err.println(\"Failed to create user \" + request.getName() + \": \" + e.getMessage());\n                }\n            }\n            \n            return createdUsers;\n        }\n        \n        public Map\u003cString, Integer\u003e getUserStats() {\n            List\u003cUser\u003e users = userService.listUsers();\n            Map\u003cString, Integer\u003e stats = new HashMap\u003c\u003e();\n            \n            stats.put(\"total\", users.size());\n            stats.put(\"active\", (int) users.stream().filter(User::isActive).count());\n            stats.put(\"inactive\", (int) users.stream().filter(u -\u003e u.getStatus() == UserStatus.INACTIVE).count());\n            stats.put(\"suspended\", (int) users.stream().filter(u -\u003e u.getStatus() == UserStatus.SUSPENDED).count());\n            \n            return stats;\n        }\n        \n        public String exportUsers() {\n            List\u003cUser\u003e users = userService.listUsers();\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"ID,Name,Email,Status,Created At\\n\");\n            \n            for (User user : users) {\n                sb.append(user.getId()).append(\",\")\n                  .append(user.getName()).append(\",\")\n                  .append(user.getEmail()).append(\",\")\n                  .append(user.getStatus().getValue()).append(\",\")\n                  .append(user.getCreatedAt().format(DATE_FORMATTER))\n                  .append(\"\\n\");\n            }\n            \n            return sb.toString();\n        }\n    }",
          "doc_comment": "// Manager class",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "UserService",
              "snippet": "private final UserService userService;",
              "line": 431,
              "type": "field_declaration"
            },
            {
              "name": "UserManager",
              "snippet": "public UserManager(UserService userService) {\n            this.userService = userService;\n        }",
              "line": 433,
              "type": "struct"
            },
            {
              "name": "bulkCreateUsers",
              "snippet": "public List\u003cUser\u003e bulkCreateUsers(List\u003cCreateUserRequest\u003e requests) {\n            List\u003cUser\u003e createdUsers = new ArrayList\u003c\u003e();\n            \n            for (CreateUserRequest request : requests) {\n                try {\n                    User user = userService.createUser(request);\n                    createdUsers.add(user);\n                } catch (Exception e) {\n                    System.err.println(\"Failed to create user \" + request.getName() + \": \" + e.getMessage());\n                }\n            }\n            \n            return createdUsers;\n        }",
              "line": 437,
              "type": "method"
            },
            {
              "name": "User",
              "snippet": "User user = userService.createUser(request);",
              "line": 442,
              "type": "variable"
            },
            {
              "name": "getUserStats",
              "snippet": "public Map\u003cString, Integer\u003e getUserStats() {\n            List\u003cUser\u003e users = userService.listUsers();\n            Map\u003cString, Integer\u003e stats = new HashMap\u003c\u003e();\n            \n            stats.put(\"total\", users.size());\n            stats.put(\"active\", (int) users.stream().filter(User::isActive).count());\n            stats.put(\"inactive\", (int) users.stream().filter(u -\u003e u.getStatus() == UserStatus.INACTIVE).count());\n            stats.put(\"suspended\", (int) users.stream().filter(u -\u003e u.getStatus() == UserStatus.SUSPENDED).count());\n            \n            return stats;\n        }",
              "line": 452,
              "type": "method"
            },
            {
              "name": "String",
              "snippet": "public String exportUsers() {\n            List\u003cUser\u003e users = userService.listUsers();\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"ID,Name,Email,Status,Created At\\n\");\n            \n            for (User user : users) {\n                sb.append(user.getId()).append(\",\")\n                  .append(user.getName()).append(\",\")\n                  .append(user.getEmail()).append(\",\")\n                  .append(user.getStatus().getValue()).append(\",\")\n                  .append(user.getCreatedAt().format(DATE_FORMATTER))\n                  .append(\"\\n\");\n            }\n            \n            return sb.toString();\n        }",
              "line": 464,
              "type": "method"
            },
            {
              "name": "StringBuilder",
              "snippet": "StringBuilder sb = new StringBuilder();",
              "line": 466,
              "type": "variable"
            }
          ],
          "file_path": "test/example.java",
          "start_line": 430,
          "end_line": 480
        },
        {
          "symbol_name": "dHJpbmcgZ2V0VmFsdWUoKSB7CiAgICAgICAgICAgIHJldHVybiB2YWx1ZTsK",
          "symbol_type": "variable",
          "full_code": "dHJpbmcgZ2V0VmFsdWUoKSB7CiAgICAgICAgICAgIHJldHVybiB2YWx1ZTsK",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 22,
          "end_line": 22
        },
        {
          "symbol_name": "dXM7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAg",
          "symbol_type": "variable",
          "full_code": "dXM7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAg",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 28,
          "end_line": 28
        },
        {
          "symbol_name": "CiAgICAgICAgICAgIHN1cGVyKCJWYWxpZGF0aW9uIGVycm9yOiAiICsgbWVz",
          "symbol_type": "variable",
          "full_code": "CiAgICAgICAgICAgIHN1cGVyKCJWYWxpZGF0aW9uIGVycm9yOiAiICsgbWVz",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 40,
          "end_line": 40
        },
        {
          "symbol_name": "dGVyZmFjZSBVc2VyUmVwb3NpdG9yeSB7CiAgICAgICAgT3B0aW9uYWw8VXNl",
          "symbol_type": "variable",
          "full_code": "dGVyZmFjZSBVc2VyUmVwb3NpdG9yeSB7CiAgICAgICAgT3B0aW9uYWw8VXNl\ncj4gZmluZEJ5SWQoTG9uZyBpZCk7CiAgICAgICAgVXNlciBzYXZlKFVzZXIg",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 47,
          "end_line": 48
        },
        {
          "symbol_name": "findByEmail",
          "symbol_type": "method",
          "full_code": "        Optional\u003cUser\u003e findByEmail(String email);",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 78,
          "end_line": 78
        },
        {
          "symbol_name": "equals",
          "symbol_type": "method",
          "full_code": "        @Override\n        public boolean equals(Object obj) {\n            if (this == obj) return true;\n            if (obj == null || getClass() != obj.getClass()) return false;\n            User user = (User) obj;\n            return Objects.equals(id, user.id);\n        }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 239,
          "end_line": 245
        },
        {
          "symbol_name": "user",
          "symbol_type": "variable",
          "full_code": "            User user = repository.findById(id)\n                .orElseThrow(() -\u003e new UserNotFoundException(id));",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 332,
          "end_line": 333
        },
        {
          "symbol_name": "UserManager",
          "symbol_type": "struct",
          "full_code": "        public UserManager(UserService userService) {\n            this.userService = userService;\n        }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 433,
          "end_line": 435
        },
        {
          "symbol_name": "String",
          "symbol_type": "method",
          "full_code": "        public String getValue() {\n            return value;\n        }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 36,
          "end_line": 38
        },
        {
          "symbol_name": "UserStatus",
          "symbol_type": "method",
          "full_code": "        public static UserStatus fromString(String value) {\n            for (UserStatus status : UserStatus.values()) {\n                if (status.getValue().equals(value)) {\n                    return status;\n                }\n            }\n            throw new IllegalArgumentException(\"Unknown status: \" + value);\n        }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 40,
          "end_line": 47
        },
        {
          "symbol_name": "CreateUserRequest",
          "symbol_type": "class",
          "full_code": "    public static class CreateUserRequest {\n        private String name;\n        private String email;\n        private Set\u003cPermission\u003e permissions;\n        private Map\u003cString, String\u003e metadata;\n        \n        public CreateUserRequest() {\n            this.permissions = new HashSet\u003c\u003e();\n            this.metadata = new HashMap\u003c\u003e();\n        }\n        \n        public CreateUserRequest(String name, String email) {\n            this();\n            this.name = name;\n            this.email = email;\n        }\n        \n        // Getters and setters\n        public String getName() { return name; }\n        public void setName(String name) { this.name = name; }\n        \n        public String getEmail() { return email; }\n        public void setEmail(String email) { this.email = email; }\n        \n        public Set\u003cPermission\u003e getPermissions() { return permissions; }\n        public void setPermissions(Set\u003cPermission\u003e permissions) { this.permissions = permissions; }\n        \n        public Map\u003cString, String\u003e getMetadata() { return metadata; }\n        public void setMetadata(Map\u003cString, String\u003e metadata) { this.metadata = metadata; }\n    }",
          "doc_comment": "// Data Transfer Objects",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "String",
              "snippet": "private String name;",
              "line": 94,
              "type": "field_declaration"
            },
            {
              "name": "String",
              "snippet": "private String email;",
              "line": 95,
              "type": "field_declaration"
            },
            {
              "name": "CreateUserRequest",
              "snippet": "public CreateUserRequest() {\n            this.permissions = new HashSet\u003c\u003e();\n            this.metadata = new HashMap\u003c\u003e();\n        }",
              "line": 99,
              "type": "struct"
            },
            {
              "name": "CreateUserRequest",
              "snippet": "public CreateUserRequest(String name, String email) {\n            this();\n            this.name = name;\n            this.email = email;\n        }",
              "line": 104,
              "type": "struct"
            },
            {
              "name": "String",
              "snippet": "public String getName() { return name; }",
              "line": 111,
              "type": "method"
            },
            {
              "name": "setName",
              "snippet": "public void setName(String name) { this.name = name; }",
              "line": 112,
              "type": "method"
            },
            {
              "name": "String",
              "snippet": "public String getEmail() { return email; }",
              "line": 114,
              "type": "method"
            },
            {
              "name": "setEmail",
              "snippet": "public void setEmail(String email) { this.email = email; }",
              "line": 115,
              "type": "method"
            },
            {
              "name": "getPermissions",
              "snippet": "public Set\u003cPermission\u003e getPermissions() { return permissions; }",
              "line": 117,
              "type": "method"
            },
            {
              "name": "setPermissions",
              "snippet": "public void setPermissions(Set\u003cPermission\u003e permissions) { this.permissions = permissions; }",
              "line": 118,
              "type": "method"
            },
            {
              "name": "getMetadata",
              "snippet": "public Map\u003cString, String\u003e getMetadata() { return metadata; }",
              "line": 120,
              "type": "method"
            },
            {
              "name": "setMetadata",
              "snippet": "public void setMetadata(Map\u003cString, String\u003e metadata) { this.metadata = metadata; }",
              "line": 121,
              "type": "method"
            }
          ],
          "file_path": "test/example.java",
          "start_line": 93,
          "end_line": 122
        },
        {
          "symbol_name": "UserRepository",
          "symbol_type": "variable",
          "full_code": "        UserRepository repository = new MemoryUserRepository();",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 484,
          "end_line": 484
        },
        {
          "symbol_name": "Y2xhc3NlcwogICAgcHVibGljIHN0YXRpYyBjbGFzcyBVc2VyTm90Rm91bmRF",
          "symbol_type": "variable",
          "full_code": "Y2xhc3NlcwogICAgcHVibGljIHN0YXRpYyBjbGFzcyBVc2VyTm90Rm91bmRF\neGNlcHRpb24gZXh0ZW5kcyBFeGNlcHRpb24gewogICAgICAgIHB1YmxpYyBV",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 33,
          "end_line": 34
        },
        {
          "symbol_name": "U3RyaW5nIGVtYWlsKSB7CiAgICAgICAgICAgIHN1cGVyKCJVc2VyIHdpdGgg",
          "symbol_type": "variable",
          "full_code": "U3RyaW5nIGVtYWlsKSB7CiAgICAgICAgICAgIHN1cGVyKCJVc2VyIHdpdGgg",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 44,
          "end_line": 44
        },
        {
          "symbol_name": "removePermission",
          "symbol_type": "method",
          "full_code": "        public void removePermission(Permission permission) {\n            permissions.remove(permission);\n        }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 198,
          "end_line": 200
        },
        {
          "symbol_name": "Long",
          "symbol_type": "method",
          "full_code": "        public Long getId() { return id; }",
          "doc_comment": "// Getters and setters",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 215,
          "end_line": 215
        },
        {
          "symbol_name": "clear",
          "symbol_type": "method",
          "full_code": "        public void clear() {\n            users.clear();\n            nextId = 1L;\n        }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 311,
          "end_line": 314
        },
        {
          "symbol_name": "UserServiceImpl",
          "symbol_type": "struct",
          "full_code": "        public UserServiceImpl(UserRepository repository) {\n            this.repository = repository;\n        }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 322,
          "end_line": 324
        },
        {
          "symbol_name": "CiAgICAvLyBFbnVtcwogICAgcHVibGljIGVudW0gVXNlclN0YXR1cyB7CiAg",
          "symbol_type": "variable",
          "full_code": "CiAgICAvLyBFbnVtcwogICAgcHVibGljIGVudW0gVXNlclN0YXR1cyB7CiAg\nICAgICAgQUNUSVZFKCJhY3RpdmUiKSwKICAgICAgICBJTkFDVElWRSgiaW5h",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 15,
          "end_line": 16
        },
        {
          "symbol_name": "ID0gdmFsdWU7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHB1YmxpYyBT",
          "symbol_type": "variable",
          "full_code": "ID0gdmFsdWU7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIHB1YmxpYyBT\ndHJpbmcgZ2V0VmFsdWUoKSB7CiAgICAgICAgICAgIHJldHVybiB2YWx1ZTsK",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 21,
          "end_line": 22
        },
        {
          "symbol_name": "OwppbXBvcnQgamF2YS50aW1lLkxvY2FsRGF0ZVRpbWU7CmltcG9ydCBqYXZh",
          "symbol_type": "variable",
          "full_code": "OwppbXBvcnQgamF2YS50aW1lLkxvY2FsRGF0ZVRpbWU7CmltcG9ydCBqYXZh",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 2,
          "end_line": 2
        },
        {
          "symbol_name": "ICAgICAgICB9CiAgICAgICAgCiAgICAgICAgcHVibGljIHN0YXRpYyBVc2Vy",
          "symbol_type": "variable",
          "full_code": "ICAgICAgICB9CiAgICAgICAgCiAgICAgICAgcHVibGljIHN0YXRpYyBVc2Vy\nU3RhdHVzIGZyb21TdHJpbmcoU3RyaW5nIHZhbHVlKSB7CiAgICAgICAgICAg",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 23,
          "end_line": 24
        },
        {
          "symbol_name": "size",
          "symbol_type": "method",
          "full_code": "        public int size() {\n            return users.size();\n        }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 307,
          "end_line": 309
        },
        {
          "symbol_name": "LnRpbWUuZm9ybWF0LkRhdGVUaW1lRm9ybWF0dGVyOwppbXBvcnQgamF2YS51",
          "symbol_type": "variable",
          "full_code": "LnRpbWUuZm9ybWF0LkRhdGVUaW1lRm9ybWF0dGVyOwppbXBvcnQgamF2YS51\ndGlsLmNvbmN1cnJlbnQuQ29uY3VycmVudEhhc2hNYXA7CmltcG9ydCBqYXZh",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 3,
          "end_line": 4
        },
        {
          "symbol_name": "IHB1YmxpYyBWYWxpZGF0aW9uRXhjZXB0aW9uKFN0cmluZyBtZXNzYWdlKSB7",
          "symbol_type": "variable",
          "full_code": "IHB1YmxpYyBWYWxpZGF0aW9uRXhjZXB0aW9uKFN0cmluZyBtZXNzYWdlKSB7\nCiAgICAgICAgICAgIHN1cGVyKCJWYWxpZGF0aW9uIGVycm9yOiAiICsgbWVz",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 39,
          "end_line": 40
        },
        {
          "symbol_name": "bGlkYXRpb25FeGNlcHRpb24gZXh0ZW5kcyBFeGNlcHRpb24gewogICAgICAg",
          "symbol_type": "variable",
          "full_code": "bGlkYXRpb25FeGNlcHRpb24gZXh0ZW5kcyBFeGNlcHRpb24gewogICAgICAg",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 38,
          "end_line": 38
        },
        {
          "symbol_name": "c2FnZSk7CiAgICAgICAgfQogICAgfQogICAgCiAgICBwdWJsaWMgc3RhdGlj",
          "symbol_type": "variable",
          "full_code": "c2FnZSk7CiAgICAgICAgfQogICAgfQogICAgCiAgICBwdWJsaWMgc3RhdGlj\nIGNsYXNzIER1cGxpY2F0ZUVtYWlsRXhjZXB0aW9uIGV4dGVuZHMgRXhjZXB0",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 41,
          "end_line": 42
        },
        {
          "symbol_name": "UserRepository",
          "symbol_type": "interface",
          "full_code": "    public interface UserRepository {\n        Optional\u003cUser\u003e findById(Long id);\n        User save(User user);\n        boolean deleteById(Long id);\n        Optional\u003cUser\u003e findByEmail(String email);\n        List\u003cUser\u003e findAll();\n        List\u003cUser\u003e findByStatus(UserStatus status);\n    }",
          "doc_comment": "// Interfaces",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "findById",
              "snippet": "Optional\u003cUser\u003e findById(Long id);",
              "line": 75,
              "type": "method"
            },
            {
              "name": "User",
              "snippet": "User save(User user);",
              "line": 76,
              "type": "method"
            },
            {
              "name": "deleteById",
              "snippet": "boolean deleteById(Long id);",
              "line": 77,
              "type": "method"
            },
            {
              "name": "findByEmail",
              "snippet": "Optional\u003cUser\u003e findByEmail(String email);",
              "line": 78,
              "type": "method"
            },
            {
              "name": "findAll",
              "snippet": "List\u003cUser\u003e findAll();",
              "line": 79,
              "type": "method"
            },
            {
              "name": "findByStatus",
              "snippet": "List\u003cUser\u003e findByStatus(UserStatus status);",
              "line": 80,
              "type": "method"
            }
          ],
          "file_path": "test/example.java",
          "start_line": 74,
          "end_line": 81
        },
        {
          "symbol_name": "User",
          "symbol_type": "variable",
          "full_code": "            User user = (User) obj;",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 243,
          "end_line": 243
        },
        {
          "symbol_name": "String",
          "symbol_type": "variable",
          "full_code": "            String lowerQuery = query.toLowerCase();",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 407,
          "end_line": 407
        },
        {
          "symbol_name": "UserManager",
          "symbol_type": "variable",
          "full_code": "            UserManager manager = new UserManager(service);",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 500,
          "end_line": 500
        },
        {
          "symbol_name": "ICAgIERFTEVURUQoImRlbGV0ZWQiKTsKICAgICAgICAKICAgICAgICBwcml2",
          "symbol_type": "variable",
          "full_code": "ICAgIERFTEVURUQoImRlbGV0ZWQiKTsKICAgICAgICAKICAgICAgICBwcml2",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 18,
          "end_line": 18
        },
        {
          "symbol_name": "dXBlcigiVXNlciB3aXRoIElEICIgKyBpZCArICIgbm90IGZvdW5kIik7CiAg",
          "symbol_type": "variable",
          "full_code": "dXBlcigiVXNlciB3aXRoIElEICIgKyBpZCArICIgbm90IGZvdW5kIik7CiAg",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 36,
          "end_line": 36
        },
        {
          "symbol_name": "ZW1haWwgIiArIGVtYWlsICsgIiBhbHJlYWR5IGV4aXN0cyIpOwogICAgICAg",
          "symbol_type": "variable",
          "full_code": "ZW1haWwgIiArIGVtYWlsICsgIiBhbHJlYWR5IGV4aXN0cyIpOwogICAgICAg\nIH0KICAgIH0KICAgIAogICAgLy8gSW50ZXJmYWNlcwogICAgcHVibGljIGlu",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 45,
          "end_line": 46
        },
        {
          "symbol_name": "setId",
          "symbol_type": "method",
          "full_code": "        public void setId(Long id) { this.id = id; }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 216,
          "end_line": 216
        },
        {
          "symbol_name": "ICBwcml2YXRlIHN0YXRpYyBpbnQgdXNlckNvdW50ID0gMDsKICAgIHByaXZh",
          "symbol_type": "variable",
          "full_code": "ICBwcml2YXRlIHN0YXRpYyBpbnQgdXNlckNvdW50ID0gMDsKICAgIHByaXZh\ndGUgc3RhdGljIGJvb2xlYW4gaXNJbml0aWFsaXplZCA9IGZhbHNlOwogICAg",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 13,
          "end_line": 14
        },
        {
          "symbol_name": "dGUgc3RhdGljIGJvb2xlYW4gaXNJbml0aWFsaXplZCA9IGZhbHNlOwogICAg",
          "symbol_type": "variable",
          "full_code": "dGUgc3RhdGljIGJvb2xlYW4gaXNJbml0aWFsaXplZCA9IGZhbHNlOwogICAg",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 14,
          "end_line": 14
        },
        {
          "symbol_name": "Y3RpdmUiKSwKICAgICAgICBTVVNQRU5ERUQoInN1c3BlbmRlZCIpLAogICAg",
          "symbol_type": "variable",
          "full_code": "Y3RpdmUiKSwKICAgICAgICBTVVNQRU5ERUQoInN1c3BlbmRlZCIpLAogICAg\nICAgIERFTEVURUQoImRlbGV0ZWQiKTsKICAgICAgICAKICAgICAgICBwcml2",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 17,
          "end_line": 18
        },
        {
          "symbol_name": "ICAgICAgfQogICAgfQogICAgCiAgICBwdWJsaWMgc3RhdGljIGNsYXNzIFZh",
          "symbol_type": "variable",
          "full_code": "ICAgICAgfQogICAgfQogICAgCiAgICBwdWJsaWMgc3RhdGljIGNsYXNzIFZh\nbGlkYXRpb25FeGNlcHRpb24gZXh0ZW5kcyBFeGNlcHRpb24gewogICAgICAg",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 37,
          "end_line": 38
        },
        {
          "symbol_name": "cGFja2FnZSBjb20uZXhhbXBsZS51c2VyOwoKaW1wb3J0IGphdmEudXRpbC4q",
          "symbol_type": "variable",
          "full_code": "cGFja2FnZSBjb20uZXhhbXBsZS51c2VyOwoKaW1wb3J0IGphdmEudXRpbC4q\nOwppbXBvcnQgamF2YS50aW1lLkxvY2FsRGF0ZVRpbWU7CmltcG9ydCBqYXZh",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 1,
          "end_line": 2
        },
        {
          "symbol_name": "eGNlcHRpb24gZXh0ZW5kcyBFeGNlcHRpb24gewogICAgICAgIHB1YmxpYyBV",
          "symbol_type": "variable",
          "full_code": "eGNlcHRpb24gZXh0ZW5kcyBFeGNlcHRpb24gewogICAgICAgIHB1YmxpYyBV",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 34,
          "end_line": 34
        },
        {
          "symbol_name": "setLastLoginAt",
          "symbol_type": "method",
          "full_code": "        public void setLastLoginAt(LocalDateTime lastLoginAt) { this.lastLoginAt = lastLoginAt; }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 231,
          "end_line": 231
        },
        {
          "symbol_name": "ZXIgREFURV9GT1JNQVRURVIgPSBEYXRlVGltZUZvcm1hdHRlci5JU09fTE9D",
          "symbol_type": "variable",
          "full_code": "ZXIgREFURV9GT1JNQVRURVIgPSBEYXRlVGltZUZvcm1hdHRlci5JU09fTE9D\nQUxfREFURV9USU1FOwogICAgCiAgICAvLyBTdGF0aWMgdmFyaWFibGVzCiAg",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 11,
          "end_line": 12
        },
        {
          "symbol_name": "aW9uIHsKICAgICAgICBwdWJsaWMgRHVwbGljYXRlRW1haWxFeGNlcHRpb24o",
          "symbol_type": "variable",
          "full_code": "aW9uIHsKICAgICAgICBwdWJsaWMgRHVwbGljYXRlRW1haWxFeGNlcHRpb24o\nU3RyaW5nIGVtYWlsKSB7CiAgICAgICAgICAgIHN1cGVyKCJVc2VyIHdpdGgg",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 43,
          "end_line": 44
        },
        {
          "symbol_name": "cj4gZmluZEJ5SWQoTG9uZyBpZCk7CiAgICAgICAgVXNlciBzYXZlKFVzZXIg",
          "symbol_type": "variable",
          "full_code": "cj4gZmluZEJ5SWQoTG9uZyBpZCk7CiAgICAgICAgVXNlciBzYXZlKFVzZXIg",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 48,
          "end_line": 48
        },
        {
          "symbol_name": "activate",
          "symbol_type": "method",
          "full_code": "        public void activate() {\n            this.status = UserStatus.ACTIVE;\n        }",
          "doc_comment": "// Business methods",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 178,
          "end_line": 180
        },
        {
          "symbol_name": "hasPermission",
          "symbol_type": "method",
          "full_code": "        public boolean hasPermission(Permission permission) {\n            return permissions.contains(permission) || permissions.contains(Permission.ADMIN);\n        }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 190,
          "end_line": 192
        },
        {
          "symbol_name": "validateCreateRequest",
          "symbol_type": "method",
          "full_code": "        private void validateCreateRequest(CreateUserRequest request) throws ValidationException {\n            if (request.getName() == null || request.getName().trim().isEmpty()) {\n                throw new ValidationException(\"Name is required\");\n            }\n            if (request.getEmail() == null || !isValidEmail(request.getEmail())) {\n                throw new ValidationException(\"Valid email is required\");\n            }\n        }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 415,
          "end_line": 422
        },
        {
          "symbol_name": "YyBzdGF0aWMgZmluYWwgaW50IE1BWF9VU0VSUyA9IDEwMDA7CiAgICBwdWJs",
          "symbol_type": "variable",
          "full_code": "YyBzdGF0aWMgZmluYWwgaW50IE1BWF9VU0VSUyA9IDEwMDA7CiAgICBwdWJs",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 8,
          "end_line": 8
        },
        {
          "symbol_name": "getMetadata",
          "symbol_type": "method",
          "full_code": "        public Map\u003cString, String\u003e getMetadata() { return metadata; }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 120,
          "end_line": 120
        },
        {
          "symbol_name": "updateLastLogin",
          "symbol_type": "method",
          "full_code": "        public void updateLastLogin() {\n            this.lastLoginAt = LocalDateTime.now();\n        }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 202,
          "end_line": 204
        },
        {
          "symbol_name": "dXNlcik7CiAgICAgICAgYm9vbGVhbiBkZWxldGVCeUlkKExvbmcgaWQpOwog",
          "symbol_type": "variable",
          "full_code": "dXNlcik7CiAgICAgICAgYm9vbGVhbiBkZWxldGVCeUlkKExvbmcgaWQpOwog\nICAgICAgIE9wdGlvbmFsPFVzZXI+IGZpbmRCeUVtYWlsKFN0cmluZyBlbWFp",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 49,
          "end_line": 50
        },
        {
          "symbol_name": "CreateUserRequest",
          "symbol_type": "struct",
          "full_code": "        public CreateUserRequest() {\n            this.permissions = new HashSet\u003c\u003e();\n            this.metadata = new HashMap\u003c\u003e();\n        }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.java",
          "start_line": 99,
          "end_line": 102
        }
      ],
      "related_files": []
    },
    {
      "file_path": "test/example.js",
      "change_type": "Added",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+/**\n+ * User management system in JavaScript\n+ */\n+\n+// Constants\n+const MAX_USERS = 1000;\n+const DEFAULT_TIMEOUT = 5000;\n+\n+// Global variables\n+let userCount = 0;\n+var isInitialized = false;\n+\n+/**\n+ * User class representing a user entity\n+ */\n+class User {\n+    constructor(id, name, email) {\n+        this.id = id;\n+        this.name = name;\n+        this.email = email;\n+        this.createdAt = new Date();\n+        this.active = true;\n+    }\n+\n+    /**\n+     * Get user display name\n+     * @returns {string} Display name\n+     */\n+    getDisplayName() {\n+        return `${this.name} (${this.email})`;\n+    }\n+\n+    /**\n+     * Activate the user\n+     */\n+    activate() {\n+        this.active = true;\n+    }\n+\n+    /**\n+     * Deactivate the user\n+     */\n+    deactivate() {\n+        this.active = false;\n+    }\n+\n+    /**\n+     * Static method to create user from object\n+     * @param {Object} userData - User data object\n+     * @returns {User} New user instance\n+     */\n+    static fromObject(userData) {\n+        return new User(userData.id, userData.name, userData.email);\n+    }\n+\n+    /**\n+     * Static method to validate user data\n+     * @param {Object} userData - User data to validate\n+     * @returns {boolean} True if valid\n+     */\n+    static isValid(userData) {\n+        return userData \u0026\u0026 userData.name \u0026\u0026 userData.email;\n+    }\n+}\n+\n+/**\n+ * UserService class for managing users\n+ */\n+class UserService {\n+    constructor(repository, logger) {\n+        this.repository = repository;\n+        this.logger = logger;\n+        this.cache = new Map();\n+    }\n+\n+    /**\n+     * Get user by ID\n+     * @param {number} id - User ID\n+     * @returns {Promise\u003cUser\u003e} User object\n+     */\n+    async getUser(id) {\n+        if (this.cache.has(id)) {\n+            return this.cache.get(id);\n+        }\n+\n+        try {\n+            const user = await this.repository.findById(id);\n+            this.cache.set(id, user);\n+            this.logger.info(`Retrieved user: ${user.name}`);\n+            return user;\n+        } catch (error) {\n+            this.logger.error(`Failed to get user ${id}:`, error);\n+            throw error;\n+        }\n+    }\n+\n+    /**\n+     * Create new user\n+     * @param {Object} userData - User data\n+     * @returns {Promise\u003cUser\u003e} Created user\n+     */\n+    async createUser(userData) {\n+        if (!User.isValid(userData)) {\n+            throw new Error('Invalid user data');\n+        }\n+\n+        const user = User.fromObject(userData);\n+        const savedUser = await this.repository.save(user);\n+        userCount++;\n+        \n+        this.logger.info(`Created user: ${savedUser.name}`);\n+        return savedUser;\n+    }\n+\n+    /**\n+     * Update existing user\n+     * @param {number} id - User ID\n+     * @param {Object} updateData - Data to update\n+     * @returns {Promise\u003cUser\u003e} Updated user\n+     */\n+    async updateUser(id, updateData) {\n+        const existingUser = await this.getUser(id);\n+        Object.assign(existingUser, updateData);\n+        \n+        const updatedUser = await this.repository.save(existingUser);\n+        this.cache.set(id, updatedUser);\n+        \n+        return updatedUser;\n+    }\n+\n+    /**\n+     * Delete user\n+     * @param {number} id - User ID\n+     * @returns {Promise\u003cboolean\u003e} Success status\n+     */\n+    async deleteUser(id) {\n+        await this.repository.delete(id);\n+        this.cache.delete(id);\n+        userCount--;\n+        return true;\n+    }\n+}\n+\n+// Function declarations\n+function validateEmail(email) {\n+    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n+    return emailRegex.test(email);\n+}\n+\n+function generateUserId() {\n+    return Math.floor(Math.random() * 1000000);\n+}\n+\n+/**\n+ * Initialize the user system\n+ * @param {Object} config - Configuration object\n+ */\n+function initializeUserSystem(config) {\n+    isInitialized = true;\n+    userCount = 0;\n+    console.log('User system initialized with config:', config);\n+}\n+\n+// Arrow functions\n+const formatUser = (user) =\u003e ({\n+    id: user.id,\n+    name: user.name,\n+    email: user.email,\n+    displayName: user.getDisplayName()\n+});\n+\n+const createUserValidator = (requiredFields) =\u003e (userData) =\u003e {\n+    return requiredFields.every(field =\u003e userData[field]);\n+};\n+\n+const processUsers = async (users, processor) =\u003e {\n+    const results = [];\n+    for (const user of users) {\n+        const result = await processor(user);\n+        results.push(result);\n+    }\n+    return results;\n+};\n+\n+// Higher-order function\n+function createLogger(prefix) {\n+    return {\n+        info: (message) =\u003e console.log(`[${prefix}] INFO: ${message}`),\n+        error: (message) =\u003e console.error(`[${prefix}] ERROR: ${message}`),\n+        debug: (message) =\u003e console.debug(`[${prefix}] DEBUG: ${message}`)\n+    };\n+}\n+\n+// Factory function\n+function createUserRepository(type) {\n+    switch (type) {\n+        case 'memory':\n+            return new MemoryUserRepository();\n+        case 'database':\n+            return new DatabaseUserRepository();\n+        default:\n+            throw new Error(`Unknown repository type: ${type}`);\n+    }\n+}\n+\n+/**\n+ * Memory-based user repository\n+ */\n+class MemoryUserRepository {\n+    constructor() {\n+        this.users = new Map();\n+        this.nextId = 1;\n+    }\n+\n+    async findById(id) {\n+        const user = this.users.get(id);\n+        if (!user) {\n+            throw new Error(`User not found: ${id}`);\n+        }\n+        return user;\n+    }\n+\n+    async save(user) {\n+        if (!user.id) {\n+            user.id = this.nextId++;\n+        }\n+        this.users.set(user.id, user);\n+        return user;\n+    }\n+\n+    async delete(id) {\n+        return this.users.delete(id);\n+    }\n+\n+    async findAll() {\n+        return Array.from(this.users.values());\n+    }\n+}\n+\n+// Event handlers\n+function handleUserClick(event) {\n+    const userId = event.target.dataset.userId;\n+    console.log(`User clicked: ${userId}`);\n+}\n+\n+function handleFormSubmit(event) {\n+    event.preventDefault();\n+    const formData = new FormData(event.target);\n+    const userData = Object.fromEntries(formData);\n+    console.log('Form submitted with data:', userData);\n+}\n+\n+// Immediately Invoked Function Expression (IIFE)\n+(function() {\n+    console.log('User management module loaded');\n+    \n+    // Module initialization\n+    const defaultConfig = {\n+        maxUsers: MAX_USERS,\n+        timeout: DEFAULT_TIMEOUT\n+    };\n+    \n+    if (typeof window !== 'undefined') {\n+        window.UserManagement = {\n+            User,\n+            UserService,\n+            createUserRepository,\n+            initializeUserSystem\n+        };\n+    }\n+})();\n+\n+// Export for Node.js\n+if (typeof module !== 'undefined' \u0026\u0026 module.exports) {\n+    module.exports = {\n+        User,\n+        UserService,\n+        createUserRepository,\n+        initializeUserSystem,\n+        validateEmail,\n+        formatUser\n+    };\n+} \n\\ No newline at end of file",
      "affected_symbols": [
        {
          "symbol_name": "createUserRepository",
          "symbol_type": "function",
          "full_code": "function createUserRepository(type) {\n    switch (type) {\n        case 'memory':\n            return new MemoryUserRepository();\n        case 'database':\n            return new DatabaseUserRepository();\n        default:\n            throw new Error(`Unknown repository type: ${type}`);\n    }\n}",
          "doc_comment": "// Factory function",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.js",
          "start_line": 195,
          "end_line": 204
        },
        {
          "symbol_name": "MemoryUserRepository",
          "symbol_type": "class",
          "full_code": "class MemoryUserRepository {\n    constructor() {\n        this.users = new Map();\n        this.nextId = 1;\n    }\n\n    async findById(id) {\n        const user = this.users.get(id);\n        if (!user) {\n            throw new Error(`User not found: ${id}`);\n        }\n        return user;\n    }\n\n    async save(user) {\n        if (!user.id) {\n            user.id = this.nextId++;\n        }\n        this.users.set(user.id, user);\n        return user;\n    }\n\n    async delete(id) {\n        return this.users.delete(id);\n    }\n\n    async findAll() {\n        return Array.from(this.users.values());\n    }\n}",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "constructor",
              "snippet": "constructor() {\n        this.users = new Map();\n        this.nextId = 1;\n    }",
              "line": 210,
              "type": "method"
            },
            {
              "name": "findById",
              "snippet": "async findById(id) {\n        const user = this.users.get(id);\n        if (!user) {\n            throw new Error(`User not found: ${id}`);\n        }\n        return user;\n    }",
              "line": 215,
              "type": "method"
            },
            {
              "name": "this.users.get",
              "snippet": "this.users.get(id)",
              "line": 216,
              "type": "call_expression"
            },
            {
              "name": "save",
              "snippet": "async save(user) {\n        if (!user.id) {\n            user.id = this.nextId++;\n        }\n        this.users.set(user.id, user);\n        return user;\n    }",
              "line": 223,
              "type": "method"
            },
            {
              "name": "this.users.set",
              "snippet": "this.users.set(user.id, user)",
              "line": 227,
              "type": "call_expression"
            },
            {
              "name": "delete",
              "snippet": "async delete(id) {\n        return this.users.delete(id);\n    }",
              "line": 231,
              "type": "method"
            },
            {
              "name": "this.users.delete",
              "snippet": "this.users.delete(id)",
              "line": 232,
              "type": "call_expression"
            },
            {
              "name": "findAll",
              "snippet": "async findAll() {\n        return Array.from(this.users.values());\n    }",
              "line": 235,
              "type": "method"
            },
            {
              "name": "Array.from",
              "snippet": "Array.from(this.users.values())",
              "line": 236,
              "type": "call_expression"
            },
            {
              "name": "this.users.values",
              "snippet": "this.users.values()",
              "line": 236,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.js",
          "start_line": 209,
          "end_line": 238
        },
        {
          "symbol_name": "activate",
          "symbol_type": "method",
          "full_code": "    activate() {\n        this.active = true;\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.js",
          "start_line": 36,
          "end_line": 38
        },
        {
          "symbol_name": "createUser",
          "symbol_type": "method",
          "full_code": "    async createUser(userData) {\n        if (!User.isValid(userData)) {\n            throw new Error('Invalid user data');\n        }\n\n        const user = User.fromObject(userData);\n        const savedUser = await this.repository.save(user);\n        userCount++;\n        \n        this.logger.info(`Created user: ${savedUser.name}`);\n        return savedUser;\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "User.isValid",
              "snippet": "User.isValid(userData)",
              "line": 103,
              "type": "call_expression"
            },
            {
              "name": "User.fromObject",
              "snippet": "User.fromObject(userData)",
              "line": 107,
              "type": "call_expression"
            },
            {
              "name": "this.repository.save",
              "snippet": "this.repository.save(user)",
              "line": 108,
              "type": "call_expression"
            },
            {
              "name": "this.logger.info",
              "snippet": "this.logger.info(`Created user: ${savedUser.name}`)",
              "line": 111,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.js",
          "start_line": 102,
          "end_line": 113
        },
        {
          "symbol_name": "initializeUserSystem",
          "symbol_type": "function",
          "full_code": "function initializeUserSystem(config) {\n    isInitialized = true;\n    userCount = 0;\n    console.log('User system initialized with config:', config);\n}",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "console.log",
              "snippet": "console.log('User system initialized with config:', config)",
              "line": 161,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.js",
          "start_line": 158,
          "end_line": 162
        },
        {
          "symbol_name": "findById",
          "symbol_type": "method",
          "full_code": "    async findById(id) {\n        const user = this.users.get(id);\n        if (!user) {\n            throw new Error(`User not found: ${id}`);\n        }\n        return user;\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "this.users.get",
              "snippet": "this.users.get(id)",
              "line": 216,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.js",
          "start_line": 215,
          "end_line": 221
        },
        {
          "symbol_name": "save",
          "symbol_type": "method",
          "full_code": "    async save(user) {\n        if (!user.id) {\n            user.id = this.nextId++;\n        }\n        this.users.set(user.id, user);\n        return user;\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "this.users.set",
              "snippet": "this.users.set(user.id, user)",
              "line": 227,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.js",
          "start_line": 223,
          "end_line": 229
        },
        {
          "symbol_name": "delete",
          "symbol_type": "method",
          "full_code": "    async delete(id) {\n        return this.users.delete(id);\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "this.users.delete",
              "snippet": "this.users.delete(id)",
              "line": 232,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.js",
          "start_line": 231,
          "end_line": 233
        },
        {
          "symbol_name": "handleUserClick",
          "symbol_type": "function",
          "full_code": "function handleUserClick(event) {\n    const userId = event.target.dataset.userId;\n    console.log(`User clicked: ${userId}`);\n}",
          "doc_comment": "// Event handlers",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "console.log",
              "snippet": "console.log(`User clicked: ${userId}`)",
              "line": 243,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.js",
          "start_line": 241,
          "end_line": 244
        },
        {
          "symbol_name": "validateEmail",
          "symbol_type": "function",
          "full_code": "function validateEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n}",
          "doc_comment": "// Function declarations",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "emailRegex.test",
              "snippet": "emailRegex.test(email)",
              "line": 147,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.js",
          "start_line": 145,
          "end_line": 148
        },
        {
          "symbol_name": "deactivate",
          "symbol_type": "method",
          "full_code": "    deactivate() {\n        this.active = false;\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.js",
          "start_line": 43,
          "end_line": 45
        },
        {
          "symbol_name": "isValid",
          "symbol_type": "method",
          "full_code": "    static isValid(userData) {\n        return userData \u0026\u0026 userData.name \u0026\u0026 userData.email;\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.js",
          "start_line": 61,
          "end_line": 63
        },
        {
          "symbol_name": "UserService",
          "symbol_type": "class",
          "full_code": "class UserService {\n    constructor(repository, logger) {\n        this.repository = repository;\n        this.logger = logger;\n        this.cache = new Map();\n    }\n\n    /**\n     * Get user by ID\n     * @param {number} id - User ID\n     * @returns {Promise\u003cUser\u003e} User object\n     */\n    async getUser(id) {\n        if (this.cache.has(id)) {\n            return this.cache.get(id);\n        }\n\n        try {\n            const user = await this.repository.findById(id);\n            this.cache.set(id, user);\n            this.logger.info(`Retrieved user: ${user.name}`);\n            return user;\n        } catch (error) {\n            this.logger.error(`Failed to get user ${id}:`, error);\n            throw error;\n        }\n    }\n\n    /**\n     * Create new user\n     * @param {Object} userData - User data\n     * @returns {Promise\u003cUser\u003e} Created user\n     */\n    async createUser(userData) {\n        if (!User.isValid(userData)) {\n            throw new Error('Invalid user data');\n        }\n\n        const user = User.fromObject(userData);\n        const savedUser = await this.repository.save(user);\n        userCount++;\n        \n        this.logger.info(`Created user: ${savedUser.name}`);\n        return savedUser;\n    }\n\n    /**\n     * Update existing user\n     * @param {number} id - User ID\n     * @param {Object} updateData - Data to update\n     * @returns {Promise\u003cUser\u003e} Updated user\n     */\n    async updateUser(id, updateData) {\n        const existingUser = await this.getUser(id);\n        Object.assign(existingUser, updateData);\n        \n        const updatedUser = await this.repository.save(existingUser);\n        this.cache.set(id, updatedUser);\n        \n        return updatedUser;\n    }\n\n    /**\n     * Delete user\n     * @param {number} id - User ID\n     * @returns {Promise\u003cboolean\u003e} Success status\n     */\n    async deleteUser(id) {\n        await this.repository.delete(id);\n        this.cache.delete(id);\n        userCount--;\n        return true;\n    }\n}",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "constructor",
              "snippet": "constructor(repository, logger) {\n        this.repository = repository;\n        this.logger = logger;\n        this.cache = new Map();\n    }",
              "line": 70,
              "type": "method"
            },
            {
              "name": "getUser",
              "snippet": "async getUser(id) {\n        if (this.cache.has(id)) {\n            return this.cache.get(id);\n        }\n\n        try {\n            const user = await this.repository.findById(id);\n            this.cache.set(id, user);\n            this.logger.info(`Retrieved user: ${user.name}`);\n            return user;\n        } catch (error) {\n            this.logger.error(`Failed to get user ${id}:`, error);\n            throw error;\n        }\n    }",
              "line": 81,
              "type": "method"
            },
            {
              "name": "this.cache.has",
              "snippet": "this.cache.has(id)",
              "line": 82,
              "type": "call_expression"
            },
            {
              "name": "this.cache.get",
              "snippet": "this.cache.get(id)",
              "line": 83,
              "type": "call_expression"
            },
            {
              "name": "this.repository.findById",
              "snippet": "this.repository.findById(id)",
              "line": 87,
              "type": "call_expression"
            },
            {
              "name": "this.cache.set",
              "snippet": "this.cache.set(id, user)",
              "line": 88,
              "type": "call_expression"
            },
            {
              "name": "this.logger.info",
              "snippet": "this.logger.info(`Retrieved user: ${user.name}`)",
              "line": 89,
              "type": "call_expression"
            },
            {
              "name": "this.logger.error",
              "snippet": "this.logger.error(`Failed to get user ${id}:`, error)",
              "line": 92,
              "type": "call_expression"
            },
            {
              "name": "createUser",
              "snippet": "async createUser(userData) {\n        if (!User.isValid(userData)) {\n            throw new Error('Invalid user data');\n        }\n\n        const user = User.fromObject(userData);\n        const savedUser = await this.repository.save(user);\n        userCount++;\n        \n        this.logger.info(`Created user: ${savedUser.name}`);\n        return savedUser;\n    }",
              "line": 102,
              "type": "method"
            },
            {
              "name": "User.isValid",
              "snippet": "User.isValid(userData)",
              "line": 103,
              "type": "call_expression"
            },
            {
              "name": "User.fromObject",
              "snippet": "User.fromObject(userData)",
              "line": 107,
              "type": "call_expression"
            },
            {
              "name": "this.repository.save",
              "snippet": "this.repository.save(user)",
              "line": 108,
              "type": "call_expression"
            },
            {
              "name": "this.logger.info",
              "snippet": "this.logger.info(`Created user: ${savedUser.name}`)",
              "line": 111,
              "type": "call_expression"
            },
            {
              "name": "updateUser",
              "snippet": "async updateUser(id, updateData) {\n        const existingUser = await this.getUser(id);\n        Object.assign(existingUser, updateData);\n        \n        const updatedUser = await this.repository.save(existingUser);\n        this.cache.set(id, updatedUser);\n        \n        return updatedUser;\n    }",
              "line": 121,
              "type": "method"
            },
            {
              "name": "this.getUser",
              "snippet": "this.getUser(id)",
              "line": 122,
              "type": "call_expression"
            },
            {
              "name": "Object.assign",
              "snippet": "Object.assign(existingUser, updateData)",
              "line": 123,
              "type": "call_expression"
            },
            {
              "name": "this.repository.save",
              "snippet": "this.repository.save(existingUser)",
              "line": 125,
              "type": "call_expression"
            },
            {
              "name": "this.cache.set",
              "snippet": "this.cache.set(id, updatedUser)",
              "line": 126,
              "type": "call_expression"
            },
            {
              "name": "deleteUser",
              "snippet": "async deleteUser(id) {\n        await this.repository.delete(id);\n        this.cache.delete(id);\n        userCount--;\n        return true;\n    }",
              "line": 136,
              "type": "method"
            },
            {
              "name": "this.repository.delete",
              "snippet": "this.repository.delete(id)",
              "line": 137,
              "type": "call_expression"
            },
            {
              "name": "this.cache.delete",
              "snippet": "this.cache.delete(id)",
              "line": 138,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.js",
          "start_line": 69,
          "end_line": 142
        },
        {
          "symbol_name": "updateUser",
          "symbol_type": "method",
          "full_code": "    async updateUser(id, updateData) {\n        const existingUser = await this.getUser(id);\n        Object.assign(existingUser, updateData);\n        \n        const updatedUser = await this.repository.save(existingUser);\n        this.cache.set(id, updatedUser);\n        \n        return updatedUser;\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "this.getUser",
              "snippet": "this.getUser(id)",
              "line": 122,
              "type": "call_expression"
            },
            {
              "name": "Object.assign",
              "snippet": "Object.assign(existingUser, updateData)",
              "line": 123,
              "type": "call_expression"
            },
            {
              "name": "this.repository.save",
              "snippet": "this.repository.save(existingUser)",
              "line": 125,
              "type": "call_expression"
            },
            {
              "name": "this.cache.set",
              "snippet": "this.cache.set(id, updatedUser)",
              "line": 126,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.js",
          "start_line": 121,
          "end_line": 129
        },
        {
          "symbol_name": "getUser",
          "symbol_type": "method",
          "full_code": "    async getUser(id) {\n        if (this.cache.has(id)) {\n            return this.cache.get(id);\n        }\n\n        try {\n            const user = await this.repository.findById(id);\n            this.cache.set(id, user);\n            this.logger.info(`Retrieved user: ${user.name}`);\n            return user;\n        } catch (error) {\n            this.logger.error(`Failed to get user ${id}:`, error);\n            throw error;\n        }\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "this.cache.has",
              "snippet": "this.cache.has(id)",
              "line": 82,
              "type": "call_expression"
            },
            {
              "name": "this.cache.get",
              "snippet": "this.cache.get(id)",
              "line": 83,
              "type": "call_expression"
            },
            {
              "name": "this.repository.findById",
              "snippet": "this.repository.findById(id)",
              "line": 87,
              "type": "call_expression"
            },
            {
              "name": "this.cache.set",
              "snippet": "this.cache.set(id, user)",
              "line": 88,
              "type": "call_expression"
            },
            {
              "name": "this.logger.info",
              "snippet": "this.logger.info(`Retrieved user: ${user.name}`)",
              "line": 89,
              "type": "call_expression"
            },
            {
              "name": "this.logger.error",
              "snippet": "this.logger.error(`Failed to get user ${id}:`, error)",
              "line": 92,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.js",
          "start_line": 81,
          "end_line": 95
        },
        {
          "symbol_name": "deleteUser",
          "symbol_type": "method",
          "full_code": "    async deleteUser(id) {\n        await this.repository.delete(id);\n        this.cache.delete(id);\n        userCount--;\n        return true;\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "this.repository.delete",
              "snippet": "this.repository.delete(id)",
              "line": 137,
              "type": "call_expression"
            },
            {
              "name": "this.cache.delete",
              "snippet": "this.cache.delete(id)",
              "line": 138,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.js",
          "start_line": 136,
          "end_line": 141
        },
        {
          "symbol_name": "findAll",
          "symbol_type": "method",
          "full_code": "    async findAll() {\n        return Array.from(this.users.values());\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "Array.from",
              "snippet": "Array.from(this.users.values())",
              "line": 236,
              "type": "call_expression"
            },
            {
              "name": "this.users.values",
              "snippet": "this.users.values()",
              "line": 236,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.js",
          "start_line": 235,
          "end_line": 237
        },
        {
          "symbol_name": "handleFormSubmit",
          "symbol_type": "function",
          "full_code": "function handleFormSubmit(event) {\n    event.preventDefault();\n    const formData = new FormData(event.target);\n    const userData = Object.fromEntries(formData);\n    console.log('Form submitted with data:', userData);\n}",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "event.preventDefault",
              "snippet": "event.preventDefault()",
              "line": 247,
              "type": "call_expression"
            },
            {
              "name": "Object.fromEntries",
              "snippet": "Object.fromEntries(formData)",
              "line": 249,
              "type": "call_expression"
            },
            {
              "name": "console.log",
              "snippet": "console.log('Form submitted with data:', userData)",
              "line": 250,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.js",
          "start_line": 246,
          "end_line": 251
        },
        {
          "symbol_name": "defaultConfig",
          "symbol_type": "variable",
          "full_code": "    const defaultConfig = {\n        maxUsers: MAX_USERS,\n        timeout: DEFAULT_TIMEOUT\n    };",
          "doc_comment": "// Module initialization",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.js",
          "start_line": 258,
          "end_line": 261
        },
        {
          "symbol_name": "generateUserId",
          "symbol_type": "function",
          "full_code": "function generateUserId() {\n    return Math.floor(Math.random() * 1000000);\n}",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "Math.floor",
              "snippet": "Math.floor(Math.random() * 1000000)",
              "line": 151,
              "type": "call_expression"
            },
            {
              "name": "Math.random",
              "snippet": "Math.random()",
              "line": 151,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.js",
          "start_line": 150,
          "end_line": 152
        },
        {
          "symbol_name": "User",
          "symbol_type": "class",
          "full_code": "class User {\n    constructor(id, name, email) {\n        this.id = id;\n        this.name = name;\n        this.email = email;\n        this.createdAt = new Date();\n        this.active = true;\n    }\n\n    /**\n     * Get user display name\n     * @returns {string} Display name\n     */\n    getDisplayName() {\n        return `${this.name} (${this.email})`;\n    }\n\n    /**\n     * Activate the user\n     */\n    activate() {\n        this.active = true;\n    }\n\n    /**\n     * Deactivate the user\n     */\n    deactivate() {\n        this.active = false;\n    }\n\n    /**\n     * Static method to create user from object\n     * @param {Object} userData - User data object\n     * @returns {User} New user instance\n     */\n    static fromObject(userData) {\n        return new User(userData.id, userData.name, userData.email);\n    }\n\n    /**\n     * Static method to validate user data\n     * @param {Object} userData - User data to validate\n     * @returns {boolean} True if valid\n     */\n    static isValid(userData) {\n        return userData \u0026\u0026 userData.name \u0026\u0026 userData.email;\n    }\n}",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "constructor",
              "snippet": "constructor(id, name, email) {\n        this.id = id;\n        this.name = name;\n        this.email = email;\n        this.createdAt = new Date();\n        this.active = true;\n    }",
              "line": 17,
              "type": "method"
            },
            {
              "name": "getDisplayName",
              "snippet": "getDisplayName() {\n        return `${this.name} (${this.email})`;\n    }",
              "line": 29,
              "type": "method"
            },
            {
              "name": "activate",
              "snippet": "activate() {\n        this.active = true;\n    }",
              "line": 36,
              "type": "method"
            },
            {
              "name": "deactivate",
              "snippet": "deactivate() {\n        this.active = false;\n    }",
              "line": 43,
              "type": "method"
            },
            {
              "name": "fromObject",
              "snippet": "static fromObject(userData) {\n        return new User(userData.id, userData.name, userData.email);\n    }",
              "line": 52,
              "type": "method"
            },
            {
              "name": "isValid",
              "snippet": "static isValid(userData) {\n        return userData \u0026\u0026 userData.name \u0026\u0026 userData.email;\n    }",
              "line": 61,
              "type": "method"
            }
          ],
          "file_path": "test/example.js",
          "start_line": 16,
          "end_line": 64
        },
        {
          "symbol_name": "constructor",
          "symbol_type": "method",
          "full_code": "    constructor(id, name, email) {\n        this.id = id;\n        this.name = name;\n        this.email = email;\n        this.createdAt = new Date();\n        this.active = true;\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.js",
          "start_line": 17,
          "end_line": 23
        },
        {
          "symbol_name": "getDisplayName",
          "symbol_type": "method",
          "full_code": "    getDisplayName() {\n        return `${this.name} (${this.email})`;\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.js",
          "start_line": 29,
          "end_line": 31
        },
        {
          "symbol_name": "fromObject",
          "symbol_type": "method",
          "full_code": "    static fromObject(userData) {\n        return new User(userData.id, userData.name, userData.email);\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.js",
          "start_line": 52,
          "end_line": 54
        },
        {
          "symbol_name": "createLogger",
          "symbol_type": "function",
          "full_code": "function createLogger(prefix) {\n    return {\n        info: (message) =\u003e console.log(`[${prefix}] INFO: ${message}`),\n        error: (message) =\u003e console.error(`[${prefix}] ERROR: ${message}`),\n        debug: (message) =\u003e console.debug(`[${prefix}] DEBUG: ${message}`)\n    };\n}",
          "doc_comment": "// Higher-order function",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "console.log",
              "snippet": "console.log(`[${prefix}] INFO: ${message}`)",
              "line": 188,
              "type": "call_expression"
            },
            {
              "name": "console.error",
              "snippet": "console.error(`[${prefix}] ERROR: ${message}`)",
              "line": 189,
              "type": "call_expression"
            },
            {
              "name": "console.debug",
              "snippet": "console.debug(`[${prefix}] DEBUG: ${message}`)",
              "line": 190,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.js",
          "start_line": 186,
          "end_line": 192
        }
      ],
      "related_files": []
    },
    {
      "file_path": "test/example.php",
      "change_type": "Added",
      "diff_hunk": "@@ -0,0 +1,1033 @@\n+\u003c?php\n+\n+/**\n+ * User management system in PHP\n+ */\n+\n+namespace UserManagement;\n+\n+use DateTime;\n+use Exception;\n+use InvalidArgumentException;\n+use PDO;\n+\n+// Constants\n+const MAX_USERS = 1000;\n+const DEFAULT_STATUS = 'active';\n+const CACHE_TTL = 300;\n+\n+// Global variables\n+$userCount = 0;\n+$isInitialized = false;\n+\n+/**\n+ * User status enumeration\n+ */\n+class UserStatus\n+{\n+    const ACTIVE = 'active';\n+    const INACTIVE = 'inactive';\n+    const SUSPENDED = 'suspended';\n+    const DELETED = 'deleted';\n+\n+    public static function getValidStatuses(): array\n+    {\n+        return [\n+            self::ACTIVE,\n+            self::INACTIVE,\n+            self::SUSPENDED,\n+            self::DELETED\n+        ];\n+    }\n+\n+    public static function isValid(string $status): bool\n+    {\n+        return in_array($status, self::getValidStatuses());\n+    }\n+}\n+\n+/**\n+ * Permission enumeration\n+ */\n+class Permission\n+{\n+    const READ = 'read';\n+    const WRITE = 'write';\n+    const DELETE = 'delete';\n+    const ADMIN = 'admin';\n+\n+    public static function getValidPermissions(): array\n+    {\n+        return [self::READ, self::WRITE, self::DELETE, self::ADMIN];\n+    }\n+}\n+\n+/**\n+ * Custom exception classes\n+ */\n+class UserNotFoundException extends Exception\n+{\n+    public function __construct(int $id)\n+    {\n+        parent::__construct(\"User with ID {$id} not found\");\n+    }\n+}\n+\n+class ValidationException extends Exception\n+{\n+    public function __construct(string $field, string $message)\n+    {\n+        parent::__construct(\"Validation error for {$field}: {$message}\");\n+    }\n+}\n+\n+class DuplicateEmailException extends Exception\n+{\n+    public function __construct(string $email)\n+    {\n+        parent::__construct(\"User with email {$email} already exists\");\n+    }\n+}\n+\n+/**\n+ * User repository interface\n+ */\n+interface UserRepositoryInterface\n+{\n+    public function findById(int $id): ?User;\n+    public function save(User $user): User;\n+    public function delete(int $id): bool;\n+    public function findByEmail(string $email): ?User;\n+    public function findAll(): array;\n+    public function findByStatus(string $status): array;\n+}\n+\n+/**\n+ * User service interface\n+ */\n+interface UserServiceInterface\n+{\n+    public function getUser(int $id): User;\n+    public function createUser(CreateUserRequest $request): User;\n+    public function updateUser(int $id, UpdateUserRequest $request): User;\n+    public function deleteUser(int $id): bool;\n+    public function listUsers(?string $status = null): array;\n+    public function searchUsers(string $query): array;\n+}\n+\n+/**\n+ * Cacheable trait for adding caching functionality\n+ */\n+trait Cacheable\n+{\n+    private array $cache = [];\n+\n+    protected function getCacheKey(string $method, array $args): string\n+    {\n+        return $method . '_' . md5(serialize($args));\n+    }\n+\n+    protected function getFromCache(string $key)\n+    {\n+        if (isset($this-\u003ecache[$key])) {\n+            $item = $this-\u003ecache[$key];\n+            if (time() - $item['timestamp'] \u003c CACHE_TTL) {\n+                return $item['data'];\n+            }\n+            unset($this-\u003ecache[$key]);\n+        }\n+        return null;\n+    }\n+\n+    protected function setCache(string $key, $data): void\n+    {\n+        $this-\u003ecache[$key] = [\n+            'data' =\u003e $data,\n+            'timestamp' =\u003e time()\n+        ];\n+    }\n+\n+    protected function clearCache(): void\n+    {\n+        $this-\u003ecache = [];\n+    }\n+}\n+\n+/**\n+ * Loggable trait for adding logging functionality\n+ */\n+trait Loggable\n+{\n+    private array $logs = [];\n+\n+    protected function log(string $level, string $message, array $context = []): void\n+    {\n+        $this-\u003elogs[] = [\n+            'timestamp' =\u003e new DateTime(),\n+            'level' =\u003e $level,\n+            'message' =\u003e $message,\n+            'context' =\u003e $context\n+        ];\n+    }\n+\n+    protected function info(string $message, array $context = []): void\n+    {\n+        $this-\u003elog('INFO', $message, $context);\n+    }\n+\n+    protected function error(string $message, array $context = []): void\n+    {\n+        $this-\u003elog('ERROR', $message, $context);\n+    }\n+\n+    public function getLogs(): array\n+    {\n+        return $this-\u003elogs;\n+    }\n+}\n+\n+/**\n+ * Create user request class\n+ */\n+class CreateUserRequest\n+{\n+    public string $name;\n+    public string $email;\n+    public array $permissions;\n+    public array $metadata;\n+\n+    public function __construct(\n+        string $name = '',\n+        string $email = '',\n+        array $permissions = [],\n+        array $metadata = []\n+    ) {\n+        $this-\u003ename = $name;\n+        $this-\u003eemail = $email;\n+        $this-\u003epermissions = $permissions;\n+        $this-\u003emetadata = $metadata;\n+    }\n+\n+    public function validate(): void\n+    {\n+        if (empty($this-\u003ename)) {\n+            throw new ValidationException('name', 'Name is required');\n+        }\n+\n+        if (empty($this-\u003eemail) || !filter_var($this-\u003eemail, FILTER_VALIDATE_EMAIL)) {\n+            throw new ValidationException('email', 'Valid email is required');\n+        }\n+\n+        foreach ($this-\u003epermissions as $permission) {\n+            if (!in_array($permission, Permission::getValidPermissions())) {\n+                throw new ValidationException('permissions', \"Invalid permission: {$permission}\");\n+            }\n+        }\n+    }\n+}\n+\n+/**\n+ * Update user request class\n+ */\n+class UpdateUserRequest\n+{\n+    public ?string $name = null;\n+    public ?string $email = null;\n+    public ?string $status = null;\n+    public ?array $permissions = null;\n+    public ?array $metadata = null;\n+\n+    public function hasUpdates(): bool\n+    {\n+        return $this-\u003ename !== null ||\n+               $this-\u003eemail !== null ||\n+               $this-\u003estatus !== null ||\n+               $this-\u003epermissions !== null ||\n+               $this-\u003emetadata !== null;\n+    }\n+}\n+\n+/**\n+ * User entity class\n+ */\n+class User\n+{\n+    private int $id;\n+    private string $name;\n+    private string $email;\n+    private string $status;\n+    private DateTime $createdAt;\n+    private ?DateTime $lastLoginAt = null;\n+    private array $permissions;\n+    private array $metadata;\n+\n+    public function __construct(\n+        int $id = 0,\n+        string $name = '',\n+        string $email = '',\n+        string $status = UserStatus::ACTIVE,\n+        array $permissions = [],\n+        array $metadata = []\n+    ) {\n+        $this-\u003eid = $id;\n+        $this-\u003ename = $name;\n+        $this-\u003eemail = $email;\n+        $this-\u003estatus = $status;\n+        $this-\u003ecreatedAt = new DateTime();\n+        $this-\u003epermissions = $permissions;\n+        $this-\u003emetadata = $metadata;\n+    }\n+\n+    // Getters\n+    public function getId(): int\n+    {\n+        return $this-\u003eid;\n+    }\n+\n+    public function getName(): string\n+    {\n+        return $this-\u003ename;\n+    }\n+\n+    public function getEmail(): string\n+    {\n+        return $this-\u003eemail;\n+    }\n+\n+    public function getStatus(): string\n+    {\n+        return $this-\u003estatus;\n+    }\n+\n+    public function getCreatedAt(): DateTime\n+    {\n+        return $this-\u003ecreatedAt;\n+    }\n+\n+    public function getLastLoginAt(): ?DateTime\n+    {\n+        return $this-\u003elastLoginAt;\n+    }\n+\n+    public function getPermissions(): array\n+    {\n+        return $this-\u003epermissions;\n+    }\n+\n+    public function getMetadata(): array\n+    {\n+        return $this-\u003emetadata;\n+    }\n+\n+    // Setters\n+    public function setId(int $id): void\n+    {\n+        $this-\u003eid = $id;\n+    }\n+\n+    public function setName(string $name): void\n+    {\n+        $this-\u003ename = $name;\n+    }\n+\n+    public function setEmail(string $email): void\n+    {\n+        $this-\u003eemail = $email;\n+    }\n+\n+    public function setStatus(string $status): void\n+    {\n+        if (!UserStatus::isValid($status)) {\n+            throw new InvalidArgumentException(\"Invalid status: {$status}\");\n+        }\n+        $this-\u003estatus = $status;\n+    }\n+\n+    public function setPermissions(array $permissions): void\n+    {\n+        $this-\u003epermissions = $permissions;\n+    }\n+\n+    public function setMetadata(array $metadata): void\n+    {\n+        $this-\u003emetadata = $metadata;\n+    }\n+\n+    // Business methods\n+    public function activate(): void\n+    {\n+        $this-\u003estatus = UserStatus::ACTIVE;\n+    }\n+\n+    public function deactivate(): void\n+    {\n+        $this-\u003estatus = UserStatus::INACTIVE;\n+    }\n+\n+    public function suspend(): void\n+    {\n+        $this-\u003estatus = UserStatus::SUSPENDED;\n+    }\n+\n+    public function hasPermission(string $permission): bool\n+    {\n+        return in_array($permission, $this-\u003epermissions) || \n+               in_array(Permission::ADMIN, $this-\u003epermissions);\n+    }\n+\n+    public function addPermission(string $permission): void\n+    {\n+        if (!$this-\u003ehasPermission($permission)) {\n+            $this-\u003epermissions[] = $permission;\n+        }\n+    }\n+\n+    public function removePermission(string $permission): void\n+    {\n+        $this-\u003epermissions = array_values(array_filter(\n+            $this-\u003epermissions,\n+            fn($p) =\u003e $p !== $permission\n+        ));\n+    }\n+\n+    public function updateLastLogin(): void\n+    {\n+        $this-\u003elastLoginAt = new DateTime();\n+    }\n+\n+    public function getDisplayName(): string\n+    {\n+        return \"{$this-\u003ename} ({$this-\u003eemail})\";\n+    }\n+\n+    public function isActive(): bool\n+    {\n+        return $this-\u003estatus === UserStatus::ACTIVE;\n+    }\n+\n+    public function toArray(): array\n+    {\n+        return [\n+            'id' =\u003e $this-\u003eid,\n+            'name' =\u003e $this-\u003ename,\n+            'email' =\u003e $this-\u003eemail,\n+            'status' =\u003e $this-\u003estatus,\n+            'created_at' =\u003e $this-\u003ecreatedAt-\u003eformat('Y-m-d H:i:s'),\n+            'last_login_at' =\u003e $this-\u003elastLoginAt?-\u003eformat('Y-m-d H:i:s'),\n+            'permissions' =\u003e $this-\u003epermissions,\n+            'metadata' =\u003e $this-\u003emetadata\n+        ];\n+    }\n+\n+    public static function fromArray(array $data): self\n+    {\n+        $user = new self(\n+            $data['id'] ?? 0,\n+            $data['name'] ?? '',\n+            $data['email'] ?? '',\n+            $data['status'] ?? UserStatus::ACTIVE,\n+            $data['permissions'] ?? [],\n+            $data['metadata'] ?? []\n+        );\n+\n+        if (isset($data['created_at'])) {\n+            $user-\u003ecreatedAt = new DateTime($data['created_at']);\n+        }\n+\n+        if (isset($data['last_login_at'])) {\n+            $user-\u003elastLoginAt = new DateTime($data['last_login_at']);\n+        }\n+\n+        return $user;\n+    }\n+\n+    public function __toString(): string\n+    {\n+        return \"User[{$this-\u003eid}]: {$this-\u003egetDisplayName()}\";\n+    }\n+}\n+\n+/**\n+ * Memory-based user repository implementation\n+ */\n+class MemoryUserRepository implements UserRepositoryInterface\n+{\n+    use Loggable;\n+\n+    private array $users = [];\n+    private int $nextId = 1;\n+\n+    public function findById(int $id): ?User\n+    {\n+        return $this-\u003eusers[$id] ?? null;\n+    }\n+\n+    public function save(User $user): User\n+    {\n+        if ($user-\u003egetId() === 0) {\n+            $user-\u003esetId($this-\u003enextId++);\n+        }\n+\n+        $this-\u003eusers[$user-\u003egetId()] = $user;\n+        $this-\u003einfo(\"Saved user\", ['id' =\u003e $user-\u003egetId(), 'name' =\u003e $user-\u003egetName()]);\n+\n+        return $user;\n+    }\n+\n+    public function delete(int $id): bool\n+    {\n+        if (isset($this-\u003eusers[$id])) {\n+            unset($this-\u003eusers[$id]);\n+            $this-\u003einfo(\"Deleted user\", ['id' =\u003e $id]);\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    public function findByEmail(string $email): ?User\n+    {\n+        foreach ($this-\u003eusers as $user) {\n+            if ($user-\u003egetEmail() === $email) {\n+                return $user;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public function findAll(): array\n+    {\n+        return array_values($this-\u003eusers);\n+    }\n+\n+    public function findByStatus(string $status): array\n+    {\n+        return array_values(array_filter(\n+            $this-\u003eusers,\n+            fn(User $user) =\u003e $user-\u003egetStatus() === $status\n+        ));\n+    }\n+\n+    public function count(): int\n+    {\n+        return count($this-\u003eusers);\n+    }\n+\n+    public function clear(): void\n+    {\n+        $this-\u003eusers = [];\n+        $this-\u003enextId = 1;\n+    }\n+}\n+\n+/**\n+ * Database user repository implementation\n+ */\n+class DatabaseUserRepository implements UserRepositoryInterface\n+{\n+    use Loggable;\n+\n+    private PDO $pdo;\n+\n+    public function __construct(PDO $pdo)\n+    {\n+        $this-\u003epdo = $pdo;\n+        $this-\u003einitializeTable();\n+    }\n+\n+    private function initializeTable(): void\n+    {\n+        $sql = \"\n+            CREATE TABLE IF NOT EXISTS users (\n+                id INTEGER PRIMARY KEY AUTOINCREMENT,\n+                name TEXT NOT NULL,\n+                email TEXT NOT NULL UNIQUE,\n+                status TEXT NOT NULL,\n+                created_at TEXT NOT NULL,\n+                last_login_at TEXT,\n+                permissions TEXT,\n+                metadata TEXT\n+            )\n+        \";\n+\n+        $this-\u003epdo-\u003eexec($sql);\n+    }\n+\n+    public function findById(int $id): ?User\n+    {\n+        $stmt = $this-\u003epdo-\u003eprepare('SELECT * FROM users WHERE id = ?');\n+        $stmt-\u003eexecute([$id]);\n+        $data = $stmt-\u003efetch(PDO::FETCH_ASSOC);\n+\n+        return $data ? $this-\u003emapToUser($data) : null;\n+    }\n+\n+    public function save(User $user): User\n+    {\n+        if ($user-\u003egetId() === 0) {\n+            return $this-\u003einsert($user);\n+        } else {\n+            return $this-\u003eupdate($user);\n+        }\n+    }\n+\n+    private function insert(User $user): User\n+    {\n+        $sql = \"\n+            INSERT INTO users (name, email, status, created_at, last_login_at, permissions, metadata)\n+            VALUES (?, ?, ?, ?, ?, ?, ?)\n+        \";\n+\n+        $stmt = $this-\u003epdo-\u003eprepare($sql);\n+        $stmt-\u003eexecute([\n+            $user-\u003egetName(),\n+            $user-\u003egetEmail(),\n+            $user-\u003egetStatus(),\n+            $user-\u003egetCreatedAt()-\u003eformat('Y-m-d H:i:s'),\n+            $user-\u003egetLastLoginAt()?-\u003eformat('Y-m-d H:i:s'),\n+            json_encode($user-\u003egetPermissions()),\n+            json_encode($user-\u003egetMetadata())\n+        ]);\n+\n+        $user-\u003esetId((int) $this-\u003epdo-\u003elastInsertId());\n+        return $user;\n+    }\n+\n+    private function update(User $user): User\n+    {\n+        $sql = \"\n+            UPDATE users \n+            SET name = ?, email = ?, status = ?, last_login_at = ?, permissions = ?, metadata = ?\n+            WHERE id = ?\n+        \";\n+\n+        $stmt = $this-\u003epdo-\u003eprepare($sql);\n+        $stmt-\u003eexecute([\n+            $user-\u003egetName(),\n+            $user-\u003egetEmail(),\n+            $user-\u003egetStatus(),\n+            $user-\u003egetLastLoginAt()?-\u003eformat('Y-m-d H:i:s'),\n+            json_encode($user-\u003egetPermissions()),\n+            json_encode($user-\u003egetMetadata()),\n+            $user-\u003egetId()\n+        ]);\n+\n+        return $user;\n+    }\n+\n+    public function delete(int $id): bool\n+    {\n+        $stmt = $this-\u003epdo-\u003eprepare('DELETE FROM users WHERE id = ?');\n+        $stmt-\u003eexecute([$id]);\n+        return $stmt-\u003erowCount() \u003e 0;\n+    }\n+\n+    public function findByEmail(string $email): ?User\n+    {\n+        $stmt = $this-\u003epdo-\u003eprepare('SELECT * FROM users WHERE email = ?');\n+        $stmt-\u003eexecute([$email]);\n+        $data = $stmt-\u003efetch(PDO::FETCH_ASSOC);\n+\n+        return $data ? $this-\u003emapToUser($data) : null;\n+    }\n+\n+    public function findAll(): array\n+    {\n+        $stmt = $this-\u003epdo-\u003equery('SELECT * FROM users ORDER BY created_at');\n+        $users = [];\n+\n+        while ($data = $stmt-\u003efetch(PDO::FETCH_ASSOC)) {\n+            $users[] = $this-\u003emapToUser($data);\n+        }\n+\n+        return $users;\n+    }\n+\n+    public function findByStatus(string $status): array\n+    {\n+        $stmt = $this-\u003epdo-\u003eprepare('SELECT * FROM users WHERE status = ? ORDER BY created_at');\n+        $stmt-\u003eexecute([$status]);\n+        $users = [];\n+\n+        while ($data = $stmt-\u003efetch(PDO::FETCH_ASSOC)) {\n+            $users[] = $this-\u003emapToUser($data);\n+        }\n+\n+        return $users;\n+    }\n+\n+    private function mapToUser(array $data): User\n+    {\n+        $userData = [\n+            'id' =\u003e (int) $data['id'],\n+            'name' =\u003e $data['name'],\n+            'email' =\u003e $data['email'],\n+            'status' =\u003e $data['status'],\n+            'created_at' =\u003e $data['created_at'],\n+            'last_login_at' =\u003e $data['last_login_at'],\n+            'permissions' =\u003e json_decode($data['permissions'], true) ?? [],\n+            'metadata' =\u003e json_decode($data['metadata'], true) ?? []\n+        ];\n+\n+        return User::fromArray($userData);\n+    }\n+}\n+\n+/**\n+ * User service implementation\n+ */\n+class UserService implements UserServiceInterface\n+{\n+    use Cacheable, Loggable;\n+\n+    private UserRepositoryInterface $repository;\n+\n+    public function __construct(UserRepositoryInterface $repository)\n+    {\n+        $this-\u003erepository = $repository;\n+    }\n+\n+    public function getUser(int $id): User\n+    {\n+        $cacheKey = $this-\u003egetCacheKey('getUser', [$id]);\n+        $cached = $this-\u003egetFromCache($cacheKey);\n+\n+        if ($cached !== null) {\n+            return $cached;\n+        }\n+\n+        $user = $this-\u003erepository-\u003efindById($id);\n+        if ($user === null) {\n+            throw new UserNotFoundException($id);\n+        }\n+\n+        $this-\u003esetCache($cacheKey, $user);\n+        return $user;\n+    }\n+\n+    public function createUser(CreateUserRequest $request): User\n+    {\n+        $request-\u003evalidate();\n+\n+        $existing = $this-\u003erepository-\u003efindByEmail($request-\u003eemail);\n+        if ($existing !== null) {\n+            throw new DuplicateEmailException($request-\u003eemail);\n+        }\n+\n+        $user = new User(\n+            0,\n+            $request-\u003ename,\n+            $request-\u003eemail,\n+            UserStatus::ACTIVE,\n+            $request-\u003epermissions,\n+            $request-\u003emetadata\n+        );\n+\n+        $savedUser = $this-\u003erepository-\u003esave($user);\n+\n+        global $userCount;\n+        $userCount++;\n+\n+        $this-\u003einfo(\"Created user\", ['id' =\u003e $savedUser-\u003egetId(), 'name' =\u003e $savedUser-\u003egetName()]);\n+        return $savedUser;\n+    }\n+\n+    public function updateUser(int $id, UpdateUserRequest $request): User\n+    {\n+        if (!$request-\u003ehasUpdates()) {\n+            throw new InvalidArgumentException('No updates provided');\n+        }\n+\n+        $user = $this-\u003egetUser($id);\n+\n+        if ($request-\u003ename !== null) {\n+            $user-\u003esetName($request-\u003ename);\n+        }\n+\n+        if ($request-\u003eemail !== null) {\n+            if (!filter_var($request-\u003eemail, FILTER_VALIDATE_EMAIL)) {\n+                throw new ValidationException('email', 'Invalid email format');\n+            }\n+            $user-\u003esetEmail($request-\u003eemail);\n+        }\n+\n+        if ($request-\u003estatus !== null) {\n+            $user-\u003esetStatus($request-\u003estatus);\n+        }\n+\n+        if ($request-\u003epermissions !== null) {\n+            $user-\u003esetPermissions($request-\u003epermissions);\n+        }\n+\n+        if ($request-\u003emetadata !== null) {\n+            $user-\u003esetMetadata(array_merge($user-\u003egetMetadata(), $request-\u003emetadata));\n+        }\n+\n+        $updatedUser = $this-\u003erepository-\u003esave($user);\n+        $this-\u003eclearCache();\n+\n+        return $updatedUser;\n+    }\n+\n+    public function deleteUser(int $id): bool\n+    {\n+        $user = $this-\u003egetUser($id);\n+        $success = $this-\u003erepository-\u003edelete($id);\n+\n+        if ($success) {\n+            global $userCount;\n+            $userCount--;\n+            $this-\u003eclearCache();\n+            $this-\u003einfo(\"Deleted user\", ['id' =\u003e $id, 'name' =\u003e $user-\u003egetName()]);\n+        }\n+\n+        return $success;\n+    }\n+\n+    public function listUsers(?string $status = null): array\n+    {\n+        if ($status !== null) {\n+            return $this-\u003erepository-\u003efindByStatus($status);\n+        }\n+\n+        return $this-\u003erepository-\u003efindAll();\n+    }\n+\n+    public function searchUsers(string $query): array\n+    {\n+        $users = $this-\u003erepository-\u003efindAll();\n+        $lowerQuery = strtolower($query);\n+\n+        return array_filter($users, function (User $user) use ($lowerQuery) {\n+            return str_contains(strtolower($user-\u003egetName()), $lowerQuery) ||\n+                   str_contains(strtolower($user-\u003egetEmail()), $lowerQuery);\n+        });\n+    }\n+}\n+\n+/**\n+ * User manager class\n+ */\n+class UserManager\n+{\n+    use Loggable;\n+\n+    private UserServiceInterface $service;\n+\n+    public function __construct(UserServiceInterface $service)\n+    {\n+        $this-\u003eservice = $service;\n+    }\n+\n+    public function bulkCreateUsers(array $requests): array\n+    {\n+        $createdUsers = [];\n+\n+        foreach ($requests as $request) {\n+            try {\n+                if ($request instanceof CreateUserRequest) {\n+                    $user = $this-\u003eservice-\u003ecreateUser($request);\n+                    $createdUsers[] = $user;\n+                } else {\n+                    $this-\u003eerror(\"Invalid request type\", ['request' =\u003e $request]);\n+                }\n+            } catch (Exception $e) {\n+                $this-\u003eerror(\"Failed to create user\", [\n+                    'request' =\u003e $request,\n+                    'error' =\u003e $e-\u003egetMessage()\n+                ]);\n+            }\n+        }\n+\n+        return $createdUsers;\n+    }\n+\n+    public function getUserStats(): array\n+    {\n+        $users = $this-\u003eservice-\u003elistUsers();\n+\n+        $stats = [\n+            'total' =\u003e count($users),\n+            'active' =\u003e 0,\n+            'inactive' =\u003e 0,\n+            'suspended' =\u003e 0,\n+            'deleted' =\u003e 0\n+        ];\n+\n+        foreach ($users as $user) {\n+            $stats[$user-\u003egetStatus()]++;\n+        }\n+\n+        return $stats;\n+    }\n+\n+    public function exportUsers(string $format = 'json'): string\n+    {\n+        $users = $this-\u003eservice-\u003elistUsers();\n+        $userData = array_map(fn(User $user) =\u003e $user-\u003etoArray(), $users);\n+\n+        switch ($format) {\n+            case 'json':\n+                return json_encode($userData, JSON_PRETTY_PRINT);\n+\n+            case 'csv':\n+                if (empty($userData)) {\n+                    return '';\n+                }\n+\n+                $output = fopen('php://temp', 'w');\n+                fputcsv($output, array_keys($userData[0]));\n+\n+                foreach ($userData as $row) {\n+                    fputcsv($output, $row);\n+                }\n+\n+                rewind($output);\n+                $csv = stream_get_contents($output);\n+                fclose($output);\n+\n+                return $csv;\n+\n+            default:\n+                throw new InvalidArgumentException(\"Unsupported format: {$format}\");\n+        }\n+    }\n+\n+    public function importUsers(string $data, string $format = 'json'): array\n+    {\n+        switch ($format) {\n+            case 'json':\n+                $userData = json_decode($data, true);\n+                break;\n+\n+            case 'csv':\n+                $userData = $this-\u003eparseCsv($data);\n+                break;\n+\n+            default:\n+                throw new InvalidArgumentException(\"Unsupported format: {$format}\");\n+        }\n+\n+        $requests = [];\n+        foreach ($userData as $data) {\n+            $requests[] = new CreateUserRequest(\n+                $data['name'] ?? '',\n+                $data['email'] ?? '',\n+                $data['permissions'] ?? [],\n+                $data['metadata'] ?? []\n+            );\n+        }\n+\n+        return $this-\u003ebulkCreateUsers($requests);\n+    }\n+\n+    private function parseCsv(string $data): array\n+    {\n+        $lines = explode(\"\\n\", trim($data));\n+        if (empty($lines)) {\n+            return [];\n+        }\n+\n+        $headers = str_getcsv(array_shift($lines));\n+        $result = [];\n+\n+        foreach ($lines as $line) {\n+            if (trim($line) !== '') {\n+                $values = str_getcsv($line);\n+                $result[] = array_combine($headers, $values);\n+            }\n+        }\n+\n+        return $result;\n+    }\n+}\n+\n+// Utility functions\n+function validateEmail(string $email): bool\n+{\n+    return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;\n+}\n+\n+function generateRandomUser(): CreateUserRequest\n+{\n+    $names = ['Alice', 'Bob', 'Charlie', 'Diana', 'Eve', 'Frank'];\n+    $domains = ['example.com', 'test.org', 'demo.net'];\n+\n+    $name = $names[array_rand($names)] . ' ' . ucfirst(substr(md5(rand()), 0, 6));\n+    $email = strtolower(str_replace(' ', '.', $name)) . '@' . $domains[array_rand($domains)];\n+\n+    return new CreateUserRequest($name, $email, [Permission::READ]);\n+}\n+\n+function createUserService(string $type = 'memory', ?PDO $pdo = null): UserServiceInterface\n+{\n+    switch ($type) {\n+        case 'memory':\n+            $repository = new MemoryUserRepository();\n+            break;\n+\n+        case 'database':\n+            if ($pdo === null) {\n+                throw new InvalidArgumentException('PDO instance required for database repository');\n+            }\n+            $repository = new DatabaseUserRepository($pdo);\n+            break;\n+\n+        default:\n+            throw new InvalidArgumentException(\"Unknown repository type: {$type}\");\n+    }\n+\n+    return new UserService($repository);\n+}\n+\n+function initializeUserSystem(): void\n+{\n+    global $isInitialized, $userCount;\n+\n+    $isInitialized = true;\n+    $userCount = 0;\n+\n+    echo \"User management system initialized\\n\";\n+}\n+\n+// Main execution\n+function main(): void\n+{\n+    try {\n+        initializeUserSystem();\n+\n+        $service = createUserService('memory');\n+        $manager = new UserManager($service);\n+\n+        // Create test users\n+        $requests = [\n+            new CreateUserRequest('Alice Johnson', 'alice@example.com', [Permission::READ, Permission::WRITE]),\n+            new CreateUserRequest('Bob Smith', 'bob@example.com', [Permission::READ]),\n+            new CreateUserRequest('Charlie Admin', 'charlie@example.com', [Permission::ADMIN])\n+        ];\n+\n+        $createdUsers = $manager-\u003ebulkCreateUsers($requests);\n+        echo \"Created \" . count($createdUsers) . \" users\\n\";\n+\n+        // Get stats\n+        $stats = $manager-\u003egetUserStats();\n+        echo \"User statistics:\\n\";\n+        foreach ($stats as $key =\u003e $value) {\n+            echo \"  {$key}: {$value}\\n\";\n+        }\n+\n+        // Export users\n+        $exportedData = $manager-\u003eexportUsers('json');\n+        echo \"Exported users:\\n{$exportedData}\\n\";\n+\n+    } catch (Exception $e) {\n+        echo \"Error: \" . $e-\u003egetMessage() . \"\\n\";\n+        echo $e-\u003egetTraceAsString() . \"\\n\";\n+    }\n+}\n+\n+// Execute if this is the main file\n+if (basename(__FILE__) === basename($_SERVER['SCRIPT_NAME'])) {\n+    main();\n+} \n\\ No newline at end of file",
      "affected_symbols": null,
      "related_files": []
    },
    {
      "file_path": "test/example.py",
      "change_type": "Added",
      "diff_hunk": "@@ -0,0 +1,383 @@\n+\"\"\"\n+User management system in Python\n+\"\"\"\n+\n+import asyncio\n+import logging\n+from abc import ABC, abstractmethod\n+from dataclasses import dataclass, field\n+from datetime import datetime\n+from enum import Enum\n+from typing import Dict, List, Optional, Protocol, Union\n+from functools import wraps\n+import json\n+\n+# Constants\n+MAX_USERS = 1000\n+DEFAULT_TIMEOUT = 5.0\n+\n+# Global variables\n+user_count = 0\n+is_initialized = False\n+\n+class UserStatus(Enum):\n+    \"\"\"User status enumeration\"\"\"\n+    ACTIVE = \"active\"\n+    INACTIVE = \"inactive\"\n+    SUSPENDED = \"suspended\"\n+    DELETED = \"deleted\"\n+\n+@dataclass\n+class User:\n+    \"\"\"User entity class\"\"\"\n+    id: int\n+    name: str\n+    email: str\n+    status: UserStatus = UserStatus.ACTIVE\n+    created_at: datetime = field(default_factory=datetime.now)\n+    metadata: Dict[str, str] = field(default_factory=dict)\n+    \n+    def __post_init__(self):\n+        \"\"\"Post-initialization processing\"\"\"\n+        if not self.email or '@' not in self.email:\n+            raise ValueError(\"Invalid email address\")\n+    \n+    @property\n+    def display_name(self) -\u003e str:\n+        \"\"\"Get user display name\"\"\"\n+        return f\"{self.name} ({self.email})\"\n+    \n+    @property\n+    def is_active(self) -\u003e bool:\n+        \"\"\"Check if user is active\"\"\"\n+        return self.status == UserStatus.ACTIVE\n+    \n+    def activate(self) -\u003e None:\n+        \"\"\"Activate the user\"\"\"\n+        self.status = UserStatus.ACTIVE\n+    \n+    def deactivate(self) -\u003e None:\n+        \"\"\"Deactivate the user\"\"\"\n+        self.status = UserStatus.INACTIVE\n+    \n+    def suspend(self) -\u003e None:\n+        \"\"\"Suspend the user\"\"\"\n+        self.status = UserStatus.SUSPENDED\n+    \n+    def to_dict(self) -\u003e Dict:\n+        \"\"\"Convert user to dictionary\"\"\"\n+        return {\n+            'id': self.id,\n+            'name': self.name,\n+            'email': self.email,\n+            'status': self.status.value,\n+            'created_at': self.created_at.isoformat(),\n+            'metadata': self.metadata\n+        }\n+    \n+    @classmethod\n+    def from_dict(cls, data: Dict) -\u003e 'User':\n+        \"\"\"Create user from dictionary\"\"\"\n+        return cls(\n+            id=data['id'],\n+            name=data['name'],\n+            email=data['email'],\n+            status=UserStatus(data.get('status', UserStatus.ACTIVE.value)),\n+            created_at=datetime.fromisoformat(data.get('created_at', datetime.now().isoformat())),\n+            metadata=data.get('metadata', {})\n+        )\n+\n+class UserRepository(Protocol):\n+    \"\"\"User repository protocol\"\"\"\n+    \n+    async def get_by_id(self, user_id: int) -\u003e Optional[User]:\n+        \"\"\"Get user by ID\"\"\"\n+        ...\n+    \n+    async def save(self, user: User) -\u003e User:\n+        \"\"\"Save user\"\"\"\n+        ...\n+    \n+    async def delete(self, user_id: int) -\u003e bool:\n+        \"\"\"Delete user\"\"\"\n+        ...\n+    \n+    async def find_by_email(self, email: str) -\u003e Optional[User]:\n+        \"\"\"Find user by email\"\"\"\n+        ...\n+    \n+    async def list_all(self) -\u003e List[User]:\n+        \"\"\"List all users\"\"\"\n+        ...\n+\n+class MemoryUserRepository:\n+    \"\"\"In-memory user repository implementation\"\"\"\n+    \n+    def __init__(self):\n+        self._users: Dict[int, User] = {}\n+        self._next_id = 1\n+    \n+    async def get_by_id(self, user_id: int) -\u003e Optional[User]:\n+        \"\"\"Get user by ID\"\"\"\n+        return self._users.get(user_id)\n+    \n+    async def save(self, user: User) -\u003e User:\n+        \"\"\"Save user\"\"\"\n+        if user.id == 0:\n+            user.id = self._next_id\n+            self._next_id += 1\n+        self._users[user.id] = user\n+        return user\n+    \n+    async def delete(self, user_id: int) -\u003e bool:\n+        \"\"\"Delete user\"\"\"\n+        if user_id in self._users:\n+            del self._users[user_id]\n+            return True\n+        return False\n+    \n+    async def find_by_email(self, email: str) -\u003e Optional[User]:\n+        \"\"\"Find user by email\"\"\"\n+        for user in self._users.values():\n+            if user.email == email:\n+                return user\n+        return None\n+    \n+    async def list_all(self) -\u003e List[User]:\n+        \"\"\"List all users\"\"\"\n+        return list(self._users.values())\n+\n+class UserNotFoundError(Exception):\n+    \"\"\"User not found exception\"\"\"\n+    pass\n+\n+class ValidationError(Exception):\n+    \"\"\"Validation error exception\"\"\"\n+    pass\n+\n+def validate_email(email: str) -\u003e bool:\n+    \"\"\"Validate email address\"\"\"\n+    import re\n+    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n+    return re.match(pattern, email) is not None\n+\n+def log_method_call(func):\n+    \"\"\"Decorator to log method calls\"\"\"\n+    @wraps(func)\n+    async def wrapper(*args, **kwargs):\n+        logger = logging.getLogger(__name__)\n+        logger.info(f\"Calling {func.__name__} with args: {args[1:]} kwargs: {kwargs}\")\n+        try:\n+            result = await func(*args, **kwargs)\n+            logger.info(f\"{func.__name__} completed successfully\")\n+            return result\n+        except Exception as e:\n+            logger.error(f\"{func.__name__} failed with error: {e}\")\n+            raise\n+    return wrapper\n+\n+def cache_result(ttl_seconds: int = 300):\n+    \"\"\"Decorator to cache method results\"\"\"\n+    cache = {}\n+    \n+    def decorator(func):\n+        @wraps(func)\n+        async def wrapper(*args, **kwargs):\n+            key = f\"{func.__name__}_{hash(str(args) + str(kwargs))}\"\n+            now = datetime.now()\n+            \n+            if key in cache:\n+                result, timestamp = cache[key]\n+                if (now - timestamp).total_seconds() \u003c ttl_seconds:\n+                    return result\n+            \n+            result = await func(*args, **kwargs)\n+            cache[key] = (result, now)\n+            return result\n+        return wrapper\n+    return decorator\n+\n+class UserService:\n+    \"\"\"User service for business logic\"\"\"\n+    \n+    def __init__(self, repository: UserRepository, logger: Optional[logging.Logger] = None):\n+        self.repository = repository\n+        self.logger = logger or logging.getLogger(__name__)\n+        self._cache: Dict[int, User] = {}\n+    \n+    @log_method_call\n+    async def get_user(self, user_id: int) -\u003e User:\n+        \"\"\"Get user by ID\"\"\"\n+        if user_id in self._cache:\n+            return self._cache[user_id]\n+        \n+        user = await self.repository.get_by_id(user_id)\n+        if not user:\n+            raise UserNotFoundError(f\"User {user_id} not found\")\n+        \n+        self._cache[user_id] = user\n+        return user\n+    \n+    @log_method_call\n+    async def create_user(self, name: str, email: str, **metadata) -\u003e User:\n+        \"\"\"Create new user\"\"\"\n+        if not validate_email(email):\n+            raise ValidationError(f\"Invalid email: {email}\")\n+        \n+        existing = await self.repository.find_by_email(email)\n+        if existing:\n+            raise ValidationError(f\"User with email {email} already exists\")\n+        \n+        user = User(\n+            id=0,\n+            name=name,\n+            email=email,\n+            metadata=metadata\n+        )\n+        \n+        saved_user = await self.repository.save(user)\n+        self._cache[saved_user.id] = saved_user\n+        \n+        global user_count\n+        user_count += 1\n+        \n+        self.logger.info(f\"Created user: {saved_user.display_name}\")\n+        return saved_user\n+    \n+    @log_method_call\n+    async def update_user(self, user_id: int, **updates) -\u003e User:\n+        \"\"\"Update existing user\"\"\"\n+        user = await self.get_user(user_id)\n+        \n+        for key, value in updates.items():\n+            if hasattr(user, key):\n+                setattr(user, key, value)\n+        \n+        if 'email' in updates and not validate_email(updates['email']):\n+            raise ValidationError(f\"Invalid email: {updates['email']}\")\n+        \n+        updated_user = await self.repository.save(user)\n+        self._cache[user_id] = updated_user\n+        \n+        return updated_user\n+    \n+    @log_method_call\n+    async def delete_user(self, user_id: int) -\u003e bool:\n+        \"\"\"Delete user\"\"\"\n+        user = await self.get_user(user_id)\n+        success = await self.repository.delete(user_id)\n+        \n+        if success:\n+            self._cache.pop(user_id, None)\n+            global user_count\n+            user_count -= 1\n+            self.logger.info(f\"Deleted user: {user.display_name}\")\n+        \n+        return success\n+    \n+    @cache_result(ttl_seconds=600)\n+    async def list_users(self, status: Optional[UserStatus] = None) -\u003e List[User]:\n+        \"\"\"List users with optional status filter\"\"\"\n+        users = await self.repository.list_all()\n+        \n+        if status:\n+            users = [user for user in users if user.status == status]\n+        \n+        return sorted(users, key=lambda u: u.created_at)\n+    \n+    async def search_users(self, query: str) -\u003e List[User]:\n+        \"\"\"Search users by name or email\"\"\"\n+        users = await self.repository.list_all()\n+        query_lower = query.lower()\n+        \n+        return [\n+            user for user in users\n+            if query_lower in user.name.lower() or query_lower in user.email.lower()\n+        ]\n+\n+class UserManager:\n+    \"\"\"High-level user manager\"\"\"\n+    \n+    def __init__(self, service: UserService):\n+        self.service = service\n+    \n+    async def bulk_create_users(self, user_data_list: List[Dict]) -\u003e List[User]:\n+        \"\"\"Create multiple users\"\"\"\n+        created_users = []\n+        \n+        for user_data in user_data_list:\n+            try:\n+                user = await self.service.create_user(**user_data)\n+                created_users.append(user)\n+            except (ValidationError, Exception) as e:\n+                logging.error(f\"Failed to create user {user_data}: {e}\")\n+        \n+        return created_users\n+    \n+    async def export_users(self, format: str = 'json') -\u003e str:\n+        \"\"\"Export users to string format\"\"\"\n+        users = await self.service.list_users()\n+        user_dicts = [user.to_dict() for user in users]\n+        \n+        if format == 'json':\n+            return json.dumps(user_dicts, indent=2)\n+        elif format == 'csv':\n+            import csv\n+            import io\n+            output = io.StringIO()\n+            if user_dicts:\n+                fieldnames = user_dicts[0].keys()\n+                writer = csv.DictWriter(output, fieldnames=fieldnames)\n+                writer.writeheader()\n+                writer.writerows(user_dicts)\n+            return output.getvalue()\n+        else:\n+            raise ValueError(f\"Unsupported format: {format}\")\n+\n+def initialize_user_system(config: Dict) -\u003e UserService:\n+    \"\"\"Initialize the user management system\"\"\"\n+    global is_initialized, user_count\n+    \n+    logging.basicConfig(level=config.get('log_level', logging.INFO))\n+    logger = logging.getLogger(__name__)\n+    \n+    repository = MemoryUserRepository()\n+    service = UserService(repository, logger)\n+    \n+    is_initialized = True\n+    user_count = 0\n+    \n+    logger.info(\"User management system initialized\")\n+    return service\n+\n+async def main():\n+    \"\"\"Main function for testing\"\"\"\n+    config = {\n+        'log_level': logging.INFO,\n+        'max_users': MAX_USERS\n+    }\n+    \n+    service = initialize_user_system(config)\n+    manager = UserManager(service)\n+    \n+    # Create test users\n+    test_users = [\n+        {'name': 'Alice Johnson', 'email': 'alice@example.com'},\n+        {'name': 'Bob Smith', 'email': 'bob@example.com'},\n+        {'name': 'Charlie Brown', 'email': 'charlie@example.com'}\n+    ]\n+    \n+    created_users = await manager.bulk_create_users(test_users)\n+    print(f\"Created {len(created_users)} users\")\n+    \n+    # List all users\n+    all_users = await service.list_users()\n+    print(f\"Total users: {len(all_users)}\")\n+    \n+    # Export users\n+    json_export = await manager.export_users('json')\n+    print(\"Exported users:\")\n+    print(json_export)\n+\n+if __name__ == \"__main__\":\n+    asyncio.run(main())",
      "affected_symbols": [
        {
          "symbol_name": "User",
          "symbol_type": "class",
          "full_code": "class User:\n    \"\"\"User entity class\"\"\"\n    id: int\n    name: str\n    email: str\n    status: UserStatus = UserStatus.ACTIVE\n    created_at: datetime = field(default_factory=datetime.now)\n    metadata: Dict[str, str] = field(default_factory=dict)\n    \n    def __post_init__(self):\n        \"\"\"Post-initialization processing\"\"\"\n        if not self.email or '@' not in self.email:\n            raise ValueError(\"Invalid email address\")\n    \n    @property\n    def display_name(self) -\u003e str:\n        \"\"\"Get user display name\"\"\"\n        return f\"{self.name} ({self.email})\"\n    \n    @property\n    def is_active(self) -\u003e bool:\n        \"\"\"Check if user is active\"\"\"\n        return self.status == UserStatus.ACTIVE\n    \n    def activate(self) -\u003e None:\n        \"\"\"Activate the user\"\"\"\n        self.status = UserStatus.ACTIVE\n    \n    def deactivate(self) -\u003e None:\n        \"\"\"Deactivate the user\"\"\"\n        self.status = UserStatus.INACTIVE\n    \n    def suspend(self) -\u003e None:\n        \"\"\"Suspend the user\"\"\"\n        self.status = UserStatus.SUSPENDED\n    \n    def to_dict(self) -\u003e Dict:\n        \"\"\"Convert user to dictionary\"\"\"\n        return {\n            'id': self.id,\n            'name': self.name,\n            'email': self.email,\n            'status': self.status.value,\n            'created_at': self.created_at.isoformat(),\n            'metadata': self.metadata\n        }\n    \n    @classmethod\n    def from_dict(cls, data: Dict) -\u003e 'User':\n        \"\"\"Create user from dictionary\"\"\"\n        return cls(\n            id=data['id'],\n            name=data['name'],\n            email=data['email'],\n            status=UserStatus(data.get('status', UserStatus.ACTIVE.value)),\n            created_at=datetime.fromisoformat(data.get('created_at', datetime.now().isoformat())),\n            metadata=data.get('metadata', {})\n        )",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "field",
              "snippet": "field(default_factory=datetime.now)",
              "line": 37,
              "type": "call"
            },
            {
              "name": "field",
              "snippet": "field(default_factory=dict)",
              "line": 38,
              "type": "call"
            },
            {
              "name": "__post_init__",
              "snippet": "def __post_init__(self):\n        \"\"\"Post-initialization processing\"\"\"\n        if not self.email or '@' not in self.email:\n            raise ValueError(\"Invalid email address\")",
              "line": 40,
              "type": "function"
            },
            {
              "name": "ValueError",
              "snippet": "ValueError(\"Invalid email address\")",
              "line": 43,
              "type": "call"
            },
            {
              "name": "display_name",
              "snippet": "def display_name(self) -\u003e str:\n        \"\"\"Get user display name\"\"\"\n        return f\"{self.name} ({self.email})\"",
              "line": 46,
              "type": "function"
            },
            {
              "name": "is_active",
              "snippet": "def is_active(self) -\u003e bool:\n        \"\"\"Check if user is active\"\"\"\n        return self.status == UserStatus.ACTIVE",
              "line": 51,
              "type": "function"
            },
            {
              "name": "activate",
              "snippet": "def activate(self) -\u003e None:\n        \"\"\"Activate the user\"\"\"\n        self.status = UserStatus.ACTIVE",
              "line": 55,
              "type": "function"
            },
            {
              "name": "deactivate",
              "snippet": "def deactivate(self) -\u003e None:\n        \"\"\"Deactivate the user\"\"\"\n        self.status = UserStatus.INACTIVE",
              "line": 59,
              "type": "function"
            },
            {
              "name": "suspend",
              "snippet": "def suspend(self) -\u003e None:\n        \"\"\"Suspend the user\"\"\"\n        self.status = UserStatus.SUSPENDED",
              "line": 63,
              "type": "function"
            },
            {
              "name": "to_dict",
              "snippet": "def to_dict(self) -\u003e Dict:\n        \"\"\"Convert user to dictionary\"\"\"\n        return {\n            'id': self.id,\n            'name': self.name,\n            'email': self.email,\n            'status': self.status.value,\n            'created_at': self.created_at.isoformat(),\n            'metadata': self.metadata\n        }",
              "line": 67,
              "type": "function"
            },
            {
              "name": "from_dict",
              "snippet": "def from_dict(cls, data: Dict) -\u003e 'User':\n        \"\"\"Create user from dictionary\"\"\"\n        return cls(\n            id=data['id'],\n            name=data['name'],\n            email=data['email'],\n            status=UserStatus(data.get('status', UserStatus.ACTIVE.value)),\n            created_at=datetime.fromisoformat(data.get('created_at', datetime.now().isoformat())),\n            metadata=data.get('metadata', {})\n        )",
              "line": 79,
              "type": "function"
            },
            {
              "name": "cls",
              "snippet": "cls(\n            id=data['id'],\n            name=data['name'],\n            email=data['email'],\n            status=UserStatus(data.get('status', UserStatus.ACTIVE.value)),\n            created_at=datetime.fromisoformat(data.get('created_at', datetime.now().isoformat())),\n            metadata=data.get('metadata', {})\n        )",
              "line": 81,
              "type": "call"
            },
            {
              "name": "UserStatus",
              "snippet": "UserStatus(data.get('status', UserStatus.ACTIVE.value))",
              "line": 85,
              "type": "call"
            }
          ],
          "file_path": "test/example.py",
          "start_line": 31,
          "end_line": 88
        },
        {
          "symbol_name": "__post_init__",
          "symbol_type": "function",
          "full_code": "    def __post_init__(self):\n        \"\"\"Post-initialization processing\"\"\"\n        if not self.email or '@' not in self.email:\n            raise ValueError(\"Invalid email address\")",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "ValueError",
              "snippet": "ValueError(\"Invalid email address\")",
              "line": 43,
              "type": "call"
            }
          ],
          "file_path": "test/example.py",
          "start_line": 40,
          "end_line": 43
        },
        {
          "symbol_name": "MemoryUserRepository",
          "symbol_type": "class",
          "full_code": "class MemoryUserRepository:\n    \"\"\"In-memory user repository implementation\"\"\"\n    \n    def __init__(self):\n        self._users: Dict[int, User] = {}\n        self._next_id = 1\n    \n    async def get_by_id(self, user_id: int) -\u003e Optional[User]:\n        \"\"\"Get user by ID\"\"\"\n        return self._users.get(user_id)\n    \n    async def save(self, user: User) -\u003e User:\n        \"\"\"Save user\"\"\"\n        if user.id == 0:\n            user.id = self._next_id\n            self._next_id += 1\n        self._users[user.id] = user\n        return user\n    \n    async def delete(self, user_id: int) -\u003e bool:\n        \"\"\"Delete user\"\"\"\n        if user_id in self._users:\n            del self._users[user_id]\n            return True\n        return False\n    \n    async def find_by_email(self, email: str) -\u003e Optional[User]:\n        \"\"\"Find user by email\"\"\"\n        for user in self._users.values():\n            if user.email == email:\n                return user\n        return None\n    \n    async def list_all(self) -\u003e List[User]:\n        \"\"\"List all users\"\"\"\n        return list(self._users.values())",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "__init__",
              "snippet": "def __init__(self):\n        self._users: Dict[int, User] = {}\n        self._next_id = 1",
              "line": 116,
              "type": "function"
            },
            {
              "name": "get_by_id",
              "snippet": "async def get_by_id(self, user_id: int) -\u003e Optional[User]:\n        \"\"\"Get user by ID\"\"\"\n        return self._users.get(user_id)",
              "line": 120,
              "type": "function"
            },
            {
              "name": "save",
              "snippet": "async def save(self, user: User) -\u003e User:\n        \"\"\"Save user\"\"\"\n        if user.id == 0:\n            user.id = self._next_id\n            self._next_id += 1\n        self._users[user.id] = user\n        return user",
              "line": 124,
              "type": "function"
            },
            {
              "name": "delete",
              "snippet": "async def delete(self, user_id: int) -\u003e bool:\n        \"\"\"Delete user\"\"\"\n        if user_id in self._users:\n            del self._users[user_id]\n            return True\n        return False",
              "line": 132,
              "type": "function"
            },
            {
              "name": "find_by_email",
              "snippet": "async def find_by_email(self, email: str) -\u003e Optional[User]:\n        \"\"\"Find user by email\"\"\"\n        for user in self._users.values():\n            if user.email == email:\n                return user\n        return None",
              "line": 139,
              "type": "function"
            },
            {
              "name": "list_all",
              "snippet": "async def list_all(self) -\u003e List[User]:\n        \"\"\"List all users\"\"\"\n        return list(self._users.values())",
              "line": 146,
              "type": "function"
            },
            {
              "name": "list",
              "snippet": "list(self._users.values())",
              "line": 148,
              "type": "call"
            }
          ],
          "file_path": "test/example.py",
          "start_line": 113,
          "end_line": 148
        },
        {
          "symbol_name": "wrapper",
          "symbol_type": "function",
          "full_code": "    async def wrapper(*args, **kwargs):\n        logger = logging.getLogger(__name__)\n        logger.info(f\"Calling {func.__name__} with args: {args[1:]} kwargs: {kwargs}\")\n        try:\n            result = await func(*args, **kwargs)\n            logger.info(f\"{func.__name__} completed successfully\")\n            return result\n        except Exception as e:\n            logger.error(f\"{func.__name__} failed with error: {e}\")\n            raise",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "func",
              "snippet": "func(*args, **kwargs)",
              "line": 171,
              "type": "call"
            }
          ],
          "file_path": "test/example.py",
          "start_line": 167,
          "end_line": 176
        },
        {
          "symbol_name": "initialize_user_system",
          "symbol_type": "function",
          "full_code": "def initialize_user_system(config: Dict) -\u003e UserService:\n    \"\"\"Initialize the user management system\"\"\"\n    global is_initialized, user_count\n    \n    logging.basicConfig(level=config.get('log_level', logging.INFO))\n    logger = logging.getLogger(__name__)\n    \n    repository = MemoryUserRepository()\n    service = UserService(repository, logger)\n    \n    is_initialized = True\n    user_count = 0\n    \n    logger.info(\"User management system initialized\")\n    return service",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "MemoryUserRepository",
              "snippet": "MemoryUserRepository()",
              "line": 344,
              "type": "call"
            },
            {
              "name": "UserService",
              "snippet": "UserService(repository, logger)",
              "line": 345,
              "type": "call"
            }
          ],
          "file_path": "test/example.py",
          "start_line": 337,
          "end_line": 351
        },
        {
          "symbol_name": "main",
          "symbol_type": "function",
          "full_code": "async def main():\n    \"\"\"Main function for testing\"\"\"\n    config = {\n        'log_level': logging.INFO,\n        'max_users': MAX_USERS\n    }\n    \n    service = initialize_user_system(config)\n    manager = UserManager(service)\n    \n    # Create test users\n    test_users = [\n        {'name': 'Alice Johnson', 'email': 'alice@example.com'},\n        {'name': 'Bob Smith', 'email': 'bob@example.com'},\n        {'name': 'Charlie Brown', 'email': 'charlie@example.com'}\n    ]\n    \n    created_users = await manager.bulk_create_users(test_users)\n    print(f\"Created {len(created_users)} users\")\n    \n    # List all users\n    all_users = await service.list_users()\n    print(f\"Total users: {len(all_users)}\")\n    \n    # Export users\n    json_export = await manager.export_users('json')\n    print(\"Exported users:\")\n    print(json_export)",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "initialize_user_system",
              "snippet": "initialize_user_system(config)",
              "line": 360,
              "type": "call"
            },
            {
              "name": "UserManager",
              "snippet": "UserManager(service)",
              "line": 361,
              "type": "call"
            },
            {
              "name": "print",
              "snippet": "print(f\"Created {len(created_users)} users\")",
              "line": 371,
              "type": "call"
            },
            {
              "name": "len",
              "snippet": "len(created_users)",
              "line": 371,
              "type": "call"
            },
            {
              "name": "print",
              "snippet": "print(f\"Total users: {len(all_users)}\")",
              "line": 375,
              "type": "call"
            },
            {
              "name": "len",
              "snippet": "len(all_users)",
              "line": 375,
              "type": "call"
            },
            {
              "name": "print",
              "snippet": "print(\"Exported users:\")",
              "line": 379,
              "type": "call"
            },
            {
              "name": "print",
              "snippet": "print(json_export)",
              "line": 380,
              "type": "call"
            }
          ],
          "file_path": "test/example.py",
          "start_line": 353,
          "end_line": 380
        },
        {
          "symbol_name": "UserStatus",
          "symbol_type": "class",
          "full_code": "class UserStatus(Enum):\n    \"\"\"User status enumeration\"\"\"\n    ACTIVE = \"active\"\n    INACTIVE = \"inactive\"\n    SUSPENDED = \"suspended\"\n    DELETED = \"deleted\"",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.py",
          "start_line": 23,
          "end_line": 28
        },
        {
          "symbol_name": "display_name",
          "symbol_type": "function",
          "full_code": "    def display_name(self) -\u003e str:\n        \"\"\"Get user display name\"\"\"\n        return f\"{self.name} ({self.email})\"",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.py",
          "start_line": 46,
          "end_line": 48
        },
        {
          "symbol_name": "get_user",
          "symbol_type": "function",
          "full_code": "    async def get_user(self, user_id: int) -\u003e User:\n        \"\"\"Get user by ID\"\"\"\n        if user_id in self._cache:\n            return self._cache[user_id]\n        \n        user = await self.repository.get_by_id(user_id)\n        if not user:\n            raise UserNotFoundError(f\"User {user_id} not found\")\n        \n        self._cache[user_id] = user\n        return user",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "UserNotFoundError",
              "snippet": "UserNotFoundError(f\"User {user_id} not found\")",
              "line": 216,
              "type": "call"
            }
          ],
          "file_path": "test/example.py",
          "start_line": 209,
          "end_line": 219
        },
        {
          "symbol_name": "update_user",
          "symbol_type": "function",
          "full_code": "    async def update_user(self, user_id: int, **updates) -\u003e User:\n        \"\"\"Update existing user\"\"\"\n        user = await self.get_user(user_id)\n        \n        for key, value in updates.items():\n            if hasattr(user, key):\n                setattr(user, key, value)\n        \n        if 'email' in updates and not validate_email(updates['email']):\n            raise ValidationError(f\"Invalid email: {updates['email']}\")\n        \n        updated_user = await self.repository.save(user)\n        self._cache[user_id] = updated_user\n        \n        return updated_user",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "hasattr",
              "snippet": "hasattr(user, key)",
              "line": 253,
              "type": "call"
            },
            {
              "name": "setattr",
              "snippet": "setattr(user, key, value)",
              "line": 254,
              "type": "call"
            },
            {
              "name": "validate_email",
              "snippet": "validate_email(updates['email'])",
              "line": 256,
              "type": "call"
            },
            {
              "name": "ValidationError",
              "snippet": "ValidationError(f\"Invalid email: {updates['email']}\")",
              "line": 257,
              "type": "call"
            }
          ],
          "file_path": "test/example.py",
          "start_line": 248,
          "end_line": 262
        },
        {
          "symbol_name": "list_users",
          "symbol_type": "function",
          "full_code": "    async def list_users(self, status: Optional[UserStatus] = None) -\u003e List[User]:\n        \"\"\"List users with optional status filter\"\"\"\n        users = await self.repository.list_all()\n        \n        if status:\n            users = [user for user in users if user.status == status]\n        \n        return sorted(users, key=lambda u: u.created_at)",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "sorted",
              "snippet": "sorted(users, key=lambda u: u.created_at)",
              "line": 286,
              "type": "call"
            }
          ],
          "file_path": "test/example.py",
          "start_line": 279,
          "end_line": 286
        },
        {
          "symbol_name": "is_active",
          "symbol_type": "function",
          "full_code": "    def is_active(self) -\u003e bool:\n        \"\"\"Check if user is active\"\"\"\n        return self.status == UserStatus.ACTIVE",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.py",
          "start_line": 51,
          "end_line": 53
        },
        {
          "symbol_name": "deactivate",
          "symbol_type": "function",
          "full_code": "    def deactivate(self) -\u003e None:\n        \"\"\"Deactivate the user\"\"\"\n        self.status = UserStatus.INACTIVE",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.py",
          "start_line": 59,
          "end_line": 61
        },
        {
          "symbol_name": "to_dict",
          "symbol_type": "function",
          "full_code": "    def to_dict(self) -\u003e Dict:\n        \"\"\"Convert user to dictionary\"\"\"\n        return {\n            'id': self.id,\n            'name': self.name,\n            'email': self.email,\n            'status': self.status.value,\n            'created_at': self.created_at.isoformat(),\n            'metadata': self.metadata\n        }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.py",
          "start_line": 67,
          "end_line": 76
        },
        {
          "symbol_name": "delete",
          "symbol_type": "function",
          "full_code": "    async def delete(self, user_id: int) -\u003e bool:\n        \"\"\"Delete user\"\"\"\n        ...",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.py",
          "start_line": 101,
          "end_line": 103
        },
        {
          "symbol_name": "cache_result",
          "symbol_type": "function",
          "full_code": "def cache_result(ttl_seconds: int = 300):\n    \"\"\"Decorator to cache method results\"\"\"\n    cache = {}\n    \n    def decorator(func):\n        @wraps(func)\n        async def wrapper(*args, **kwargs):\n            key = f\"{func.__name__}_{hash(str(args) + str(kwargs))}\"\n            now = datetime.now()\n            \n            if key in cache:\n                result, timestamp = cache[key]\n                if (now - timestamp).total_seconds() \u003c ttl_seconds:\n                    return result\n            \n            result = await func(*args, **kwargs)\n            cache[key] = (result, now)\n            return result\n        return wrapper\n    return decorator",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "wraps",
              "snippet": "wraps(func)",
              "line": 184,
              "type": "call"
            },
            {
              "name": "hash",
              "snippet": "hash(str(args) + str(kwargs))",
              "line": 186,
              "type": "call"
            },
            {
              "name": "str",
              "snippet": "str(args)",
              "line": 186,
              "type": "call"
            },
            {
              "name": "str",
              "snippet": "str(kwargs)",
              "line": 186,
              "type": "call"
            },
            {
              "name": "func",
              "snippet": "func(*args, **kwargs)",
              "line": 194,
              "type": "call"
            }
          ],
          "file_path": "test/example.py",
          "start_line": 179,
          "end_line": 198
        },
        {
          "symbol_name": "save",
          "symbol_type": "function",
          "full_code": "    async def save(self, user: User) -\u003e User:\n        \"\"\"Save user\"\"\"\n        ...",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.py",
          "start_line": 97,
          "end_line": 99
        },
        {
          "symbol_name": "decorator",
          "symbol_type": "function",
          "full_code": "    def decorator(func):\n        @wraps(func)\n        async def wrapper(*args, **kwargs):\n            key = f\"{func.__name__}_{hash(str(args) + str(kwargs))}\"\n            now = datetime.now()\n            \n            if key in cache:\n                result, timestamp = cache[key]\n                if (now - timestamp).total_seconds() \u003c ttl_seconds:\n                    return result\n            \n            result = await func(*args, **kwargs)\n            cache[key] = (result, now)\n            return result\n        return wrapper",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "wraps",
              "snippet": "wraps(func)",
              "line": 184,
              "type": "call"
            },
            {
              "name": "hash",
              "snippet": "hash(str(args) + str(kwargs))",
              "line": 186,
              "type": "call"
            },
            {
              "name": "str",
              "snippet": "str(args)",
              "line": 186,
              "type": "call"
            },
            {
              "name": "str",
              "snippet": "str(kwargs)",
              "line": 186,
              "type": "call"
            },
            {
              "name": "func",
              "snippet": "func(*args, **kwargs)",
              "line": 194,
              "type": "call"
            }
          ],
          "file_path": "test/example.py",
          "start_line": 183,
          "end_line": 197
        },
        {
          "symbol_name": "search_users",
          "symbol_type": "function",
          "full_code": "    async def search_users(self, query: str) -\u003e List[User]:\n        \"\"\"Search users by name or email\"\"\"\n        users = await self.repository.list_all()\n        query_lower = query.lower()\n        \n        return [\n            user for user in users\n            if query_lower in user.name.lower() or query_lower in user.email.lower()\n        ]",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.py",
          "start_line": 288,
          "end_line": 296
        },
        {
          "symbol_name": "export_users",
          "symbol_type": "function",
          "full_code": "    async def export_users(self, format: str = 'json') -\u003e str:\n        \"\"\"Export users to string format\"\"\"\n        users = await self.service.list_users()\n        user_dicts = [user.to_dict() for user in users]\n        \n        if format == 'json':\n            return json.dumps(user_dicts, indent=2)\n        elif format == 'csv':\n            import csv\n            import io\n            output = io.StringIO()\n            if user_dicts:\n                fieldnames = user_dicts[0].keys()\n                writer = csv.DictWriter(output, fieldnames=fieldnames)\n                writer.writeheader()\n                writer.writerows(user_dicts)\n            return output.getvalue()\n        else:\n            raise ValueError(f\"Unsupported format: {format}\")",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "ValueError",
              "snippet": "ValueError(f\"Unsupported format: {format}\")",
              "line": 335,
              "type": "call"
            }
          ],
          "file_path": "test/example.py",
          "start_line": 317,
          "end_line": 335
        },
        {
          "symbol_name": "get_by_id",
          "symbol_type": "function",
          "full_code": "    async def get_by_id(self, user_id: int) -\u003e Optional[User]:\n        \"\"\"Get user by ID\"\"\"\n        ...",
          "doc_comment": "\"\"\"User repository protocol\"\"\"",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.py",
          "start_line": 93,
          "end_line": 95
        },
        {
          "symbol_name": "__init__",
          "symbol_type": "function",
          "full_code": "    def __init__(self):\n        self._users: Dict[int, User] = {}\n        self._next_id = 1",
          "doc_comment": "\"\"\"In-memory user repository implementation\"\"\"",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.py",
          "start_line": 116,
          "end_line": 118
        },
        {
          "symbol_name": "ValidationError",
          "symbol_type": "class",
          "full_code": "class ValidationError(Exception):\n    \"\"\"Validation error exception\"\"\"\n    pass",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.py",
          "start_line": 154,
          "end_line": 156
        },
        {
          "symbol_name": "UserService",
          "symbol_type": "class",
          "full_code": "class UserService:\n    \"\"\"User service for business logic\"\"\"\n    \n    def __init__(self, repository: UserRepository, logger: Optional[logging.Logger] = None):\n        self.repository = repository\n        self.logger = logger or logging.getLogger(__name__)\n        self._cache: Dict[int, User] = {}\n    \n    @log_method_call\n    async def get_user(self, user_id: int) -\u003e User:\n        \"\"\"Get user by ID\"\"\"\n        if user_id in self._cache:\n            return self._cache[user_id]\n        \n        user = await self.repository.get_by_id(user_id)\n        if not user:\n            raise UserNotFoundError(f\"User {user_id} not found\")\n        \n        self._cache[user_id] = user\n        return user\n    \n    @log_method_call\n    async def create_user(self, name: str, email: str, **metadata) -\u003e User:\n        \"\"\"Create new user\"\"\"\n        if not validate_email(email):\n            raise ValidationError(f\"Invalid email: {email}\")\n        \n        existing = await self.repository.find_by_email(email)\n        if existing:\n            raise ValidationError(f\"User with email {email} already exists\")\n        \n        user = User(\n            id=0,\n            name=name,\n            email=email,\n            metadata=metadata\n        )\n        \n        saved_user = await self.repository.save(user)\n        self._cache[saved_user.id] = saved_user\n        \n        global user_count\n        user_count += 1\n        \n        self.logger.info(f\"Created user: {saved_user.display_name}\")\n        return saved_user\n    \n    @log_method_call\n    async def update_user(self, user_id: int, **updates) -\u003e User:\n        \"\"\"Update existing user\"\"\"\n        user = await self.get_user(user_id)\n        \n        for key, value in updates.items():\n            if hasattr(user, key):\n                setattr(user, key, value)\n        \n        if 'email' in updates and not validate_email(updates['email']):\n            raise ValidationError(f\"Invalid email: {updates['email']}\")\n        \n        updated_user = await self.repository.save(user)\n        self._cache[user_id] = updated_user\n        \n        return updated_user\n    \n    @log_method_call\n    async def delete_user(self, user_id: int) -\u003e bool:\n        \"\"\"Delete user\"\"\"\n        user = await self.get_user(user_id)\n        success = await self.repository.delete(user_id)\n        \n        if success:\n            self._cache.pop(user_id, None)\n            global user_count\n            user_count -= 1\n            self.logger.info(f\"Deleted user: {user.display_name}\")\n        \n        return success\n    \n    @cache_result(ttl_seconds=600)\n    async def list_users(self, status: Optional[UserStatus] = None) -\u003e List[User]:\n        \"\"\"List users with optional status filter\"\"\"\n        users = await self.repository.list_all()\n        \n        if status:\n            users = [user for user in users if user.status == status]\n        \n        return sorted(users, key=lambda u: u.created_at)\n    \n    async def search_users(self, query: str) -\u003e List[User]:\n        \"\"\"Search users by name or email\"\"\"\n        users = await self.repository.list_all()\n        query_lower = query.lower()\n        \n        return [\n            user for user in users\n            if query_lower in user.name.lower() or query_lower in user.email.lower()\n        ]",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "__init__",
              "snippet": "def __init__(self, repository: UserRepository, logger: Optional[logging.Logger] = None):\n        self.repository = repository\n        self.logger = logger or logging.getLogger(__name__)\n        self._cache: Dict[int, User] = {}",
              "line": 203,
              "type": "function"
            },
            {
              "name": "get_user",
              "snippet": "async def get_user(self, user_id: int) -\u003e User:\n        \"\"\"Get user by ID\"\"\"\n        if user_id in self._cache:\n            return self._cache[user_id]\n        \n        user = await self.repository.get_by_id(user_id)\n        if not user:\n            raise UserNotFoundError(f\"User {user_id} not found\")\n        \n        self._cache[user_id] = user\n        return user",
              "line": 209,
              "type": "function"
            },
            {
              "name": "UserNotFoundError",
              "snippet": "UserNotFoundError(f\"User {user_id} not found\")",
              "line": 216,
              "type": "call"
            },
            {
              "name": "create_user",
              "snippet": "async def create_user(self, name: str, email: str, **metadata) -\u003e User:\n        \"\"\"Create new user\"\"\"\n        if not validate_email(email):\n            raise ValidationError(f\"Invalid email: {email}\")\n        \n        existing = await self.repository.find_by_email(email)\n        if existing:\n            raise ValidationError(f\"User with email {email} already exists\")\n        \n        user = User(\n            id=0,\n            name=name,\n            email=email,\n            metadata=metadata\n        )\n        \n        saved_user = await self.repository.save(user)\n        self._cache[saved_user.id] = saved_user\n        \n        global user_count\n        user_count += 1\n        \n        self.logger.info(f\"Created user: {saved_user.display_name}\")\n        return saved_user",
              "line": 222,
              "type": "function"
            },
            {
              "name": "validate_email",
              "snippet": "validate_email(email)",
              "line": 224,
              "type": "call"
            },
            {
              "name": "ValidationError",
              "snippet": "ValidationError(f\"Invalid email: {email}\")",
              "line": 225,
              "type": "call"
            },
            {
              "name": "ValidationError",
              "snippet": "ValidationError(f\"User with email {email} already exists\")",
              "line": 229,
              "type": "call"
            },
            {
              "name": "User",
              "snippet": "User(\n            id=0,\n            name=name,\n            email=email,\n            metadata=metadata\n        )",
              "line": 231,
              "type": "call"
            },
            {
              "name": "update_user",
              "snippet": "async def update_user(self, user_id: int, **updates) -\u003e User:\n        \"\"\"Update existing user\"\"\"\n        user = await self.get_user(user_id)\n        \n        for key, value in updates.items():\n            if hasattr(user, key):\n                setattr(user, key, value)\n        \n        if 'email' in updates and not validate_email(updates['email']):\n            raise ValidationError(f\"Invalid email: {updates['email']}\")\n        \n        updated_user = await self.repository.save(user)\n        self._cache[user_id] = updated_user\n        \n        return updated_user",
              "line": 248,
              "type": "function"
            },
            {
              "name": "hasattr",
              "snippet": "hasattr(user, key)",
              "line": 253,
              "type": "call"
            },
            {
              "name": "setattr",
              "snippet": "setattr(user, key, value)",
              "line": 254,
              "type": "call"
            },
            {
              "name": "validate_email",
              "snippet": "validate_email(updates['email'])",
              "line": 256,
              "type": "call"
            },
            {
              "name": "ValidationError",
              "snippet": "ValidationError(f\"Invalid email: {updates['email']}\")",
              "line": 257,
              "type": "call"
            },
            {
              "name": "delete_user",
              "snippet": "async def delete_user(self, user_id: int) -\u003e bool:\n        \"\"\"Delete user\"\"\"\n        user = await self.get_user(user_id)\n        success = await self.repository.delete(user_id)\n        \n        if success:\n            self._cache.pop(user_id, None)\n            global user_count\n            user_count -= 1\n            self.logger.info(f\"Deleted user: {user.display_name}\")\n        \n        return success",
              "line": 265,
              "type": "function"
            },
            {
              "name": "cache_result",
              "snippet": "cache_result(ttl_seconds=600)",
              "line": 278,
              "type": "call"
            },
            {
              "name": "list_users",
              "snippet": "async def list_users(self, status: Optional[UserStatus] = None) -\u003e List[User]:\n        \"\"\"List users with optional status filter\"\"\"\n        users = await self.repository.list_all()\n        \n        if status:\n            users = [user for user in users if user.status == status]\n        \n        return sorted(users, key=lambda u: u.created_at)",
              "line": 279,
              "type": "function"
            },
            {
              "name": "sorted",
              "snippet": "sorted(users, key=lambda u: u.created_at)",
              "line": 286,
              "type": "call"
            },
            {
              "name": "search_users",
              "snippet": "async def search_users(self, query: str) -\u003e List[User]:\n        \"\"\"Search users by name or email\"\"\"\n        users = await self.repository.list_all()\n        query_lower = query.lower()\n        \n        return [\n            user for user in users\n            if query_lower in user.name.lower() or query_lower in user.email.lower()\n        ]",
              "line": 288,
              "type": "function"
            }
          ],
          "file_path": "test/example.py",
          "start_line": 200,
          "end_line": 296
        },
        {
          "symbol_name": "create_user",
          "symbol_type": "function",
          "full_code": "    async def create_user(self, name: str, email: str, **metadata) -\u003e User:\n        \"\"\"Create new user\"\"\"\n        if not validate_email(email):\n            raise ValidationError(f\"Invalid email: {email}\")\n        \n        existing = await self.repository.find_by_email(email)\n        if existing:\n            raise ValidationError(f\"User with email {email} already exists\")\n        \n        user = User(\n            id=0,\n            name=name,\n            email=email,\n            metadata=metadata\n        )\n        \n        saved_user = await self.repository.save(user)\n        self._cache[saved_user.id] = saved_user\n        \n        global user_count\n        user_count += 1\n        \n        self.logger.info(f\"Created user: {saved_user.display_name}\")\n        return saved_user",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "validate_email",
              "snippet": "validate_email(email)",
              "line": 224,
              "type": "call"
            },
            {
              "name": "ValidationError",
              "snippet": "ValidationError(f\"Invalid email: {email}\")",
              "line": 225,
              "type": "call"
            },
            {
              "name": "ValidationError",
              "snippet": "ValidationError(f\"User with email {email} already exists\")",
              "line": 229,
              "type": "call"
            },
            {
              "name": "User",
              "snippet": "User(\n            id=0,\n            name=name,\n            email=email,\n            metadata=metadata\n        )",
              "line": 231,
              "type": "call"
            }
          ],
          "file_path": "test/example.py",
          "start_line": 222,
          "end_line": 245
        },
        {
          "symbol_name": "UserManager",
          "symbol_type": "class",
          "full_code": "class UserManager:\n    \"\"\"High-level user manager\"\"\"\n    \n    def __init__(self, service: UserService):\n        self.service = service\n    \n    async def bulk_create_users(self, user_data_list: List[Dict]) -\u003e List[User]:\n        \"\"\"Create multiple users\"\"\"\n        created_users = []\n        \n        for user_data in user_data_list:\n            try:\n                user = await self.service.create_user(**user_data)\n                created_users.append(user)\n            except (ValidationError, Exception) as e:\n                logging.error(f\"Failed to create user {user_data}: {e}\")\n        \n        return created_users\n    \n    async def export_users(self, format: str = 'json') -\u003e str:\n        \"\"\"Export users to string format\"\"\"\n        users = await self.service.list_users()\n        user_dicts = [user.to_dict() for user in users]\n        \n        if format == 'json':\n            return json.dumps(user_dicts, indent=2)\n        elif format == 'csv':\n            import csv\n            import io\n            output = io.StringIO()\n            if user_dicts:\n                fieldnames = user_dicts[0].keys()\n                writer = csv.DictWriter(output, fieldnames=fieldnames)\n                writer.writeheader()\n                writer.writerows(user_dicts)\n            return output.getvalue()\n        else:\n            raise ValueError(f\"Unsupported format: {format}\")",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "__init__",
              "snippet": "def __init__(self, service: UserService):\n        self.service = service",
              "line": 301,
              "type": "function"
            },
            {
              "name": "bulk_create_users",
              "snippet": "async def bulk_create_users(self, user_data_list: List[Dict]) -\u003e List[User]:\n        \"\"\"Create multiple users\"\"\"\n        created_users = []\n        \n        for user_data in user_data_list:\n            try:\n                user = await self.service.create_user(**user_data)\n                created_users.append(user)\n            except (ValidationError, Exception) as e:\n                logging.error(f\"Failed to create user {user_data}: {e}\")\n        \n        return created_users",
              "line": 304,
              "type": "function"
            },
            {
              "name": "export_users",
              "snippet": "async def export_users(self, format: str = 'json') -\u003e str:\n        \"\"\"Export users to string format\"\"\"\n        users = await self.service.list_users()\n        user_dicts = [user.to_dict() for user in users]\n        \n        if format == 'json':\n            return json.dumps(user_dicts, indent=2)\n        elif format == 'csv':\n            import csv\n            import io\n            output = io.StringIO()\n            if user_dicts:\n                fieldnames = user_dicts[0].keys()\n                writer = csv.DictWriter(output, fieldnames=fieldnames)\n                writer.writeheader()\n                writer.writerows(user_dicts)\n            return output.getvalue()\n        else:\n            raise ValueError(f\"Unsupported format: {format}\")",
              "line": 317,
              "type": "function"
            },
            {
              "name": "ValueError",
              "snippet": "ValueError(f\"Unsupported format: {format}\")",
              "line": 335,
              "type": "call"
            }
          ],
          "file_path": "test/example.py",
          "start_line": 298,
          "end_line": 335
        },
        {
          "symbol_name": "activate",
          "symbol_type": "function",
          "full_code": "    def activate(self) -\u003e None:\n        \"\"\"Activate the user\"\"\"\n        self.status = UserStatus.ACTIVE",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.py",
          "start_line": 55,
          "end_line": 57
        },
        {
          "symbol_name": "find_by_email",
          "symbol_type": "function",
          "full_code": "    async def find_by_email(self, email: str) -\u003e Optional[User]:\n        \"\"\"Find user by email\"\"\"\n        ...",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.py",
          "start_line": 105,
          "end_line": 107
        },
        {
          "symbol_name": "validate_email",
          "symbol_type": "function",
          "full_code": "def validate_email(email: str) -\u003e bool:\n    \"\"\"Validate email address\"\"\"\n    import re\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(pattern, email) is not None",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.py",
          "start_line": 158,
          "end_line": 162
        },
        {
          "symbol_name": "bulk_create_users",
          "symbol_type": "function",
          "full_code": "    async def bulk_create_users(self, user_data_list: List[Dict]) -\u003e List[User]:\n        \"\"\"Create multiple users\"\"\"\n        created_users = []\n        \n        for user_data in user_data_list:\n            try:\n                user = await self.service.create_user(**user_data)\n                created_users.append(user)\n            except (ValidationError, Exception) as e:\n                logging.error(f\"Failed to create user {user_data}: {e}\")\n        \n        return created_users",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.py",
          "start_line": 304,
          "end_line": 315
        },
        {
          "symbol_name": "UserRepository",
          "symbol_type": "class",
          "full_code": "class UserRepository(Protocol):\n    \"\"\"User repository protocol\"\"\"\n    \n    async def get_by_id(self, user_id: int) -\u003e Optional[User]:\n        \"\"\"Get user by ID\"\"\"\n        ...\n    \n    async def save(self, user: User) -\u003e User:\n        \"\"\"Save user\"\"\"\n        ...\n    \n    async def delete(self, user_id: int) -\u003e bool:\n        \"\"\"Delete user\"\"\"\n        ...\n    \n    async def find_by_email(self, email: str) -\u003e Optional[User]:\n        \"\"\"Find user by email\"\"\"\n        ...\n    \n    async def list_all(self) -\u003e List[User]:\n        \"\"\"List all users\"\"\"\n        ...",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "get_by_id",
              "snippet": "async def get_by_id(self, user_id: int) -\u003e Optional[User]:\n        \"\"\"Get user by ID\"\"\"\n        ...",
              "line": 93,
              "type": "function"
            },
            {
              "name": "save",
              "snippet": "async def save(self, user: User) -\u003e User:\n        \"\"\"Save user\"\"\"\n        ...",
              "line": 97,
              "type": "function"
            },
            {
              "name": "delete",
              "snippet": "async def delete(self, user_id: int) -\u003e bool:\n        \"\"\"Delete user\"\"\"\n        ...",
              "line": 101,
              "type": "function"
            },
            {
              "name": "find_by_email",
              "snippet": "async def find_by_email(self, email: str) -\u003e Optional[User]:\n        \"\"\"Find user by email\"\"\"\n        ...",
              "line": 105,
              "type": "function"
            },
            {
              "name": "list_all",
              "snippet": "async def list_all(self) -\u003e List[User]:\n        \"\"\"List all users\"\"\"\n        ...",
              "line": 109,
              "type": "function"
            }
          ],
          "file_path": "test/example.py",
          "start_line": 90,
          "end_line": 111
        },
        {
          "symbol_name": "list_all",
          "symbol_type": "function",
          "full_code": "    async def list_all(self) -\u003e List[User]:\n        \"\"\"List all users\"\"\"\n        ...",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.py",
          "start_line": 109,
          "end_line": 111
        },
        {
          "symbol_name": "UserNotFoundError",
          "symbol_type": "class",
          "full_code": "class UserNotFoundError(Exception):\n    \"\"\"User not found exception\"\"\"\n    pass",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.py",
          "start_line": 150,
          "end_line": 152
        },
        {
          "symbol_name": "log_method_call",
          "symbol_type": "function",
          "full_code": "def log_method_call(func):\n    \"\"\"Decorator to log method calls\"\"\"\n    @wraps(func)\n    async def wrapper(*args, **kwargs):\n        logger = logging.getLogger(__name__)\n        logger.info(f\"Calling {func.__name__} with args: {args[1:]} kwargs: {kwargs}\")\n        try:\n            result = await func(*args, **kwargs)\n            logger.info(f\"{func.__name__} completed successfully\")\n            return result\n        except Exception as e:\n            logger.error(f\"{func.__name__} failed with error: {e}\")\n            raise\n    return wrapper",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "wraps",
              "snippet": "wraps(func)",
              "line": 166,
              "type": "call"
            },
            {
              "name": "func",
              "snippet": "func(*args, **kwargs)",
              "line": 171,
              "type": "call"
            }
          ],
          "file_path": "test/example.py",
          "start_line": 164,
          "end_line": 177
        },
        {
          "symbol_name": "suspend",
          "symbol_type": "function",
          "full_code": "    def suspend(self) -\u003e None:\n        \"\"\"Suspend the user\"\"\"\n        self.status = UserStatus.SUSPENDED",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.py",
          "start_line": 63,
          "end_line": 65
        },
        {
          "symbol_name": "from_dict",
          "symbol_type": "function",
          "full_code": "    def from_dict(cls, data: Dict) -\u003e 'User':\n        \"\"\"Create user from dictionary\"\"\"\n        return cls(\n            id=data['id'],\n            name=data['name'],\n            email=data['email'],\n            status=UserStatus(data.get('status', UserStatus.ACTIVE.value)),\n            created_at=datetime.fromisoformat(data.get('created_at', datetime.now().isoformat())),\n            metadata=data.get('metadata', {})\n        )",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "cls",
              "snippet": "cls(\n            id=data['id'],\n            name=data['name'],\n            email=data['email'],\n            status=UserStatus(data.get('status', UserStatus.ACTIVE.value)),\n            created_at=datetime.fromisoformat(data.get('created_at', datetime.now().isoformat())),\n            metadata=data.get('metadata', {})\n        )",
              "line": 81,
              "type": "call"
            },
            {
              "name": "UserStatus",
              "snippet": "UserStatus(data.get('status', UserStatus.ACTIVE.value))",
              "line": 85,
              "type": "call"
            }
          ],
          "file_path": "test/example.py",
          "start_line": 79,
          "end_line": 88
        },
        {
          "symbol_name": "delete_user",
          "symbol_type": "function",
          "full_code": "    async def delete_user(self, user_id: int) -\u003e bool:\n        \"\"\"Delete user\"\"\"\n        user = await self.get_user(user_id)\n        success = await self.repository.delete(user_id)\n        \n        if success:\n            self._cache.pop(user_id, None)\n            global user_count\n            user_count -= 1\n            self.logger.info(f\"Deleted user: {user.display_name}\")\n        \n        return success",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.py",
          "start_line": 265,
          "end_line": 276
        }
      ],
      "related_files": []
    },
    {
      "file_path": "test/example.ts",
      "change_type": "Added",
      "diff_hunk": "@@ -0,0 +1,547 @@\n+/**\n+ * User management system in TypeScript\n+ */\n+\n+// Type definitions and interfaces\n+interface IUser {\n+    id: number;\n+    name: string;\n+    email: string;\n+    status: UserStatus;\n+    createdAt: Date;\n+    metadata?: Record\u003cstring, any\u003e;\n+}\n+\n+interface IUserRepository\u003cT = IUser\u003e {\n+    getById(id: number): Promise\u003cT | null\u003e;\n+    save(user: T): Promise\u003cT\u003e;\n+    delete(id: number): Promise\u003cboolean\u003e;\n+    findByEmail(email: string): Promise\u003cT | null\u003e;\n+    listAll(): Promise\u003cT[]\u003e;\n+}\n+\n+interface IUserService {\n+    getUser(id: number): Promise\u003cUser\u003e;\n+    createUser(userData: CreateUserRequest): Promise\u003cUser\u003e;\n+    updateUser(id: number, updates: Partial\u003cIUser\u003e): Promise\u003cUser\u003e;\n+    deleteUser(id: number): Promise\u003cboolean\u003e;\n+    listUsers(status?: UserStatus): Promise\u003cUser[]\u003e;\n+    searchUsers(query: string): Promise\u003cUser[]\u003e;\n+}\n+\n+// Type aliases and enums\n+type UserId = number;\n+type UserEmail = string;\n+type UserName = string;\n+\n+enum UserStatus {\n+    ACTIVE = 'active',\n+    INACTIVE = 'inactive',\n+    SUSPENDED = 'suspended',\n+    DELETED = 'deleted'\n+}\n+\n+enum Permission {\n+    READ = 'read',\n+    WRITE = 'write',\n+    DELETE = 'delete',\n+    ADMIN = 'admin'\n+}\n+\n+// Generic types\n+type ApiResponse\u003cT\u003e = {\n+    data: T;\n+    status: 'success' | 'error';\n+    message?: string;\n+    timestamp: Date;\n+};\n+\n+type Repository\u003cT, K = number\u003e = {\n+    findById(id: K): Promise\u003cT | null\u003e;\n+    save(entity: T): Promise\u003cT\u003e;\n+    remove(id: K): Promise\u003cboolean\u003e;\n+};\n+\n+// Request/Response types\n+interface CreateUserRequest {\n+    name: UserName;\n+    email: UserEmail;\n+    permissions?: Permission[];\n+    metadata?: Record\u003cstring, any\u003e;\n+}\n+\n+interface UpdateUserRequest {\n+    name?: UserName;\n+    email?: UserEmail;\n+    status?: UserStatus;\n+    permissions?: Permission[];\n+}\n+\n+interface UserResponse extends IUser {\n+    permissions: Permission[];\n+    lastLoginAt?: Date;\n+}\n+\n+// Constants\n+const MAX_USERS = 1000;\n+const DEFAULT_PERMISSIONS: Permission[] = [Permission.READ];\n+const USER_CACHE_TTL = 300000; // 5 minutes\n+\n+// Global variables\n+let userCount: number = 0;\n+let isInitialized: boolean = false;\n+\n+// Custom decorators\n+function LogMethod(target: any, propertyName: string, descriptor: PropertyDescriptor) {\n+    const method = descriptor.value;\n+    \n+    descriptor.value = function (...args: any[]) {\n+        console.log(`Calling ${propertyName} with arguments:`, args);\n+        const result = method.apply(this, args);\n+        console.log(`${propertyName} returned:`, result);\n+        return result;\n+    };\n+}\n+\n+function Cache(ttl: number = 300000) {\n+    return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {\n+        const method = descriptor.value;\n+        const cache = new Map\u003cstring, { data: any; timestamp: number }\u003e();\n+        \n+        descriptor.value = function (...args: any[]) {\n+            const key = JSON.stringify(args);\n+            const cached = cache.get(key);\n+            const now = Date.now();\n+            \n+            if (cached \u0026\u0026 (now - cached.timestamp) \u003c ttl) {\n+                return cached.data;\n+            }\n+            \n+            const result = method.apply(this, args);\n+            cache.set(key, { data: result, timestamp: now });\n+            return result;\n+        };\n+    };\n+}\n+\n+function Validate(validator: (value: any) =\u003e boolean, message: string) {\n+    return function (target: any, propertyName: string) {\n+        let value = target[propertyName];\n+        \n+        Object.defineProperty(target, propertyName, {\n+            get: () =\u003e value,\n+            set: (newValue) =\u003e {\n+                if (!validator(newValue)) {\n+                    throw new Error(message);\n+                }\n+                value = newValue;\n+            },\n+            enumerable: true,\n+            configurable: true\n+        });\n+    };\n+}\n+\n+// Custom error classes\n+class UserNotFoundError extends Error {\n+    constructor(id: UserId) {\n+        super(`User with ID ${id} not found`);\n+        this.name = 'UserNotFoundError';\n+    }\n+}\n+\n+class ValidationError extends Error {\n+    constructor(field: string, message: string) {\n+        super(`Validation error for ${field}: ${message}`);\n+        this.name = 'ValidationError';\n+    }\n+}\n+\n+class DuplicateEmailError extends Error {\n+    constructor(email: UserEmail) {\n+        super(`User with email ${email} already exists`);\n+        this.name = 'DuplicateEmailError';\n+    }\n+}\n+\n+// Utility functions\n+const validateEmail = (email: string): boolean =\u003e {\n+    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n+    return emailRegex.test(email);\n+};\n+\n+const generateId = (): UserId =\u003e Math.floor(Math.random() * 1000000);\n+\n+const isValidUserStatus = (status: string): status is UserStatus =\u003e {\n+    return Object.values(UserStatus).includes(status as UserStatus);\n+};\n+\n+const createApiResponse = \u003cT\u003e(data: T, status: 'success' | 'error' = 'success', message?: string): ApiResponse\u003cT\u003e =\u003e ({\n+    data,\n+    status,\n+    message,\n+    timestamp: new Date()\n+});\n+\n+// User class\n+class User implements IUser {\n+    public readonly id: UserId;\n+    public name: UserName;\n+    public email: UserEmail;\n+    public status: UserStatus;\n+    public readonly createdAt: Date;\n+    public metadata: Record\u003cstring, any\u003e;\n+    public permissions: Permission[];\n+    public lastLoginAt?: Date;\n+\n+    constructor(\n+        id: UserId,\n+        name: UserName,\n+        email: UserEmail,\n+        status: UserStatus = UserStatus.ACTIVE,\n+        permissions: Permission[] = DEFAULT_PERMISSIONS\n+    ) {\n+        this.id = id;\n+        this.name = name;\n+        this.email = email;\n+        this.status = status;\n+        this.createdAt = new Date();\n+        this.metadata = {};\n+        this.permissions = permissions;\n+    }\n+\n+    public activate(): void {\n+        this.status = UserStatus.ACTIVE;\n+    }\n+\n+    public deactivate(): void {\n+        this.status = UserStatus.INACTIVE;\n+    }\n+\n+    public suspend(): void {\n+        this.status = UserStatus.SUSPENDED;\n+    }\n+\n+    public hasPermission(permission: Permission): boolean {\n+        return this.permissions.includes(permission) || this.permissions.includes(Permission.ADMIN);\n+    }\n+\n+    public addPermission(permission: Permission): void {\n+        if (!this.hasPermission(permission)) {\n+            this.permissions.push(permission);\n+        }\n+    }\n+\n+    public removePermission(permission: Permission): void {\n+        this.permissions = this.permissions.filter(p =\u003e p !== permission);\n+    }\n+\n+    public updateLastLogin(): void {\n+        this.lastLoginAt = new Date();\n+    }\n+\n+    public toJSON(): UserResponse {\n+        return {\n+            id: this.id,\n+            name: this.name,\n+            email: this.email,\n+            status: this.status,\n+            createdAt: this.createdAt,\n+            metadata: this.metadata,\n+            permissions: this.permissions,\n+            lastLoginAt: this.lastLoginAt\n+        };\n+    }\n+\n+    public static fromJSON(data: UserResponse): User {\n+        const user = new User(data.id, data.name, data.email, data.status, data.permissions);\n+        user.metadata = data.metadata || {};\n+        user.lastLoginAt = data.lastLoginAt;\n+        return user;\n+    }\n+}\n+\n+// Repository implementation\n+class MemoryUserRepository implements IUserRepository\u003cUser\u003e {\n+    private users: Map\u003cUserId, User\u003e = new Map();\n+    private nextId: UserId = 1;\n+\n+    async getById(id: UserId): Promise\u003cUser | null\u003e {\n+        return this.users.get(id) || null;\n+    }\n+\n+    async save(user: User): Promise\u003cUser\u003e {\n+        if (!user.id) {\n+            (user as any).id = this.nextId++;\n+        }\n+        this.users.set(user.id, user);\n+        return user;\n+    }\n+\n+    async delete(id: UserId): Promise\u003cboolean\u003e {\n+        return this.users.delete(id);\n+    }\n+\n+    async findByEmail(email: UserEmail): Promise\u003cUser | null\u003e {\n+        for (const user of this.users.values()) {\n+            if (user.email === email) {\n+                return user;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    async listAll(): Promise\u003cUser[]\u003e {\n+        return Array.from(this.users.values());\n+    }\n+\n+    public size(): number {\n+        return this.users.size;\n+    }\n+\n+    public clear(): void {\n+        this.users.clear();\n+        this.nextId = 1;\n+    }\n+}\n+\n+// Service class\n+class UserService implements IUserService {\n+    private cache: Map\u003cUserId, { user: User; timestamp: number }\u003e = new Map();\n+\n+    constructor(\n+        private repository: IUserRepository\u003cUser\u003e,\n+        private logger?: Console\n+    ) {\n+        this.logger = logger || console;\n+    }\n+\n+    async getUser(id: UserId): Promise\u003cUser\u003e {\n+        const user = await this.repository.getById(id);\n+        if (!user) {\n+            throw new UserNotFoundError(id);\n+        }\n+        return user;\n+    }\n+\n+    async createUser(userData: CreateUserRequest): Promise\u003cUser\u003e {\n+        if (!validateEmail(userData.email)) {\n+            throw new ValidationError('email', 'Invalid email format');\n+        }\n+\n+        const existingUser = await this.repository.findByEmail(userData.email);\n+        if (existingUser) {\n+            throw new DuplicateEmailError(userData.email);\n+        }\n+\n+        const user = new User(\n+            generateId(),\n+            userData.name,\n+            userData.email,\n+            UserStatus.ACTIVE,\n+            userData.permissions || DEFAULT_PERMISSIONS\n+        );\n+\n+        if (userData.metadata) {\n+            user.metadata = userData.metadata;\n+        }\n+\n+        const savedUser = await this.repository.save(user);\n+        userCount++;\n+\n+        this.logger?.log(`Created user: ${savedUser.name} (${savedUser.email})`);\n+        return savedUser;\n+    }\n+\n+    async updateUser(id: UserId, updates: Partial\u003cIUser\u003e): Promise\u003cUser\u003e {\n+        const user = await this.getUser(id);\n+\n+        if (updates.name !== undefined) user.name = updates.name;\n+        if (updates.email !== undefined) {\n+            if (!validateEmail(updates.email)) {\n+                throw new ValidationError('email', 'Invalid email format');\n+            }\n+            user.email = updates.email;\n+        }\n+        if (updates.status !== undefined) user.status = updates.status;\n+        if (updates.metadata !== undefined) user.metadata = { ...user.metadata, ...updates.metadata };\n+\n+        const updatedUser = await this.repository.save(user);\n+        this.invalidateCache(id);\n+\n+        return updatedUser;\n+    }\n+\n+    async deleteUser(id: UserId): Promise\u003cboolean\u003e {\n+        const user = await this.getUser(id);\n+        const success = await this.repository.delete(id);\n+\n+        if (success) {\n+            userCount--;\n+            this.invalidateCache(id);\n+            this.logger?.log(`Deleted user: ${user.name} (${user.email})`);\n+        }\n+\n+        return success;\n+    }\n+\n+    async listUsers(status?: UserStatus): Promise\u003cUser[]\u003e {\n+        const users = await this.repository.listAll();\n+        \n+        if (status) {\n+            return users.filter(user =\u003e user.status === status);\n+        }\n+        \n+        return users.sort((a, b) =\u003e a.createdAt.getTime() - b.createdAt.getTime());\n+    }\n+\n+    async searchUsers(query: string): Promise\u003cUser[]\u003e {\n+        const users = await this.repository.listAll();\n+        const lowerQuery = query.toLowerCase();\n+\n+        return users.filter(user =\u003e\n+            user.name.toLowerCase().includes(lowerQuery) ||\n+            user.email.toLowerCase().includes(lowerQuery)\n+        );\n+    }\n+\n+    private invalidateCache(id: UserId): void {\n+        this.cache.delete(id);\n+    }\n+}\n+\n+// Manager class with generics\n+class UserManager\u003cT extends IUser = User\u003e {\n+    constructor(private service: IUserService) {}\n+\n+    async bulkCreateUsers(userDataList: CreateUserRequest[]): Promise\u003cApiResponse\u003cUser[]\u003e\u003e {\n+        const createdUsers: User[] = [];\n+        const errors: string[] = [];\n+\n+        for (const userData of userDataList) {\n+            try {\n+                const user = await this.service.createUser(userData);\n+                createdUsers.push(user);\n+            } catch (error) {\n+                errors.push(`Failed to create user ${userData.name}: ${error.message}`);\n+            }\n+        }\n+\n+        return createApiResponse(createdUsers, errors.length \u003e 0 ? 'error' : 'success');\n+    }\n+\n+    async getUserStats(): Promise\u003cApiResponse\u003c{\n+        total: number;\n+        active: number;\n+        inactive: number;\n+        suspended: number;\n+    }\u003e\u003e {\n+        const users = await this.service.listUsers();\n+        \n+        const stats = {\n+            total: users.length,\n+            active: users.filter(u =\u003e u.status === UserStatus.ACTIVE).length,\n+            inactive: users.filter(u =\u003e u.status === UserStatus.INACTIVE).length,\n+            suspended: users.filter(u =\u003e u.status === UserStatus.SUSPENDED).length\n+        };\n+\n+        return createApiResponse(stats);\n+    }\n+\n+    async exportUsers(format: 'json' | 'csv' = 'json'): Promise\u003cstring\u003e {\n+        const users = await this.service.listUsers();\n+        const userData = users.map(user =\u003e user.toJSON());\n+\n+        if (format === 'json') {\n+            return JSON.stringify(userData, null, 2);\n+        } else {\n+            // Simple CSV implementation\n+            const headers = Object.keys(userData[0] || {});\n+            const csvRows = [\n+                headers.join(','),\n+                ...userData.map(row =\u003e \n+                    headers.map(header =\u003e JSON.stringify(row[header as keyof UserResponse])).join(',')\n+                )\n+            ];\n+            return csvRows.join('\\n');\n+        }\n+    }\n+}\n+\n+// Factory functions\n+function createUserRepository(type: 'memory' | 'database' = 'memory'): IUserRepository\u003cUser\u003e {\n+    switch (type) {\n+        case 'memory':\n+            return new MemoryUserRepository();\n+        case 'database':\n+            throw new Error('Database repository not implemented');\n+        default:\n+            throw new Error(`Unknown repository type: ${type}`);\n+    }\n+}\n+\n+function createUserService(repository?: IUserRepository\u003cUser\u003e): UserService {\n+    const repo = repository || createUserRepository('memory');\n+    return new UserService(repo);\n+}\n+\n+// Initialization function\n+function initializeUserSystem(config: {\n+    repositoryType?: 'memory' | 'database';\n+    maxUsers?: number;\n+    defaultPermissions?: Permission[];\n+} = {}): { service: UserService; manager: UserManager } {\n+    isInitialized = true;\n+    userCount = 0;\n+\n+    const repository = createUserRepository(config.repositoryType);\n+    const service = createUserService(repository);\n+    const manager = new UserManager(service);\n+\n+    console.log('User management system initialized');\n+    return { service, manager };\n+}\n+\n+// Async main function\n+async function main(): Promise\u003cvoid\u003e {\n+    const { service, manager } = initializeUserSystem();\n+\n+    // Create test users\n+    const testUsers: CreateUserRequest[] = [\n+        { name: 'Alice Johnson', email: 'alice@example.com', permissions: [Permission.READ, Permission.WRITE] },\n+        { name: 'Bob Smith', email: 'bob@example.com', permissions: [Permission.READ] },\n+        { name: 'Charlie Admin', email: 'charlie@example.com', permissions: [Permission.ADMIN] }\n+    ];\n+\n+    const result = await manager.bulkCreateUsers(testUsers);\n+    console.log('Bulk create result:', result);\n+\n+    const stats = await manager.getUserStats();\n+    console.log('User stats:', stats);\n+\n+    const exportedData = await manager.exportUsers('json');\n+    console.log('Exported users:', exportedData);\n+}\n+\n+// Module exports\n+export {\n+    User,\n+    UserService,\n+    UserManager,\n+    MemoryUserRepository,\n+    UserStatus,\n+    Permission,\n+    createUserRepository,\n+    createUserService,\n+    initializeUserSystem,\n+    type IUser,\n+    type IUserRepository,\n+    type IUserService,\n+    type CreateUserRequest,\n+    type UpdateUserRequest,\n+    type UserResponse,\n+    type ApiResponse\n+};\n+\n+// Execute main function\n+main().catch(console.error); \n\\ No newline at end of file",
      "affected_symbols": [
        {
          "symbol_name": "listUsers",
          "symbol_type": "method",
          "full_code": "    async listUsers(status?: UserStatus): Promise\u003cUser[]\u003e {\n        const users = await this.repository.listAll();\n        \n        if (status) {\n            return users.filter(user =\u003e user.status === status);\n        }\n        \n        return users.sort((a, b) =\u003e a.createdAt.getTime() - b.createdAt.getTime());\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "this.repository.listAll",
              "snippet": "this.repository.listAll()",
              "line": 389,
              "type": "call_expression"
            },
            {
              "name": "users.filter",
              "snippet": "users.filter(user =\u003e user.status === status)",
              "line": 392,
              "type": "call_expression"
            },
            {
              "name": "users.sort",
              "snippet": "users.sort((a, b) =\u003e a.createdAt.getTime() - b.createdAt.getTime())",
              "line": 395,
              "type": "call_expression"
            },
            {
              "name": "a.createdAt.getTime",
              "snippet": "a.createdAt.getTime()",
              "line": 395,
              "type": "call_expression"
            },
            {
              "name": "b.createdAt.getTime",
              "snippet": "b.createdAt.getTime()",
              "line": 395,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 388,
          "end_line": 396
        },
        {
          "symbol_name": "row",
          "symbol_type": "function",
          "full_code": "                ...userData.map(row =\u003e \n                    headers.map(header =\u003e JSON.stringify(row[header as keyof UserResponse])).join(',')",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "headers.map(header =\u003e JSON.stringify(row[header as keyof UserResponse])).join",
              "snippet": "headers.map(header =\u003e JSON.stringify(row[header as keyof UserResponse])).join(',')",
              "line": 463,
              "type": "call_expression"
            },
            {
              "name": "headers.map",
              "snippet": "headers.map(header =\u003e JSON.stringify(row[header as keyof UserResponse]))",
              "line": 463,
              "type": "call_expression"
            },
            {
              "name": "JSON.stringify",
              "snippet": "JSON.stringify(row[header as keyof UserResponse])",
              "line": 463,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 462,
          "end_line": 463
        },
        {
          "symbol_name": "testUsers",
          "symbol_type": "variable",
          "full_code": "    const testUsers: CreateUserRequest[] = [\n        { name: 'Alice Johnson', email: 'alice@example.com', permissions: [Permission.READ, Permission.WRITE] },\n        { name: 'Bob Smith', email: 'bob@example.com', permissions: [Permission.READ] },\n        { name: 'Charlie Admin', email: 'charlie@example.com', permissions: [Permission.ADMIN] }\n    ];",
          "doc_comment": "// Create test users",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.ts",
          "start_line": 510,
          "end_line": 514
        },
        {
          "symbol_name": "deactivate",
          "symbol_type": "method",
          "full_code": "    public deactivate(): void {\n        this.status = UserStatus.INACTIVE;\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.ts",
          "start_line": 217,
          "end_line": 219
        },
        {
          "symbol_name": "suspend",
          "symbol_type": "method",
          "full_code": "    public suspend(): void {\n        this.status = UserStatus.SUSPENDED;\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.ts",
          "start_line": 221,
          "end_line": 223
        },
        {
          "symbol_name": "bulkCreateUsers",
          "symbol_type": "method",
          "full_code": "    async bulkCreateUsers(userDataList: CreateUserRequest[]): Promise\u003cApiResponse\u003cUser[]\u003e\u003e {\n        const createdUsers: User[] = [];\n        const errors: string[] = [];\n\n        for (const userData of userDataList) {\n            try {\n                const user = await this.service.createUser(userData);\n                createdUsers.push(user);\n            } catch (error) {\n                errors.push(`Failed to create user ${userData.name}: ${error.message}`);\n            }\n        }\n\n        return createApiResponse(createdUsers, errors.length \u003e 0 ? 'error' : 'success');\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "this.service.createUser",
              "snippet": "this.service.createUser(userData)",
              "line": 423,
              "type": "call_expression"
            },
            {
              "name": "createdUsers.push",
              "snippet": "createdUsers.push(user)",
              "line": 424,
              "type": "call_expression"
            },
            {
              "name": "errors.push",
              "snippet": "errors.push(`Failed to create user ${userData.name}: ${error.message}`)",
              "line": 426,
              "type": "call_expression"
            },
            {
              "name": "createApiResponse",
              "snippet": "createApiResponse(createdUsers, errors.length \u003e 0 ? 'error' : 'success')",
              "line": 430,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 417,
          "end_line": 431
        },
        {
          "symbol_name": "createUserService",
          "symbol_type": "function",
          "full_code": "function createUserService(repository?: IUserRepository\u003cUser\u003e): UserService {\n    const repo = repository || createUserRepository('memory');\n    return new UserService(repo);\n}",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "createUserRepository",
              "snippet": "createUserRepository('memory')",
              "line": 484,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 483,
          "end_line": 486
        },
        {
          "symbol_name": "IUserRepository",
          "symbol_type": "interface",
          "full_code": "interface IUserRepository\u003cT = IUser\u003e {\n    getById(id: number): Promise\u003cT | null\u003e;\n    save(user: T): Promise\u003cT\u003e;\n    delete(id: number): Promise\u003cboolean\u003e;\n    findByEmail(email: string): Promise\u003cT | null\u003e;\n    listAll(): Promise\u003cT[]\u003e;\n}",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.ts",
          "start_line": 15,
          "end_line": 21
        },
        {
          "symbol_name": "ValidationError",
          "symbol_type": "class",
          "full_code": "class ValidationError extends Error {\n    constructor(field: string, message: string) {\n        super(`Validation error for ${field}: ${message}`);\n        this.name = 'ValidationError';\n    }\n}",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "constructor",
              "snippet": "constructor(field: string, message: string) {\n        super(`Validation error for ${field}: ${message}`);\n        this.name = 'ValidationError';\n    }",
              "line": 154,
              "type": "method"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 153,
          "end_line": 158
        },
        {
          "symbol_name": "delete",
          "symbol_type": "method",
          "full_code": "    async delete(id: UserId): Promise\u003cboolean\u003e {\n        return this.users.delete(id);\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "this.users.delete",
              "snippet": "this.users.delete(id)",
              "line": 282,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 281,
          "end_line": 283
        },
        {
          "symbol_name": "UserService",
          "symbol_type": "class",
          "full_code": "class UserService implements IUserService {\n    private cache: Map\u003cUserId, { user: User; timestamp: number }\u003e = new Map();\n\n    constructor(\n        private repository: IUserRepository\u003cUser\u003e,\n        private logger?: Console\n    ) {\n        this.logger = logger || console;\n    }\n\n    async getUser(id: UserId): Promise\u003cUser\u003e {\n        const user = await this.repository.getById(id);\n        if (!user) {\n            throw new UserNotFoundError(id);\n        }\n        return user;\n    }\n\n    async createUser(userData: CreateUserRequest): Promise\u003cUser\u003e {\n        if (!validateEmail(userData.email)) {\n            throw new ValidationError('email', 'Invalid email format');\n        }\n\n        const existingUser = await this.repository.findByEmail(userData.email);\n        if (existingUser) {\n            throw new DuplicateEmailError(userData.email);\n        }\n\n        const user = new User(\n            generateId(),\n            userData.name,\n            userData.email,\n            UserStatus.ACTIVE,\n            userData.permissions || DEFAULT_PERMISSIONS\n        );\n\n        if (userData.metadata) {\n            user.metadata = userData.metadata;\n        }\n\n        const savedUser = await this.repository.save(user);\n        userCount++;\n\n        this.logger?.log(`Created user: ${savedUser.name} (${savedUser.email})`);\n        return savedUser;\n    }\n\n    async updateUser(id: UserId, updates: Partial\u003cIUser\u003e): Promise\u003cUser\u003e {\n        const user = await this.getUser(id);\n\n        if (updates.name !== undefined) user.name = updates.name;\n        if (updates.email !== undefined) {\n            if (!validateEmail(updates.email)) {\n                throw new ValidationError('email', 'Invalid email format');\n            }\n            user.email = updates.email;\n        }\n        if (updates.status !== undefined) user.status = updates.status;\n        if (updates.metadata !== undefined) user.metadata = { ...user.metadata, ...updates.metadata };\n\n        const updatedUser = await this.repository.save(user);\n        this.invalidateCache(id);\n\n        return updatedUser;\n    }\n\n    async deleteUser(id: UserId): Promise\u003cboolean\u003e {\n        const user = await this.getUser(id);\n        const success = await this.repository.delete(id);\n\n        if (success) {\n            userCount--;\n            this.invalidateCache(id);\n            this.logger?.log(`Deleted user: ${user.name} (${user.email})`);\n        }\n\n        return success;\n    }\n\n    async listUsers(status?: UserStatus): Promise\u003cUser[]\u003e {\n        const users = await this.repository.listAll();\n        \n        if (status) {\n            return users.filter(user =\u003e user.status === status);\n        }\n        \n        return users.sort((a, b) =\u003e a.createdAt.getTime() - b.createdAt.getTime());\n    }\n\n    async searchUsers(query: string): Promise\u003cUser[]\u003e {\n        const users = await this.repository.listAll();\n        const lowerQuery = query.toLowerCase();\n\n        return users.filter(user =\u003e\n            user.name.toLowerCase().includes(lowerQuery) ||\n            user.email.toLowerCase().includes(lowerQuery)\n        );\n    }\n\n    private invalidateCache(id: UserId): void {\n        this.cache.delete(id);\n    }\n}",
          "doc_comment": "// Service class",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "cache",
              "snippet": "private cache: Map\u003cUserId, { user: User; timestamp: number }\u003e = new Map()",
              "line": 310,
              "type": "public_field_definition"
            },
            {
              "name": "constructor",
              "snippet": "constructor(\n        private repository: IUserRepository\u003cUser\u003e,\n        private logger?: Console\n    ) {\n        this.logger = logger || console;\n    }",
              "line": 312,
              "type": "method"
            },
            {
              "name": "getUser",
              "snippet": "async getUser(id: UserId): Promise\u003cUser\u003e {\n        const user = await this.repository.getById(id);\n        if (!user) {\n            throw new UserNotFoundError(id);\n        }\n        return user;\n    }",
              "line": 319,
              "type": "method"
            },
            {
              "name": "this.repository.getById",
              "snippet": "this.repository.getById(id)",
              "line": 320,
              "type": "call_expression"
            },
            {
              "name": "createUser",
              "snippet": "async createUser(userData: CreateUserRequest): Promise\u003cUser\u003e {\n        if (!validateEmail(userData.email)) {\n            throw new ValidationError('email', 'Invalid email format');\n        }\n\n        const existingUser = await this.repository.findByEmail(userData.email);\n        if (existingUser) {\n            throw new DuplicateEmailError(userData.email);\n        }\n\n        const user = new User(\n            generateId(),\n            userData.name,\n            userData.email,\n            UserStatus.ACTIVE,\n            userData.permissions || DEFAULT_PERMISSIONS\n        );\n\n        if (userData.metadata) {\n            user.metadata = userData.metadata;\n        }\n\n        const savedUser = await this.repository.save(user);\n        userCount++;\n\n        this.logger?.log(`Created user: ${savedUser.name} (${savedUser.email})`);\n        return savedUser;\n    }",
              "line": 327,
              "type": "method"
            },
            {
              "name": "validateEmail",
              "snippet": "validateEmail(userData.email)",
              "line": 328,
              "type": "call_expression"
            },
            {
              "name": "this.repository.findByEmail",
              "snippet": "this.repository.findByEmail(userData.email)",
              "line": 332,
              "type": "call_expression"
            },
            {
              "name": "generateId",
              "snippet": "generateId()",
              "line": 338,
              "type": "call_expression"
            },
            {
              "name": "this.repository.save",
              "snippet": "this.repository.save(user)",
              "line": 349,
              "type": "call_expression"
            },
            {
              "name": "this.logger?.log",
              "snippet": "this.logger?.log(`Created user: ${savedUser.name} (${savedUser.email})`)",
              "line": 352,
              "type": "call_expression"
            },
            {
              "name": "updateUser",
              "snippet": "async updateUser(id: UserId, updates: Partial\u003cIUser\u003e): Promise\u003cUser\u003e {\n        const user = await this.getUser(id);\n\n        if (updates.name !== undefined) user.name = updates.name;\n        if (updates.email !== undefined) {\n            if (!validateEmail(updates.email)) {\n                throw new ValidationError('email', 'Invalid email format');\n            }\n            user.email = updates.email;\n        }\n        if (updates.status !== undefined) user.status = updates.status;\n        if (updates.metadata !== undefined) user.metadata = { ...user.metadata, ...updates.metadata };\n\n        const updatedUser = await this.repository.save(user);\n        this.invalidateCache(id);\n\n        return updatedUser;\n    }",
              "line": 356,
              "type": "method"
            },
            {
              "name": "this.getUser",
              "snippet": "this.getUser(id)",
              "line": 357,
              "type": "call_expression"
            },
            {
              "name": "validateEmail",
              "snippet": "validateEmail(updates.email)",
              "line": 361,
              "type": "call_expression"
            },
            {
              "name": "this.repository.save",
              "snippet": "this.repository.save(user)",
              "line": 369,
              "type": "call_expression"
            },
            {
              "name": "this.invalidateCache",
              "snippet": "this.invalidateCache(id)",
              "line": 370,
              "type": "call_expression"
            },
            {
              "name": "deleteUser",
              "snippet": "async deleteUser(id: UserId): Promise\u003cboolean\u003e {\n        const user = await this.getUser(id);\n        const success = await this.repository.delete(id);\n\n        if (success) {\n            userCount--;\n            this.invalidateCache(id);\n            this.logger?.log(`Deleted user: ${user.name} (${user.email})`);\n        }\n\n        return success;\n    }",
              "line": 375,
              "type": "method"
            },
            {
              "name": "this.getUser",
              "snippet": "this.getUser(id)",
              "line": 376,
              "type": "call_expression"
            },
            {
              "name": "this.repository.delete",
              "snippet": "this.repository.delete(id)",
              "line": 377,
              "type": "call_expression"
            },
            {
              "name": "this.invalidateCache",
              "snippet": "this.invalidateCache(id)",
              "line": 381,
              "type": "call_expression"
            },
            {
              "name": "this.logger?.log",
              "snippet": "this.logger?.log(`Deleted user: ${user.name} (${user.email})`)",
              "line": 382,
              "type": "call_expression"
            },
            {
              "name": "listUsers",
              "snippet": "async listUsers(status?: UserStatus): Promise\u003cUser[]\u003e {\n        const users = await this.repository.listAll();\n        \n        if (status) {\n            return users.filter(user =\u003e user.status === status);\n        }\n        \n        return users.sort((a, b) =\u003e a.createdAt.getTime() - b.createdAt.getTime());\n    }",
              "line": 388,
              "type": "method"
            },
            {
              "name": "this.repository.listAll",
              "snippet": "this.repository.listAll()",
              "line": 389,
              "type": "call_expression"
            },
            {
              "name": "users.filter",
              "snippet": "users.filter(user =\u003e user.status === status)",
              "line": 392,
              "type": "call_expression"
            },
            {
              "name": "users.sort",
              "snippet": "users.sort((a, b) =\u003e a.createdAt.getTime() - b.createdAt.getTime())",
              "line": 395,
              "type": "call_expression"
            },
            {
              "name": "a.createdAt.getTime",
              "snippet": "a.createdAt.getTime()",
              "line": 395,
              "type": "call_expression"
            },
            {
              "name": "b.createdAt.getTime",
              "snippet": "b.createdAt.getTime()",
              "line": 395,
              "type": "call_expression"
            },
            {
              "name": "searchUsers",
              "snippet": "async searchUsers(query: string): Promise\u003cUser[]\u003e {\n        const users = await this.repository.listAll();\n        const lowerQuery = query.toLowerCase();\n\n        return users.filter(user =\u003e\n            user.name.toLowerCase().includes(lowerQuery) ||\n            user.email.toLowerCase().includes(lowerQuery)\n        );\n    }",
              "line": 398,
              "type": "method"
            },
            {
              "name": "this.repository.listAll",
              "snippet": "this.repository.listAll()",
              "line": 399,
              "type": "call_expression"
            },
            {
              "name": "query.toLowerCase",
              "snippet": "query.toLowerCase()",
              "line": 400,
              "type": "call_expression"
            },
            {
              "name": "users.filter",
              "snippet": "users.filter(user =\u003e\n            user.name.toLowerCase().includes(lowerQuery) ||\n            user.email.toLowerCase().includes(lowerQuery)\n        )",
              "line": 402,
              "type": "call_expression"
            },
            {
              "name": "user.name.toLowerCase().includes",
              "snippet": "user.name.toLowerCase().includes(lowerQuery)",
              "line": 403,
              "type": "call_expression"
            },
            {
              "name": "user.name.toLowerCase",
              "snippet": "user.name.toLowerCase()",
              "line": 403,
              "type": "call_expression"
            },
            {
              "name": "user.email.toLowerCase().includes",
              "snippet": "user.email.toLowerCase().includes(lowerQuery)",
              "line": 404,
              "type": "call_expression"
            },
            {
              "name": "user.email.toLowerCase",
              "snippet": "user.email.toLowerCase()",
              "line": 404,
              "type": "call_expression"
            },
            {
              "name": "invalidateCache",
              "snippet": "private invalidateCache(id: UserId): void {\n        this.cache.delete(id);\n    }",
              "line": 408,
              "type": "method"
            },
            {
              "name": "this.cache.delete",
              "snippet": "this.cache.delete(id)",
              "line": 409,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 309,
          "end_line": 411
        },
        {
          "symbol_name": "stats",
          "symbol_type": "variable",
          "full_code": "        const stats = {\n            total: users.length,\n            active: users.filter(u =\u003e u.status === UserStatus.ACTIVE).length,\n            inactive: users.filter(u =\u003e u.status === UserStatus.INACTIVE).length,\n            suspended: users.filter(u =\u003e u.status === UserStatus.SUSPENDED).length\n        };",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "users.filter",
              "snippet": "users.filter(u =\u003e u.status === UserStatus.ACTIVE)",
              "line": 443,
              "type": "call_expression"
            },
            {
              "name": "users.filter",
              "snippet": "users.filter(u =\u003e u.status === UserStatus.INACTIVE)",
              "line": 444,
              "type": "call_expression"
            },
            {
              "name": "users.filter",
              "snippet": "users.filter(u =\u003e u.status === UserStatus.SUSPENDED)",
              "line": 445,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 441,
          "end_line": 446
        },
        {
          "symbol_name": "DuplicateEmailError",
          "symbol_type": "class",
          "full_code": "class DuplicateEmailError extends Error {\n    constructor(email: UserEmail) {\n        super(`User with email ${email} already exists`);\n        this.name = 'DuplicateEmailError';\n    }\n}",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "constructor",
              "snippet": "constructor(email: UserEmail) {\n        super(`User with email ${email} already exists`);\n        this.name = 'DuplicateEmailError';\n    }",
              "line": 161,
              "type": "method"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 160,
          "end_line": 165
        },
        {
          "symbol_name": "findByEmail",
          "symbol_type": "method",
          "full_code": "    async findByEmail(email: UserEmail): Promise\u003cUser | null\u003e {\n        for (const user of this.users.values()) {\n            if (user.email === email) {\n                return user;\n            }\n        }\n        return null;\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "this.users.values",
              "snippet": "this.users.values()",
              "line": 286,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 285,
          "end_line": 292
        },
        {
          "symbol_name": "clear",
          "symbol_type": "method",
          "full_code": "    public clear(): void {\n        this.users.clear();\n        this.nextId = 1;\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "this.users.clear",
              "snippet": "this.users.clear()",
              "line": 303,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 302,
          "end_line": 305
        },
        {
          "symbol_name": "csvRows",
          "symbol_type": "variable",
          "full_code": "            const csvRows = [\n                headers.join(','),\n                ...userData.map(row =\u003e \n                    headers.map(header =\u003e JSON.stringify(row[header as keyof UserResponse])).join(',')\n                )\n            ];",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "headers.join",
              "snippet": "headers.join(',')",
              "line": 461,
              "type": "call_expression"
            },
            {
              "name": "userData.map",
              "snippet": "userData.map(row =\u003e \n                    headers.map(header =\u003e JSON.stringify(row[header as keyof UserResponse])).join(',')\n                )",
              "line": 462,
              "type": "call_expression"
            },
            {
              "name": "headers.map(header =\u003e JSON.stringify(row[header as keyof UserResponse])).join",
              "snippet": "headers.map(header =\u003e JSON.stringify(row[header as keyof UserResponse])).join(',')",
              "line": 463,
              "type": "call_expression"
            },
            {
              "name": "headers.map",
              "snippet": "headers.map(header =\u003e JSON.stringify(row[header as keyof UserResponse]))",
              "line": 463,
              "type": "call_expression"
            },
            {
              "name": "JSON.stringify",
              "snippet": "JSON.stringify(row[header as keyof UserResponse])",
              "line": 463,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 460,
          "end_line": 465
        },
        {
          "symbol_name": "IUser",
          "symbol_type": "interface",
          "full_code": "interface IUser {\n    id: number;\n    name: string;\n    email: string;\n    status: UserStatus;\n    createdAt: Date;\n    metadata?: Record\u003cstring, any\u003e;\n}",
          "doc_comment": "// Type definitions and interfaces",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.ts",
          "start_line": 6,
          "end_line": 13
        },
        {
          "symbol_name": "CreateUserRequest",
          "symbol_type": "interface",
          "full_code": "interface CreateUserRequest {\n    name: UserName;\n    email: UserEmail;\n    permissions?: Permission[];\n    metadata?: Record\u003cstring, any\u003e;\n}",
          "doc_comment": "// Request/Response types",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.ts",
          "start_line": 66,
          "end_line": 71
        },
        {
          "symbol_name": "UpdateUserRequest",
          "symbol_type": "interface",
          "full_code": "interface UpdateUserRequest {\n    name?: UserName;\n    email?: UserEmail;\n    status?: UserStatus;\n    permissions?: Permission[];\n}",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.ts",
          "start_line": 73,
          "end_line": 78
        },
        {
          "symbol_name": "UserResponse",
          "symbol_type": "interface",
          "full_code": "interface UserResponse extends IUser {\n    permissions: Permission[];\n    lastLoginAt?: Date;\n}",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.ts",
          "start_line": 80,
          "end_line": 83
        },
        {
          "symbol_name": "size",
          "symbol_type": "method",
          "full_code": "    public size(): number {\n        return this.users.size;\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.ts",
          "start_line": 298,
          "end_line": 300
        },
        {
          "symbol_name": "deleteUser",
          "symbol_type": "method",
          "full_code": "    async deleteUser(id: UserId): Promise\u003cboolean\u003e {\n        const user = await this.getUser(id);\n        const success = await this.repository.delete(id);\n\n        if (success) {\n            userCount--;\n            this.invalidateCache(id);\n            this.logger?.log(`Deleted user: ${user.name} (${user.email})`);\n        }\n\n        return success;\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "this.getUser",
              "snippet": "this.getUser(id)",
              "line": 376,
              "type": "call_expression"
            },
            {
              "name": "this.repository.delete",
              "snippet": "this.repository.delete(id)",
              "line": 377,
              "type": "call_expression"
            },
            {
              "name": "this.invalidateCache",
              "snippet": "this.invalidateCache(id)",
              "line": 381,
              "type": "call_expression"
            },
            {
              "name": "this.logger?.log",
              "snippet": "this.logger?.log(`Deleted user: ${user.name} (${user.email})`)",
              "line": 382,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 375,
          "end_line": 386
        },
        {
          "symbol_name": "Permission",
          "symbol_type": "enum",
          "full_code": "enum Permission {\n    READ = 'read',\n    WRITE = 'write',\n    DELETE = 'delete',\n    ADMIN = 'admin'\n}",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.ts",
          "start_line": 44,
          "end_line": 49
        },
        {
          "symbol_name": "createUser",
          "symbol_type": "method",
          "full_code": "    async createUser(userData: CreateUserRequest): Promise\u003cUser\u003e {\n        if (!validateEmail(userData.email)) {\n            throw new ValidationError('email', 'Invalid email format');\n        }\n\n        const existingUser = await this.repository.findByEmail(userData.email);\n        if (existingUser) {\n            throw new DuplicateEmailError(userData.email);\n        }\n\n        const user = new User(\n            generateId(),\n            userData.name,\n            userData.email,\n            UserStatus.ACTIVE,\n            userData.permissions || DEFAULT_PERMISSIONS\n        );\n\n        if (userData.metadata) {\n            user.metadata = userData.metadata;\n        }\n\n        const savedUser = await this.repository.save(user);\n        userCount++;\n\n        this.logger?.log(`Created user: ${savedUser.name} (${savedUser.email})`);\n        return savedUser;\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "validateEmail",
              "snippet": "validateEmail(userData.email)",
              "line": 328,
              "type": "call_expression"
            },
            {
              "name": "this.repository.findByEmail",
              "snippet": "this.repository.findByEmail(userData.email)",
              "line": 332,
              "type": "call_expression"
            },
            {
              "name": "generateId",
              "snippet": "generateId()",
              "line": 338,
              "type": "call_expression"
            },
            {
              "name": "this.repository.save",
              "snippet": "this.repository.save(user)",
              "line": 349,
              "type": "call_expression"
            },
            {
              "name": "this.logger?.log",
              "snippet": "this.logger?.log(`Created user: ${savedUser.name} (${savedUser.email})`)",
              "line": 352,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 327,
          "end_line": 354
        },
        {
          "symbol_name": "exportUsers",
          "symbol_type": "method",
          "full_code": "    async exportUsers(format: 'json' | 'csv' = 'json'): Promise\u003cstring\u003e {\n        const users = await this.service.listUsers();\n        const userData = users.map(user =\u003e user.toJSON());\n\n        if (format === 'json') {\n            return JSON.stringify(userData, null, 2);\n        } else {\n            // Simple CSV implementation\n            const headers = Object.keys(userData[0] || {});\n            const csvRows = [\n                headers.join(','),\n                ...userData.map(row =\u003e \n                    headers.map(header =\u003e JSON.stringify(row[header as keyof UserResponse])).join(',')\n                )\n            ];\n            return csvRows.join('\\n');\n        }\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "this.service.listUsers",
              "snippet": "this.service.listUsers()",
              "line": 452,
              "type": "call_expression"
            },
            {
              "name": "users.map",
              "snippet": "users.map(user =\u003e user.toJSON())",
              "line": 453,
              "type": "call_expression"
            },
            {
              "name": "user.toJSON",
              "snippet": "user.toJSON()",
              "line": 453,
              "type": "call_expression"
            },
            {
              "name": "JSON.stringify",
              "snippet": "JSON.stringify(userData, null, 2)",
              "line": 456,
              "type": "call_expression"
            },
            {
              "name": "Object.keys",
              "snippet": "Object.keys(userData[0] || {})",
              "line": 459,
              "type": "call_expression"
            },
            {
              "name": "headers.join",
              "snippet": "headers.join(',')",
              "line": 461,
              "type": "call_expression"
            },
            {
              "name": "userData.map",
              "snippet": "userData.map(row =\u003e \n                    headers.map(header =\u003e JSON.stringify(row[header as keyof UserResponse])).join(',')\n                )",
              "line": 462,
              "type": "call_expression"
            },
            {
              "name": "headers.map(header =\u003e JSON.stringify(row[header as keyof UserResponse])).join",
              "snippet": "headers.map(header =\u003e JSON.stringify(row[header as keyof UserResponse])).join(',')",
              "line": 463,
              "type": "call_expression"
            },
            {
              "name": "headers.map",
              "snippet": "headers.map(header =\u003e JSON.stringify(row[header as keyof UserResponse]))",
              "line": 463,
              "type": "call_expression"
            },
            {
              "name": "JSON.stringify",
              "snippet": "JSON.stringify(row[header as keyof UserResponse])",
              "line": 463,
              "type": "call_expression"
            },
            {
              "name": "csvRows.join",
              "snippet": "csvRows.join('\\n')",
              "line": 466,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 451,
          "end_line": 468
        },
        {
          "symbol_name": "createUserRepository",
          "symbol_type": "function",
          "full_code": "function createUserRepository(type: 'memory' | 'database' = 'memory'): IUserRepository\u003cUser\u003e {\n    switch (type) {\n        case 'memory':\n            return new MemoryUserRepository();\n        case 'database':\n            throw new Error('Database repository not implemented');\n        default:\n            throw new Error(`Unknown repository type: ${type}`);\n    }\n}",
          "doc_comment": "// Factory functions",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.ts",
          "start_line": 472,
          "end_line": 481
        },
        {
          "symbol_name": "Cache",
          "symbol_type": "function",
          "full_code": "function Cache(ttl: number = 300000) {\n    return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {\n        const method = descriptor.value;\n        const cache = new Map\u003cstring, { data: any; timestamp: number }\u003e();\n        \n        descriptor.value = function (...args: any[]) {\n            const key = JSON.stringify(args);\n            const cached = cache.get(key);\n            const now = Date.now();\n            \n            if (cached \u0026\u0026 (now - cached.timestamp) \u003c ttl) {\n                return cached.data;\n            }\n            \n            const result = method.apply(this, args);\n            cache.set(key, { data: result, timestamp: now });\n            return result;\n        };\n    };\n}",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "JSON.stringify",
              "snippet": "JSON.stringify(args)",
              "line": 112,
              "type": "call_expression"
            },
            {
              "name": "cache.get",
              "snippet": "cache.get(key)",
              "line": 113,
              "type": "call_expression"
            },
            {
              "name": "Date.now",
              "snippet": "Date.now()",
              "line": 114,
              "type": "call_expression"
            },
            {
              "name": "method.apply",
              "snippet": "method.apply(this, args)",
              "line": 120,
              "type": "call_expression"
            },
            {
              "name": "cache.set",
              "snippet": "cache.set(key, { data: result, timestamp: now })",
              "line": 121,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 106,
          "end_line": 125
        },
        {
          "symbol_name": "constructor",
          "symbol_type": "method",
          "full_code": "    constructor(id: UserId) {\n        super(`User with ID ${id} not found`);\n        this.name = 'UserNotFoundError';\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.ts",
          "start_line": 147,
          "end_line": 150
        },
        {
          "symbol_name": "addPermission",
          "symbol_type": "method",
          "full_code": "    public addPermission(permission: Permission): void {\n        if (!this.hasPermission(permission)) {\n            this.permissions.push(permission);\n        }\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "this.hasPermission",
              "snippet": "this.hasPermission(permission)",
              "line": 230,
              "type": "call_expression"
            },
            {
              "name": "this.permissions.push",
              "snippet": "this.permissions.push(permission)",
              "line": 231,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 229,
          "end_line": 233
        },
        {
          "symbol_name": "toJSON",
          "symbol_type": "method",
          "full_code": "    public toJSON(): UserResponse {\n        return {\n            id: this.id,\n            name: this.name,\n            email: this.email,\n            status: this.status,\n            createdAt: this.createdAt,\n            metadata: this.metadata,\n            permissions: this.permissions,\n            lastLoginAt: this.lastLoginAt\n        };\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.ts",
          "start_line": 243,
          "end_line": 254
        },
        {
          "symbol_name": "MemoryUserRepository",
          "symbol_type": "class",
          "full_code": "class MemoryUserRepository implements IUserRepository\u003cUser\u003e {\n    private users: Map\u003cUserId, User\u003e = new Map();\n    private nextId: UserId = 1;\n\n    async getById(id: UserId): Promise\u003cUser | null\u003e {\n        return this.users.get(id) || null;\n    }\n\n    async save(user: User): Promise\u003cUser\u003e {\n        if (!user.id) {\n            (user as any).id = this.nextId++;\n        }\n        this.users.set(user.id, user);\n        return user;\n    }\n\n    async delete(id: UserId): Promise\u003cboolean\u003e {\n        return this.users.delete(id);\n    }\n\n    async findByEmail(email: UserEmail): Promise\u003cUser | null\u003e {\n        for (const user of this.users.values()) {\n            if (user.email === email) {\n                return user;\n            }\n        }\n        return null;\n    }\n\n    async listAll(): Promise\u003cUser[]\u003e {\n        return Array.from(this.users.values());\n    }\n\n    public size(): number {\n        return this.users.size;\n    }\n\n    public clear(): void {\n        this.users.clear();\n        this.nextId = 1;\n    }\n}",
          "doc_comment": "// Repository implementation",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "users",
              "snippet": "private users: Map\u003cUserId, User\u003e = new Map()",
              "line": 266,
              "type": "public_field_definition"
            },
            {
              "name": "nextId",
              "snippet": "private nextId: UserId = 1",
              "line": 267,
              "type": "public_field_definition"
            },
            {
              "name": "getById",
              "snippet": "async getById(id: UserId): Promise\u003cUser | null\u003e {\n        return this.users.get(id) || null;\n    }",
              "line": 269,
              "type": "method"
            },
            {
              "name": "this.users.get",
              "snippet": "this.users.get(id)",
              "line": 270,
              "type": "call_expression"
            },
            {
              "name": "save",
              "snippet": "async save(user: User): Promise\u003cUser\u003e {\n        if (!user.id) {\n            (user as any).id = this.nextId++;\n        }\n        this.users.set(user.id, user);\n        return user;\n    }",
              "line": 273,
              "type": "method"
            },
            {
              "name": "this.users.set",
              "snippet": "this.users.set(user.id, user)",
              "line": 277,
              "type": "call_expression"
            },
            {
              "name": "delete",
              "snippet": "async delete(id: UserId): Promise\u003cboolean\u003e {\n        return this.users.delete(id);\n    }",
              "line": 281,
              "type": "method"
            },
            {
              "name": "this.users.delete",
              "snippet": "this.users.delete(id)",
              "line": 282,
              "type": "call_expression"
            },
            {
              "name": "findByEmail",
              "snippet": "async findByEmail(email: UserEmail): Promise\u003cUser | null\u003e {\n        for (const user of this.users.values()) {\n            if (user.email === email) {\n                return user;\n            }\n        }\n        return null;\n    }",
              "line": 285,
              "type": "method"
            },
            {
              "name": "this.users.values",
              "snippet": "this.users.values()",
              "line": 286,
              "type": "call_expression"
            },
            {
              "name": "listAll",
              "snippet": "async listAll(): Promise\u003cUser[]\u003e {\n        return Array.from(this.users.values());\n    }",
              "line": 294,
              "type": "method"
            },
            {
              "name": "Array.from",
              "snippet": "Array.from(this.users.values())",
              "line": 295,
              "type": "call_expression"
            },
            {
              "name": "this.users.values",
              "snippet": "this.users.values()",
              "line": 295,
              "type": "call_expression"
            },
            {
              "name": "size",
              "snippet": "public size(): number {\n        return this.users.size;\n    }",
              "line": 298,
              "type": "method"
            },
            {
              "name": "clear",
              "snippet": "public clear(): void {\n        this.users.clear();\n        this.nextId = 1;\n    }",
              "line": 302,
              "type": "method"
            },
            {
              "name": "this.users.clear",
              "snippet": "this.users.clear()",
              "line": 303,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 265,
          "end_line": 306
        },
        {
          "symbol_name": "listAll",
          "symbol_type": "method",
          "full_code": "    async listAll(): Promise\u003cUser[]\u003e {\n        return Array.from(this.users.values());\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "Array.from",
              "snippet": "Array.from(this.users.values())",
              "line": 295,
              "type": "call_expression"
            },
            {
              "name": "this.users.values",
              "snippet": "this.users.values()",
              "line": 295,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 294,
          "end_line": 296
        },
        {
          "symbol_name": "searchUsers",
          "symbol_type": "method",
          "full_code": "    async searchUsers(query: string): Promise\u003cUser[]\u003e {\n        const users = await this.repository.listAll();\n        const lowerQuery = query.toLowerCase();\n\n        return users.filter(user =\u003e\n            user.name.toLowerCase().includes(lowerQuery) ||\n            user.email.toLowerCase().includes(lowerQuery)\n        );\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "this.repository.listAll",
              "snippet": "this.repository.listAll()",
              "line": 399,
              "type": "call_expression"
            },
            {
              "name": "query.toLowerCase",
              "snippet": "query.toLowerCase()",
              "line": 400,
              "type": "call_expression"
            },
            {
              "name": "users.filter",
              "snippet": "users.filter(user =\u003e\n            user.name.toLowerCase().includes(lowerQuery) ||\n            user.email.toLowerCase().includes(lowerQuery)\n        )",
              "line": 402,
              "type": "call_expression"
            },
            {
              "name": "user.name.toLowerCase().includes",
              "snippet": "user.name.toLowerCase().includes(lowerQuery)",
              "line": 403,
              "type": "call_expression"
            },
            {
              "name": "user.name.toLowerCase",
              "snippet": "user.name.toLowerCase()",
              "line": 403,
              "type": "call_expression"
            },
            {
              "name": "user.email.toLowerCase().includes",
              "snippet": "user.email.toLowerCase().includes(lowerQuery)",
              "line": 404,
              "type": "call_expression"
            },
            {
              "name": "user.email.toLowerCase",
              "snippet": "user.email.toLowerCase()",
              "line": 404,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 398,
          "end_line": 406
        },
        {
          "symbol_name": "user",
          "symbol_type": "function",
          "full_code": "        return users.filter(user =\u003e\n            user.name.toLowerCase().includes(lowerQuery) ||\n            user.email.toLowerCase().includes(lowerQuery)",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "user.name.toLowerCase().includes",
              "snippet": "user.name.toLowerCase().includes(lowerQuery)",
              "line": 403,
              "type": "call_expression"
            },
            {
              "name": "user.name.toLowerCase",
              "snippet": "user.name.toLowerCase()",
              "line": 403,
              "type": "call_expression"
            },
            {
              "name": "user.email.toLowerCase().includes",
              "snippet": "user.email.toLowerCase().includes(lowerQuery)",
              "line": 404,
              "type": "call_expression"
            },
            {
              "name": "user.email.toLowerCase",
              "snippet": "user.email.toLowerCase()",
              "line": 404,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 402,
          "end_line": 404
        },
        {
          "symbol_name": "User",
          "symbol_type": "class",
          "full_code": "class User implements IUser {\n    public readonly id: UserId;\n    public name: UserName;\n    public email: UserEmail;\n    public status: UserStatus;\n    public readonly createdAt: Date;\n    public metadata: Record\u003cstring, any\u003e;\n    public permissions: Permission[];\n    public lastLoginAt?: Date;\n\n    constructor(\n        id: UserId,\n        name: UserName,\n        email: UserEmail,\n        status: UserStatus = UserStatus.ACTIVE,\n        permissions: Permission[] = DEFAULT_PERMISSIONS\n    ) {\n        this.id = id;\n        this.name = name;\n        this.email = email;\n        this.status = status;\n        this.createdAt = new Date();\n        this.metadata = {};\n        this.permissions = permissions;\n    }\n\n    public activate(): void {\n        this.status = UserStatus.ACTIVE;\n    }\n\n    public deactivate(): void {\n        this.status = UserStatus.INACTIVE;\n    }\n\n    public suspend(): void {\n        this.status = UserStatus.SUSPENDED;\n    }\n\n    public hasPermission(permission: Permission): boolean {\n        return this.permissions.includes(permission) || this.permissions.includes(Permission.ADMIN);\n    }\n\n    public addPermission(permission: Permission): void {\n        if (!this.hasPermission(permission)) {\n            this.permissions.push(permission);\n        }\n    }\n\n    public removePermission(permission: Permission): void {\n        this.permissions = this.permissions.filter(p =\u003e p !== permission);\n    }\n\n    public updateLastLogin(): void {\n        this.lastLoginAt = new Date();\n    }\n\n    public toJSON(): UserResponse {\n        return {\n            id: this.id,\n            name: this.name,\n            email: this.email,\n            status: this.status,\n            createdAt: this.createdAt,\n            metadata: this.metadata,\n            permissions: this.permissions,\n            lastLoginAt: this.lastLoginAt\n        };\n    }\n\n    public static fromJSON(data: UserResponse): User {\n        const user = new User(data.id, data.name, data.email, data.status, data.permissions);\n        user.metadata = data.metadata || {};\n        user.lastLoginAt = data.lastLoginAt;\n        return user;\n    }\n}",
          "doc_comment": "// User class",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "id",
              "snippet": "public readonly id: UserId",
              "line": 188,
              "type": "public_field_definition"
            },
            {
              "name": "name",
              "snippet": "public name: UserName",
              "line": 189,
              "type": "public_field_definition"
            },
            {
              "name": "email",
              "snippet": "public email: UserEmail",
              "line": 190,
              "type": "public_field_definition"
            },
            {
              "name": "status",
              "snippet": "public status: UserStatus",
              "line": 191,
              "type": "public_field_definition"
            },
            {
              "name": "createdAt",
              "snippet": "public readonly createdAt: Date",
              "line": 192,
              "type": "public_field_definition"
            },
            {
              "name": "metadata",
              "snippet": "public metadata: Record\u003cstring, any\u003e",
              "line": 193,
              "type": "public_field_definition"
            },
            {
              "name": "permissions",
              "snippet": "public permissions: Permission[]",
              "line": 194,
              "type": "public_field_definition"
            },
            {
              "name": "lastLoginAt",
              "snippet": "public lastLoginAt?: Date",
              "line": 195,
              "type": "public_field_definition"
            },
            {
              "name": "constructor",
              "snippet": "constructor(\n        id: UserId,\n        name: UserName,\n        email: UserEmail,\n        status: UserStatus = UserStatus.ACTIVE,\n        permissions: Permission[] = DEFAULT_PERMISSIONS\n    ) {\n        this.id = id;\n        this.name = name;\n        this.email = email;\n        this.status = status;\n        this.createdAt = new Date();\n        this.metadata = {};\n        this.permissions = permissions;\n    }",
              "line": 197,
              "type": "method"
            },
            {
              "name": "activate",
              "snippet": "public activate(): void {\n        this.status = UserStatus.ACTIVE;\n    }",
              "line": 213,
              "type": "method"
            },
            {
              "name": "deactivate",
              "snippet": "public deactivate(): void {\n        this.status = UserStatus.INACTIVE;\n    }",
              "line": 217,
              "type": "method"
            },
            {
              "name": "suspend",
              "snippet": "public suspend(): void {\n        this.status = UserStatus.SUSPENDED;\n    }",
              "line": 221,
              "type": "method"
            },
            {
              "name": "hasPermission",
              "snippet": "public hasPermission(permission: Permission): boolean {\n        return this.permissions.includes(permission) || this.permissions.includes(Permission.ADMIN);\n    }",
              "line": 225,
              "type": "method"
            },
            {
              "name": "this.permissions.includes",
              "snippet": "this.permissions.includes(permission)",
              "line": 226,
              "type": "call_expression"
            },
            {
              "name": "this.permissions.includes",
              "snippet": "this.permissions.includes(Permission.ADMIN)",
              "line": 226,
              "type": "call_expression"
            },
            {
              "name": "addPermission",
              "snippet": "public addPermission(permission: Permission): void {\n        if (!this.hasPermission(permission)) {\n            this.permissions.push(permission);\n        }\n    }",
              "line": 229,
              "type": "method"
            },
            {
              "name": "this.hasPermission",
              "snippet": "this.hasPermission(permission)",
              "line": 230,
              "type": "call_expression"
            },
            {
              "name": "this.permissions.push",
              "snippet": "this.permissions.push(permission)",
              "line": 231,
              "type": "call_expression"
            },
            {
              "name": "removePermission",
              "snippet": "public removePermission(permission: Permission): void {\n        this.permissions = this.permissions.filter(p =\u003e p !== permission);\n    }",
              "line": 235,
              "type": "method"
            },
            {
              "name": "this.permissions.filter",
              "snippet": "this.permissions.filter(p =\u003e p !== permission)",
              "line": 236,
              "type": "call_expression"
            },
            {
              "name": "updateLastLogin",
              "snippet": "public updateLastLogin(): void {\n        this.lastLoginAt = new Date();\n    }",
              "line": 239,
              "type": "method"
            },
            {
              "name": "toJSON",
              "snippet": "public toJSON(): UserResponse {\n        return {\n            id: this.id,\n            name: this.name,\n            email: this.email,\n            status: this.status,\n            createdAt: this.createdAt,\n            metadata: this.metadata,\n            permissions: this.permissions,\n            lastLoginAt: this.lastLoginAt\n        };\n    }",
              "line": 243,
              "type": "method"
            },
            {
              "name": "fromJSON",
              "snippet": "public static fromJSON(data: UserResponse): User {\n        const user = new User(data.id, data.name, data.email, data.status, data.permissions);\n        user.metadata = data.metadata || {};\n        user.lastLoginAt = data.lastLoginAt;\n        return user;\n    }",
              "line": 256,
              "type": "method"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 187,
          "end_line": 262
        },
        {
          "symbol_name": "UserManager",
          "symbol_type": "class",
          "full_code": "class UserManager\u003cT extends IUser = User\u003e {\n    constructor(private service: IUserService) {}\n\n    async bulkCreateUsers(userDataList: CreateUserRequest[]): Promise\u003cApiResponse\u003cUser[]\u003e\u003e {\n        const createdUsers: User[] = [];\n        const errors: string[] = [];\n\n        for (const userData of userDataList) {\n            try {\n                const user = await this.service.createUser(userData);\n                createdUsers.push(user);\n            } catch (error) {\n                errors.push(`Failed to create user ${userData.name}: ${error.message}`);\n            }\n        }\n\n        return createApiResponse(createdUsers, errors.length \u003e 0 ? 'error' : 'success');\n    }\n\n    async getUserStats(): Promise\u003cApiResponse\u003c{\n        total: number;\n        active: number;\n        inactive: number;\n        suspended: number;\n    }\u003e\u003e {\n        const users = await this.service.listUsers();\n        \n        const stats = {\n            total: users.length,\n            active: users.filter(u =\u003e u.status === UserStatus.ACTIVE).length,\n            inactive: users.filter(u =\u003e u.status === UserStatus.INACTIVE).length,\n            suspended: users.filter(u =\u003e u.status === UserStatus.SUSPENDED).length\n        };\n\n        return createApiResponse(stats);\n    }\n\n    async exportUsers(format: 'json' | 'csv' = 'json'): Promise\u003cstring\u003e {\n        const users = await this.service.listUsers();\n        const userData = users.map(user =\u003e user.toJSON());\n\n        if (format === 'json') {\n            return JSON.stringify(userData, null, 2);\n        } else {\n            // Simple CSV implementation\n            const headers = Object.keys(userData[0] || {});\n            const csvRows = [\n                headers.join(','),\n                ...userData.map(row =\u003e \n                    headers.map(header =\u003e JSON.stringify(row[header as keyof UserResponse])).join(',')\n                )\n            ];\n            return csvRows.join('\\n');\n        }\n    }\n}",
          "doc_comment": "// Manager class with generics",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "constructor",
              "snippet": "constructor(private service: IUserService) {}",
              "line": 415,
              "type": "method"
            },
            {
              "name": "bulkCreateUsers",
              "snippet": "async bulkCreateUsers(userDataList: CreateUserRequest[]): Promise\u003cApiResponse\u003cUser[]\u003e\u003e {\n        const createdUsers: User[] = [];\n        const errors: string[] = [];\n\n        for (const userData of userDataList) {\n            try {\n                const user = await this.service.createUser(userData);\n                createdUsers.push(user);\n            } catch (error) {\n                errors.push(`Failed to create user ${userData.name}: ${error.message}`);\n            }\n        }\n\n        return createApiResponse(createdUsers, errors.length \u003e 0 ? 'error' : 'success');\n    }",
              "line": 417,
              "type": "method"
            },
            {
              "name": "this.service.createUser",
              "snippet": "this.service.createUser(userData)",
              "line": 423,
              "type": "call_expression"
            },
            {
              "name": "createdUsers.push",
              "snippet": "createdUsers.push(user)",
              "line": 424,
              "type": "call_expression"
            },
            {
              "name": "errors.push",
              "snippet": "errors.push(`Failed to create user ${userData.name}: ${error.message}`)",
              "line": 426,
              "type": "call_expression"
            },
            {
              "name": "createApiResponse",
              "snippet": "createApiResponse(createdUsers, errors.length \u003e 0 ? 'error' : 'success')",
              "line": 430,
              "type": "call_expression"
            },
            {
              "name": "getUserStats",
              "snippet": "async getUserStats(): Promise\u003cApiResponse\u003c{\n        total: number;\n        active: number;\n        inactive: number;\n        suspended: number;\n    }\u003e\u003e {\n        const users = await this.service.listUsers();\n        \n        const stats = {\n            total: users.length,\n            active: users.filter(u =\u003e u.status === UserStatus.ACTIVE).length,\n            inactive: users.filter(u =\u003e u.status === UserStatus.INACTIVE).length,\n            suspended: users.filter(u =\u003e u.status === UserStatus.SUSPENDED).length\n        };\n\n        return createApiResponse(stats);\n    }",
              "line": 433,
              "type": "method"
            },
            {
              "name": "this.service.listUsers",
              "snippet": "this.service.listUsers()",
              "line": 439,
              "type": "call_expression"
            },
            {
              "name": "users.filter",
              "snippet": "users.filter(u =\u003e u.status === UserStatus.ACTIVE)",
              "line": 443,
              "type": "call_expression"
            },
            {
              "name": "users.filter",
              "snippet": "users.filter(u =\u003e u.status === UserStatus.INACTIVE)",
              "line": 444,
              "type": "call_expression"
            },
            {
              "name": "users.filter",
              "snippet": "users.filter(u =\u003e u.status === UserStatus.SUSPENDED)",
              "line": 445,
              "type": "call_expression"
            },
            {
              "name": "createApiResponse",
              "snippet": "createApiResponse(stats)",
              "line": 448,
              "type": "call_expression"
            },
            {
              "name": "exportUsers",
              "snippet": "async exportUsers(format: 'json' | 'csv' = 'json'): Promise\u003cstring\u003e {\n        const users = await this.service.listUsers();\n        const userData = users.map(user =\u003e user.toJSON());\n\n        if (format === 'json') {\n            return JSON.stringify(userData, null, 2);\n        } else {\n            // Simple CSV implementation\n            const headers = Object.keys(userData[0] || {});\n            const csvRows = [\n                headers.join(','),\n                ...userData.map(row =\u003e \n                    headers.map(header =\u003e JSON.stringify(row[header as keyof UserResponse])).join(',')\n                )\n            ];\n            return csvRows.join('\\n');\n        }\n    }",
              "line": 451,
              "type": "method"
            },
            {
              "name": "this.service.listUsers",
              "snippet": "this.service.listUsers()",
              "line": 452,
              "type": "call_expression"
            },
            {
              "name": "users.map",
              "snippet": "users.map(user =\u003e user.toJSON())",
              "line": 453,
              "type": "call_expression"
            },
            {
              "name": "user.toJSON",
              "snippet": "user.toJSON()",
              "line": 453,
              "type": "call_expression"
            },
            {
              "name": "JSON.stringify",
              "snippet": "JSON.stringify(userData, null, 2)",
              "line": 456,
              "type": "call_expression"
            },
            {
              "name": "Object.keys",
              "snippet": "Object.keys(userData[0] || {})",
              "line": 459,
              "type": "call_expression"
            },
            {
              "name": "headers.join",
              "snippet": "headers.join(',')",
              "line": 461,
              "type": "call_expression"
            },
            {
              "name": "userData.map",
              "snippet": "userData.map(row =\u003e \n                    headers.map(header =\u003e JSON.stringify(row[header as keyof UserResponse])).join(',')\n                )",
              "line": 462,
              "type": "call_expression"
            },
            {
              "name": "headers.map(header =\u003e JSON.stringify(row[header as keyof UserResponse])).join",
              "snippet": "headers.map(header =\u003e JSON.stringify(row[header as keyof UserResponse])).join(',')",
              "line": 463,
              "type": "call_expression"
            },
            {
              "name": "headers.map",
              "snippet": "headers.map(header =\u003e JSON.stringify(row[header as keyof UserResponse]))",
              "line": 463,
              "type": "call_expression"
            },
            {
              "name": "JSON.stringify",
              "snippet": "JSON.stringify(row[header as keyof UserResponse])",
              "line": 463,
              "type": "call_expression"
            },
            {
              "name": "csvRows.join",
              "snippet": "csvRows.join('\\n')",
              "line": 466,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 414,
          "end_line": 469
        },
        {
          "symbol_name": "getUserStats",
          "symbol_type": "method",
          "full_code": "    async getUserStats(): Promise\u003cApiResponse\u003c{\n        total: number;\n        active: number;\n        inactive: number;\n        suspended: number;\n    }\u003e\u003e {\n        const users = await this.service.listUsers();\n        \n        const stats = {\n            total: users.length,\n            active: users.filter(u =\u003e u.status === UserStatus.ACTIVE).length,\n            inactive: users.filter(u =\u003e u.status === UserStatus.INACTIVE).length,\n            suspended: users.filter(u =\u003e u.status === UserStatus.SUSPENDED).length\n        };\n\n        return createApiResponse(stats);\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "this.service.listUsers",
              "snippet": "this.service.listUsers()",
              "line": 439,
              "type": "call_expression"
            },
            {
              "name": "users.filter",
              "snippet": "users.filter(u =\u003e u.status === UserStatus.ACTIVE)",
              "line": 443,
              "type": "call_expression"
            },
            {
              "name": "users.filter",
              "snippet": "users.filter(u =\u003e u.status === UserStatus.INACTIVE)",
              "line": 444,
              "type": "call_expression"
            },
            {
              "name": "users.filter",
              "snippet": "users.filter(u =\u003e u.status === UserStatus.SUSPENDED)",
              "line": 445,
              "type": "call_expression"
            },
            {
              "name": "createApiResponse",
              "snippet": "createApiResponse(stats)",
              "line": 448,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 433,
          "end_line": 449
        },
        {
          "symbol_name": "fromJSON",
          "symbol_type": "method",
          "full_code": "    public static fromJSON(data: UserResponse): User {\n        const user = new User(data.id, data.name, data.email, data.status, data.permissions);\n        user.metadata = data.metadata || {};\n        user.lastLoginAt = data.lastLoginAt;\n        return user;\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.ts",
          "start_line": 256,
          "end_line": 261
        },
        {
          "symbol_name": "save",
          "symbol_type": "method",
          "full_code": "    async save(user: User): Promise\u003cUser\u003e {\n        if (!user.id) {\n            (user as any).id = this.nextId++;\n        }\n        this.users.set(user.id, user);\n        return user;\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "this.users.set",
              "snippet": "this.users.set(user.id, user)",
              "line": 277,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 273,
          "end_line": 279
        },
        {
          "symbol_name": "user",
          "symbol_type": "variable",
          "full_code": "        const user = new User(\n            generateId(),\n            userData.name,\n            userData.email,\n            UserStatus.ACTIVE,\n            userData.permissions || DEFAULT_PERMISSIONS\n        );",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "generateId",
              "snippet": "generateId()",
              "line": 338,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 337,
          "end_line": 343
        },
        {
          "symbol_name": "initializeUserSystem",
          "symbol_type": "function",
          "full_code": "function initializeUserSystem(config: {\n    repositoryType?: 'memory' | 'database';\n    maxUsers?: number;\n    defaultPermissions?: Permission[];\n} = {}): { service: UserService; manager: UserManager } {\n    isInitialized = true;\n    userCount = 0;\n\n    const repository = createUserRepository(config.repositoryType);\n    const service = createUserService(repository);\n    const manager = new UserManager(service);\n\n    console.log('User management system initialized');\n    return { service, manager };\n}",
          "doc_comment": "// Initialization function",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "createUserRepository",
              "snippet": "createUserRepository(config.repositoryType)",
              "line": 497,
              "type": "call_expression"
            },
            {
              "name": "createUserService",
              "snippet": "createUserService(repository)",
              "line": 498,
              "type": "call_expression"
            },
            {
              "name": "console.log",
              "snippet": "console.log('User management system initialized')",
              "line": 501,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 489,
          "end_line": 503
        },
        {
          "symbol_name": "main",
          "symbol_type": "function",
          "full_code": "async function main(): Promise\u003cvoid\u003e {\n    const { service, manager } = initializeUserSystem();\n\n    // Create test users\n    const testUsers: CreateUserRequest[] = [\n        { name: 'Alice Johnson', email: 'alice@example.com', permissions: [Permission.READ, Permission.WRITE] },\n        { name: 'Bob Smith', email: 'bob@example.com', permissions: [Permission.READ] },\n        { name: 'Charlie Admin', email: 'charlie@example.com', permissions: [Permission.ADMIN] }\n    ];\n\n    const result = await manager.bulkCreateUsers(testUsers);\n    console.log('Bulk create result:', result);\n\n    const stats = await manager.getUserStats();\n    console.log('User stats:', stats);\n\n    const exportedData = await manager.exportUsers('json');\n    console.log('Exported users:', exportedData);\n}",
          "doc_comment": "// Async main function",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "initializeUserSystem",
              "snippet": "initializeUserSystem()",
              "line": 507,
              "type": "call_expression"
            },
            {
              "name": "manager.bulkCreateUsers",
              "snippet": "manager.bulkCreateUsers(testUsers)",
              "line": 516,
              "type": "call_expression"
            },
            {
              "name": "console.log",
              "snippet": "console.log('Bulk create result:', result)",
              "line": 517,
              "type": "call_expression"
            },
            {
              "name": "manager.getUserStats",
              "snippet": "manager.getUserStats()",
              "line": 519,
              "type": "call_expression"
            },
            {
              "name": "console.log",
              "snippet": "console.log('User stats:', stats)",
              "line": 520,
              "type": "call_expression"
            },
            {
              "name": "manager.exportUsers",
              "snippet": "manager.exportUsers('json')",
              "line": 522,
              "type": "call_expression"
            },
            {
              "name": "console.log",
              "snippet": "console.log('Exported users:', exportedData)",
              "line": 523,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 506,
          "end_line": 524
        },
        {
          "symbol_name": "IUserService",
          "symbol_type": "interface",
          "full_code": "interface IUserService {\n    getUser(id: number): Promise\u003cUser\u003e;\n    createUser(userData: CreateUserRequest): Promise\u003cUser\u003e;\n    updateUser(id: number, updates: Partial\u003cIUser\u003e): Promise\u003cUser\u003e;\n    deleteUser(id: number): Promise\u003cboolean\u003e;\n    listUsers(status?: UserStatus): Promise\u003cUser[]\u003e;\n    searchUsers(query: string): Promise\u003cUser[]\u003e;\n}",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.ts",
          "start_line": 23,
          "end_line": 30
        },
        {
          "symbol_name": "updateLastLogin",
          "symbol_type": "method",
          "full_code": "    public updateLastLogin(): void {\n        this.lastLoginAt = new Date();\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.ts",
          "start_line": 239,
          "end_line": 241
        },
        {
          "symbol_name": "UserId",
          "symbol_type": "type",
          "full_code": "type UserId = number;",
          "doc_comment": "// Type aliases and enums",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.ts",
          "start_line": 33,
          "end_line": 33
        },
        {
          "symbol_name": "ApiResponse",
          "symbol_type": "type",
          "full_code": "type ApiResponse\u003cT\u003e = {\n    data: T;\n    status: 'success' | 'error';\n    message?: string;\n    timestamp: Date;\n};",
          "doc_comment": "// Generic types",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.ts",
          "start_line": 52,
          "end_line": 57
        },
        {
          "symbol_name": "Repository",
          "symbol_type": "type",
          "full_code": "type Repository\u003cT, K = number\u003e = {\n    findById(id: K): Promise\u003cT | null\u003e;\n    save(entity: T): Promise\u003cT\u003e;\n    remove(id: K): Promise\u003cboolean\u003e;\n};",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.ts",
          "start_line": 59,
          "end_line": 63
        },
        {
          "symbol_name": "hasPermission",
          "symbol_type": "method",
          "full_code": "    public hasPermission(permission: Permission): boolean {\n        return this.permissions.includes(permission) || this.permissions.includes(Permission.ADMIN);\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "this.permissions.includes",
              "snippet": "this.permissions.includes(permission)",
              "line": 226,
              "type": "call_expression"
            },
            {
              "name": "this.permissions.includes",
              "snippet": "this.permissions.includes(Permission.ADMIN)",
              "line": 226,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 225,
          "end_line": 227
        },
        {
          "symbol_name": "getById",
          "symbol_type": "method",
          "full_code": "    async getById(id: UserId): Promise\u003cUser | null\u003e {\n        return this.users.get(id) || null;\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "this.users.get",
              "snippet": "this.users.get(id)",
              "line": 270,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 269,
          "end_line": 271
        },
        {
          "symbol_name": "UserEmail",
          "symbol_type": "type",
          "full_code": "type UserEmail = string;",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.ts",
          "start_line": 34,
          "end_line": 34
        },
        {
          "symbol_name": "LogMethod",
          "symbol_type": "function",
          "full_code": "function LogMethod(target: any, propertyName: string, descriptor: PropertyDescriptor) {\n    const method = descriptor.value;\n    \n    descriptor.value = function (...args: any[]) {\n        console.log(`Calling ${propertyName} with arguments:`, args);\n        const result = method.apply(this, args);\n        console.log(`${propertyName} returned:`, result);\n        return result;\n    };\n}",
          "doc_comment": "// Custom decorators",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "console.log",
              "snippet": "console.log(`Calling ${propertyName} with arguments:`, args)",
              "line": 99,
              "type": "call_expression"
            },
            {
              "name": "method.apply",
              "snippet": "method.apply(this, args)",
              "line": 100,
              "type": "call_expression"
            },
            {
              "name": "console.log",
              "snippet": "console.log(`${propertyName} returned:`, result)",
              "line": 101,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 95,
          "end_line": 104
        },
        {
          "symbol_name": "Validate",
          "symbol_type": "function",
          "full_code": "function Validate(validator: (value: any) =\u003e boolean, message: string) {\n    return function (target: any, propertyName: string) {\n        let value = target[propertyName];\n        \n        Object.defineProperty(target, propertyName, {\n            get: () =\u003e value,\n            set: (newValue) =\u003e {\n                if (!validator(newValue)) {\n                    throw new Error(message);\n                }\n                value = newValue;\n            },\n            enumerable: true,\n            configurable: true\n        });\n    };\n}",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "Object.defineProperty",
              "snippet": "Object.defineProperty(target, propertyName, {\n            get: () =\u003e value,\n            set: (newValue) =\u003e {\n                if (!validator(newValue)) {\n                    throw new Error(message);\n                }\n                value = newValue;\n            },\n            enumerable: true,\n            configurable: true\n        })",
              "line": 131,
              "type": "call_expression"
            },
            {
              "name": "validator",
              "snippet": "validator(newValue)",
              "line": 134,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 127,
          "end_line": 143
        },
        {
          "symbol_name": "activate",
          "symbol_type": "method",
          "full_code": "    public activate(): void {\n        this.status = UserStatus.ACTIVE;\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.ts",
          "start_line": 213,
          "end_line": 215
        },
        {
          "symbol_name": "UserName",
          "symbol_type": "type",
          "full_code": "type UserName = string;",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.ts",
          "start_line": 35,
          "end_line": 35
        },
        {
          "symbol_name": "UserStatus",
          "symbol_type": "enum",
          "full_code": "enum UserStatus {\n    ACTIVE = 'active',\n    INACTIVE = 'inactive',\n    SUSPENDED = 'suspended',\n    DELETED = 'deleted'\n}",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": null,
          "file_path": "test/example.ts",
          "start_line": 37,
          "end_line": 42
        },
        {
          "symbol_name": "UserNotFoundError",
          "symbol_type": "class",
          "full_code": "class UserNotFoundError extends Error {\n    constructor(id: UserId) {\n        super(`User with ID ${id} not found`);\n        this.name = 'UserNotFoundError';\n    }\n}",
          "doc_comment": "// Custom error classes",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "constructor",
              "snippet": "constructor(id: UserId) {\n        super(`User with ID ${id} not found`);\n        this.name = 'UserNotFoundError';\n    }",
              "line": 147,
              "type": "method"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 146,
          "end_line": 151
        },
        {
          "symbol_name": "removePermission",
          "symbol_type": "method",
          "full_code": "    public removePermission(permission: Permission): void {\n        this.permissions = this.permissions.filter(p =\u003e p !== permission);\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "this.permissions.filter",
              "snippet": "this.permissions.filter(p =\u003e p !== permission)",
              "line": 236,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 235,
          "end_line": 237
        },
        {
          "symbol_name": "updateUser",
          "symbol_type": "method",
          "full_code": "    async updateUser(id: UserId, updates: Partial\u003cIUser\u003e): Promise\u003cUser\u003e {\n        const user = await this.getUser(id);\n\n        if (updates.name !== undefined) user.name = updates.name;\n        if (updates.email !== undefined) {\n            if (!validateEmail(updates.email)) {\n                throw new ValidationError('email', 'Invalid email format');\n            }\n            user.email = updates.email;\n        }\n        if (updates.status !== undefined) user.status = updates.status;\n        if (updates.metadata !== undefined) user.metadata = { ...user.metadata, ...updates.metadata };\n\n        const updatedUser = await this.repository.save(user);\n        this.invalidateCache(id);\n\n        return updatedUser;\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "this.getUser",
              "snippet": "this.getUser(id)",
              "line": 357,
              "type": "call_expression"
            },
            {
              "name": "validateEmail",
              "snippet": "validateEmail(updates.email)",
              "line": 361,
              "type": "call_expression"
            },
            {
              "name": "this.repository.save",
              "snippet": "this.repository.save(user)",
              "line": 369,
              "type": "call_expression"
            },
            {
              "name": "this.invalidateCache",
              "snippet": "this.invalidateCache(id)",
              "line": 370,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 356,
          "end_line": 373
        },
        {
          "symbol_name": "invalidateCache",
          "symbol_type": "method",
          "full_code": "    private invalidateCache(id: UserId): void {\n        this.cache.delete(id);\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "this.cache.delete",
              "snippet": "this.cache.delete(id)",
              "line": 409,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 408,
          "end_line": 410
        },
        {
          "symbol_name": "getUser",
          "symbol_type": "method",
          "full_code": "    async getUser(id: UserId): Promise\u003cUser\u003e {\n        const user = await this.repository.getById(id);\n        if (!user) {\n            throw new UserNotFoundError(id);\n        }\n        return user;\n    }",
          "doc_comment": "",
          "context": {
            "package": "test",
            "module": "",
            "namespace": ""
          },
          "callers": null,
          "dependencies": [
            {
              "name": "this.repository.getById",
              "snippet": "this.repository.getById(id)",
              "line": 320,
              "type": "call_expression"
            }
          ],
          "file_path": "test/example.ts",
          "start_line": 319,
          "end_line": 325
        }
      ],
      "related_files": []
    }
  ],
  "summary": {
    "changes_summary": "10 files modified with 284 symbols affected. Change complexity: critical. 9 files added. 1 files deleted. 1 configuration files changed",
    "affected_areas": [
      "test (10 files)"
    ],
    "review_focus": [
      "High-impact changes requiring careful review",
      "Interface changes (8) - check for breaking changes",
      "Configuration changes - verify impact on dependent systems",
      "Complex changes requiring thorough testing"
    ],
    "risk_assessment": {
      "level": "critical",
      "score": 1542,
      "factors": [
        "Critical complexity changes",
        "Configuration changes",
        "High impact score"
      ],
      "mitigations": [
        "Require multiple reviewers",
        "Perform comprehensive testing",
        "Consider staged deployment",
        "Prepare rollback plan",
        "Test configuration changes in isolated environment"
      ]
    },
    "recommendations": [
      "Consider breaking this large change into smaller, more focused changes",
      "Update documentation to reflect configuration changes",
      "Consider backwards compatibility for configuration changes",
      "Review interface changes for backwards compatibility",
      "Update API documentation if public interfaces changed",
      "Ensure comprehensive test coverage for the large number of changes"
    ]
  },
  "metadata": {
    "analysis_timestamp": "1752145758",
    "analysis_version": "1.0",
    "supported_languages": [
      "go",
      "javascript",
      "typescript",
      "python"
    ],
    "limitations": [
      "AST parsing may fail for syntactically incorrect code",
      "Cross-repository dependencies are not analyzed",
      "Dynamic function calls may not be detected",
      "Generated code analysis may be incomplete"
    ]
  },
  "mr_context": {
    "title": "examples",
    "description": "@coderabbitai ignore",
    "branch_name": "examples2",
    "created_at": "2025-07-09T18:04:30Z",
    "updated_at": "2025-07-09T18:04:30Z",
    "author": {
      "ID": "43585189",
      "Username": "maxbolgarin",
      "Name": "",
      "Email": ""
    },
    "author_comments": null,
    "commits": [
      {
        "sha": "5760e60bb86f2f36075ee30b2b73caf6305c10f4",
        "subject": "examples",
        "body": "@coderabbitai ignore\n\nChanges from MR: examples\nFiles modified: 0\nBranch: examples2 -\u003e examples",
        "author": "",
        "timestamp": "2025-07-09T18:04:30Z",
        "file_changes": {},
        "total_files": 0
      }
    ],
    "linked_issues": null,
    "linked_tickets": null,
    "file_diffs": null,
    "files_stat": {},
    "total_commits": 1,
    "total_files": 0,
    "total_additions": 0,
    "total_deletions": 0
  }
}